
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 204
#define YY_END_OF_BUFFER 205
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1261] =
    {   0,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,    0,    0,    0,    0,  192,  192,
        0,    0,  205,  203,  201,  202,  202,  100,  203,   98,
      100,  100,  100,   98,   99,   99,  100,  203,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,   15,  100,  100,  100,  100,  100,  100,  100,
      160,  203,  158,  158,  158,  160,  158,  158,  160,  203,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  106,  203,
      102,  106,  106,  104,  103,  102,  106,  203,  106,  104,

      108,  108,  107,  108,  108,  108,  108,  175,  203,  170,
      171,  175,  162,  175,  173,  161,  165,  163,  164,  175,
      203,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  172,  180,  180,  180,  180,  180,
      178,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  201,  177,  203,  202,  186,  187,
      188,  181,  185,  190,  189,  191,  192,  193,  200,  194,
      199,  199,  195,  196,  194,  197,  198,  201,  100,    0,
      100,    0,    0,    0,  100,  100,   99,    0,  100,  100,
      100,  100,  100,  100,  100,   11,  100,  100,  100,  100,

      100,   41,  100,  100,   75,  100,  100,  100,  100,  100,
      100,  100,   62,  100,    5,  100,  100,  100,   14,  100,
       74,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,   36,   72,  100,  100,  100,  100,  100,  100,  100,
      100,   76,  100,  100,  100,  100,  100,  100,  100,  100,
        6,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  160,    0,  159,  160,    0,    0,    0,  160,  160,
      154,  157,  155,    0,  160,  160,  160,  160,  160,  149,
      160,  160,  160,  160,  148,  137,  160,  160,  160,  160,
      136,  160,  135,  160,  160,  160,  160,  146,  160,  160,

      160,  142,  160,  137,  160,  150,  160,  160,  160,  160,
      160,  109,  137,  160,  156,  106,    0,  105,  106,    0,
        0,    0,  106,  106,    0,  101,  103,    0,    5,  201,
      107,    0,    0,    0,    0,    0,  175,    0,  174,  175,
        0,    0,    0,  175,  175,  166,    0,  175,  175,  175,
      175,  175,  175,  175,  175,  168,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  167,  180,    0,
      179,  180,    0,    0,    0,  180,  180,    0,  180,  180,
      180,  176,  180,  180,  176,  180,  180,  180,  176,  176,
      180,  180,  176,  180,  201,  177,    0,    0,    0,  186,

      182,  183,  184,  190,  192,  194,  194,  100,    0,    2,
        2,  100,  100,  100,   67,  100,  100,  100,  100,  100,
       66,  100,  100,  100,  100,  100,  100,  100,  100,   16,
       75,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,   74,  100,  100,    6,   28,
      100,  100,  100,   37,  100,   72,  100,  100,  100,  100,
      100,  100,   10,  100,   97,   19,  100,  100,   22,   76,
      100,  100,  100,   34,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,   73,  100,  100,  100,  100,
      100,  100,  100,  160,    0,    2,    2,  160,  160,  147,

      160,  160,  151,  160,  160,  160,  160,  160,  160,  160,
      160,  114,  160,  137,  160,  152,  160,  160,  160,  160,
      160,  160,  130,  129,  160,  143,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  145,  106,    0,    2,
        2,    0,    0,    0,    0,    2,    2,  175,    0,    2,
        2,  175,  175,  175,  175,  175,  175,  175,  175,  169,
      175,  175,  175,  175,  175,  175,  175,  169,  175,  175,
      175,  175,  175,  180,    0,    2,    2,  180,  180,  180,
      176,  176,  180,  180,  180,  180,  176,    0,    0,    0,
        0,    2,    2,    2,    1,    2,    2,  100,  100,  100,

       53,   43,  100,  100,  100,  100,  100,  100,  100,   50,
       27,  100,   20,  100,  100,   90,   23,  100,  100,   58,
      100,   24,  100,  100,  100,  100,    9,   26,  100,    3,
      100,  100,  100,  100,   18,  100,    7,  100,  100,   93,
       13,  100,  100,  100,  100,   15,  100,  100,  100,  100,
      100,   76,  100,  100,   35,   71,   21,   25,  100,   88,
      100,  100,   63,  100,  100,  100,   73,  100,    8,  100,
      100,   59,  100,  100,    0,    0,    2,    2,    2,    1,
        2,    2,  160,  160,  113,  160,  160,  125,  160,  160,
      152,  160,  160,  153,  160,  160,  110,  160,  160,  160,

      115,  160,  160,  116,  160,  160,  117,    3,  160,  160,
      144,  160,  160,  124,  119,  160,  160,  138,  160,  160,
      160,  160,  160,  160,  145,    0,    0,    2,    2,    2,
        1,    2,    2,    0,    0,    1,    0,    0,    2,    2,
        2,    1,    2,    2,  175,  169,  175,  175,  175,  175,
      175,  175,  169,  175,  169,  175,  175,  175,  175,  169,
      169,  175,  175,  175,    0,    0,    2,    2,    2,    1,
        2,    2,  180,  180,  176,  176,  180,  180,  180,  180,
      180,  176,  180,  180,  180,    2,    2,    1,    1,    1,
        1,    1,    2,    2,    2,   87,  100,   61,  100,   91,

      100,   42,   55,  100,  100,  100,  100,  100,  100,   80,
      100,   85,  100,  100,  100,  100,  100,  100,  100,   56,
      100,   78,   94,   30,  100,  100,  100,  100,  100,  100,
       60,   17,   52,  100,  100,   12,  100,  100,  100,  100,
      100,  100,  100,   71,  100,  100,   64,   51,  100,  100,
       38,   33,  100,   70,   89,   45,  100,  100,    2,    2,
        1,    1,    1,    1,    1,    2,    2,    2,  112,  140,
      160,  160,  160,  131,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  111,  126,  160,  160,  160,  160,
      160,  160,  160,  118,  138,  160,  122,  160,  160,  160,

      137,    2,    2,    1,    1,    1,    1,    1,    2,    2,
        2,    2,    2,    1,    1,    1,    1,    1,    2,    2,
        2,  169,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  169,    2,    2,
        1,    1,    1,    1,    1,    2,    2,    2,  176,  180,
      180,  180,  180,  180,  180,    1,    1,    1,    1,    1,
        2,    2,   39,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,   82,  100,
        4,  100,  100,   94,   57,   69,   28,  100,  100,   96,
       60,  100,  100,  100,  100,   19,   86,   49,  100,   32,

       46,  100,  100,  100,  100,   65,  100,  100,   31,    1,
        1,    1,    1,    1,    2,    2,  160,  160,  128,  160,
      160,    4,  123,  120,  160,  160,  160,  160,  160,  160,
      160,  129,  160,  160,  160,  160,  160,  160,  160,  160,
      160,    1,    1,    1,    1,    1,    2,    2,    1,    1,
        1,    1,    1,    2,    2,  175,  175,  169,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,    1,    1,
        1,    1,    1,    2,    2,  180,  180,  180,  180,  180,
      180,    1,    1,  100,   61,  100,  100,   44,   79,  100,
       48,  100,  100,   20,  100,  100,   84,  100,  100,   83,

       68,   54,  100,  100,   95,   81,  100,   22,   21,  100,
      100,   77,   40,  100,    1,    1,  160,  160,  160,  160,
      160,  132,  160,  160,  160,  160,  130,  160,  133,  160,
      160,  160,  127,  160,  160,  139,  160,    1,    1,    1,
        1,  175,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,    1,    1,  180,  180,  180,  180,  176,  100,
      100,  100,   79,  100,  100,   27,   47,   23,  100,   24,
      100,  100,   97,   25,  100,  100,  160,  160,  160,  160,
      160,  160,  160,  160,  116,  121,  160,  160,  160,  122,
      141,  139,  160,  175,  175,  175,  175,  175,  175,  175,

      175,  180,  180,  180,  176,  100,   53,   92,  100,   50,
       58,   18,  100,  100,   29,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  134,  175,  175,  175,  175,  175,
      175,  175,  180,  180,  100,  100,  160,  160,  160,  160,
      115,  160,  119,  141,  175,  175,  175,  175,  175,  100,
      112,  113,  160,  124,  175,   51,  160,  175,  128,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,    8,    8,    8,    8,    8,   10,
       11,   12,   13,   14,   15,   16,    8,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    8,   13,
       20,   21,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
       22,   23,   24,    8,   25,   26,   27,   28,   29,   30,

       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   13,   54,   55,    1,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56
    } ;

static yyconst flex_int32_t yy_meta[57] =
    {   0,
        1,    2,    3,    1,    3,    3,    4,    5,    6,    7,
        7,    5,    5,    8,    5,    5,    5,    5,    5,    5,
        5,    8,    9,    8,   10,   10,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    7,    7,    5,   11
    } ;

static yyconst flex_int16_t yy_base[1348] =
    {   0,
        0,    0,   56,    0,  112,    0,  167,  181,  196,    0,
      252,    0,  307,    0,  314,  322,  354,  359,  172,  186,
      368,  424,  694, 8410,  174, 8410, 8410,  309,  317, 8410,
      341, 8410,  361,  371,  373,  375,  379,  392,  385,  411,
      423,  434,  445,  459,  447,  481,  457,  484,  487,  507,
      511,  515,  521,  540,  579,  535,  549,  567,  574,  602,
      581,  321, 8410,  605,  613,  627,  631,  642,  645,  655,
      665,  702,  667,  673,  671,  679,  740,  710,  728,  748,
      762,  766,  780,  786,  800,  705,  742,  813,  821,  324,
     8410,  833,  835,  860,  862,  827,  865,  882,  873, 8410,

     8410,  905, 8410,  919,  935,  673,  660,  935,  366, 8410,
     8410,  937, 8410,  939,  943,  957,  963, 8410, 8410,  961,
      980,  983,  989,  987, 1001, 1022, 1027, 1035, 1049, 1060,
     1073, 1075, 1081, 1030, 8410, 8410, 1086,  372, 1104, 1106,
     1109, 1117, 1126, 1172, 1107, 1143, 1145, 1149, 1175, 1180,
     1183, 1203, 1209, 1211, 1253, 8410, 1267, 1281,    0, 8410,
     8410, 8410,  573,    0, 8410, 8410,    0, 8410, 8410,    0,
     8410, 8410, 8410, 8410,  397, 8410, 8410,  188,  607,  403,
      675, 1253,  478,  415,  772, 1078, 1205, 1280,  794,  847,
     1283,  949,  875,  998,  893,  774, 1217, 1130, 1272, 1291,

     1304,  907, 1311, 1314, 1083, 1316, 1319, 1326, 1329, 1334,
     1348, 1355, 1357, 1359, 1362, 1367, 1385, 1389, 1392, 1394,
     1396, 1399, 1403, 1417, 1423, 1425, 1435, 1430, 1437, 1445,
     1450, 1455, 1457, 1459, 1469, 1463, 1481, 1483, 1490, 1492,
     1503, 1505, 1511, 1515, 1518, 1530, 1537, 1548, 1551, 1558,
     1563, 1566, 1576, 1581, 1584, 1586, 1589, 1608, 1599, 1612,
     1617, 1631,  485, 1637, 1639, 1657,  508,  436, 1660, 1668,
     1664, 1666, 1679, 1692, 1692, 1704, 1706, 1710, 1718, 1739,
     1743, 1745, 1747, 1758, 1766, 1769, 1780, 1788, 1791, 1816,
     1793, 1814, 1829, 1835, 1837, 1843, 1848, 1856, 1845, 1867,

     1870, 1888, 1885, 1893, 1896, 1911, 1916, 1919, 1922, 1930,
     1943, 1945, 1948, 1956, 1968, 1970,  554, 1976, 1981, 1994,
      563,  438, 2001, 2005, 2030, 8410, 2034, 2001, 2013, 2059,
     8410, 2073,  661,  647,  643,  634, 2073,  572, 2075, 2077,
     2059,  592,  524, 2095, 2099, 2101, 2108, 2119, 2127, 2122,
     2124, 2130, 2156, 2159, 2164, 2162, 2177, 2185, 2190, 2198,
     2203, 2209, 2223, 2231, 2242, 2254, 2256, 2262, 2267,  636,
     2280, 2282, 2300,  637,  582, 2303, 2311, 2320,  962, 2323,
     2331, 2336, 2342, 2356, 2362, 2367, 2375, 2381, 2386, 2394,
     2408, 2412, 2416, 2420, 2451, 8410, 2465,  632,  622,    0,

     8410, 8410, 8410,    0,    0,    0, 8410, 1610,  655, 2480,
     2534, 1698, 1801, 1890, 1751, 2132, 2195, 2031, 2435, 2277,
     1824, 2292, 2453, 2484, 2229, 2473, 2450, 2491, 2498, 2502,
     2506, 2516, 2511, 2537, 2544, 2541, 2552, 2548, 2567, 2570,
     2555, 2573, 2575, 2577, 2585, 2597, 2603, 2606, 2608, 2615,
     2611, 2617, 2626, 2621, 2636, 2639, 2644, 2648, 2651, 2654,
     2658, 2662, 2676, 2682, 2684, 2686, 2688, 2690, 2697, 2711,
     2717, 2720, 2725, 2729, 2735, 2740, 2743, 2748, 2750, 2762,
     2754, 2768, 2777, 2789, 2791, 2796, 2800, 2804, 2810, 2818,
     2823, 2825, 2833, 2836,  663, 2879, 2933, 2851, 2882, 2859,

     2890, 2841, 2893, 2936, 2905, 2933, 2944, 2967, 2973, 2975,
     2979, 2994, 2998, 3002, 3006, 3017, 3020, 3032, 3040, 3043,
     3045, 3051, 3063, 3066, 3078, 3084, 3089, 3097, 3102, 3108,
     3120, 3128, 3134, 3142, 3147, 3153, 3165, 3173,  694, 3210,
     3264,  622,  597,  591,  576,  552,  534, 3176,  711, 3318,
     3372, 3187, 3179, 3213, 3228, 3224, 3191, 3251, 3275, 3286,
     3298, 3336, 3290, 3332, 3338, 3340, 3375, 3344, 3383, 3394,
     3396, 3402, 3420, 3423,  716, 3449, 3503, 3452, 3549, 3426,
     3460, 3463, 3474, 3485, 3507, 3521, 3525,  533,  520,  738,
      760,    0,  502, 3562, 3597,  364, 3651, 3055, 3216, 3342,

     2885, 2838, 2887, 3496, 2941, 3529, 2913, 3257, 3551, 3381,
     3429, 3553, 3415, 3558, 3577, 3584, 3587, 3591, 3609, 3611,
     3615, 3619, 3644, 3621, 3655, 3657, 3662, 3665, 3676, 3683,
     3687, 3689, 3694, 3698, 3712, 3716, 3719, 3723, 3725, 3727,
     3734, 3745, 3748, 3753, 3755, 3763, 3767, 3773, 3778, 3785,
     3781, 3788, 3796, 3806, 3811, 3814, 3817, 3819, 3821, 3825,
     3829, 3843, 3832, 3847, 3851, 3853, 3858, 3865, 3871, 3876,
     3883, 3885, 3894, 3903,  785,  811,  498, 3929,  481, 3952,
      448, 4006, 3918, 3939, 3933, 3963, 3966, 3974, 3977, 3988,
     4010, 4013, 4028, 4031, 4039, 4042, 4057, 4061, 4065, 4069,

     4088, 4090, 4092, 4096, 4115, 4117, 4119, 4138, 4143, 4146,
     4140, 4164, 4166, 4169, 4172, 4190, 4193, 4201, 4215, 4219,
     4204, 4227, 4245, 4247, 4250,  831,  821,  458, 4277,  442,
     4300,  478, 4354,  445,  429,    0,  874,  912,  421, 4289,
      398, 4408,  531, 4462, 4304, 4312, 4325, 4323, 4331, 4357,
     4336, 4361, 4372, 4380, 4411, 4385, 4430, 4434, 4449, 4473,
     4476, 4484, 4488, 4502,  920,  954,  388, 4530,  362, 4553,
      598, 4607, 4510, 1022, 4524, 4535, 4556, 4564, 4575, 4567,
     4578, 4610, 4614, 4618, 4632, 4662, 4671,    0, 4685, 4675,
      332, 4739, 4691,  320, 4718, 3914, 4390, 4094, 3945, 4016,

     4063, 4125, 4175, 4443, 4280, 4516, 4520, 4223, 4628, 4310,
     4416, 4318, 4703, 4365, 4678, 4691, 4705, 4726, 4470, 4587,
     4745, 4733, 4751, 4748, 4753, 4757, 4759, 4772, 4780, 4785,
     4790, 4795, 4798, 4800, 4805, 4818, 4823, 4828, 4830, 4832,
     4841, 4843, 4853, 4855, 4863, 4865, 4876, 4884, 4886, 4888,
     4897, 4899, 4906, 4908, 4911, 4917, 4919, 4930, 4945, 4958,
     4968, 4979,    0,  313, 5022, 4985, 5076, 4996, 4932, 4992,
     5004, 5026, 5040, 5044, 5048, 5063, 5087, 5095, 5090, 5098,
     5101, 5122, 5128, 5134, 5136, 5140, 5158, 5160, 5163, 5181,
     5185, 5187, 5189, 5207, 5211, 5215, 5219, 5230, 5238, 5242,

     5244, 5270, 5282, 5293, 5304,    0,  306, 5347, 5277, 5401,
     5319, 5331, 5361, 5455, 5373, 5509,  296, 5563, 5375, 5617,
     5386, 5405, 5426, 5327, 5423, 5437, 5382, 5459, 5473, 5481,
     5486, 5512, 5527, 5530, 5566, 5535, 5532, 5570, 5596, 5607,
     5671, 5628, 5725,  289, 5779, 5635, 5833, 5646, 5652, 5675,
     5689, 5697, 5728, 5597, 5743, 5754, 5763, 5762, 5887, 5790,
     5805, 5816, 5002, 5394, 5036, 5479, 5240, 5015, 5448, 5461,
     5677, 5341, 5685, 5799, 5707, 5801, 5826, 5836, 5069, 5813,
     5435, 5839, 5845, 5854, 5857, 5869, 5864, 5890, 5893, 5897,
     5899, 5901, 5908, 5911, 5920, 5923, 5929, 5933, 5935, 5942,

     5944, 5947, 5954, 5956, 5962, 5965, 5967, 5980, 5985, 6013,
     6024, 5985,    0, 6028, 6039, 6051, 6040, 6048, 6052, 6054,
     6060, 6072, 6078, 6080, 6084, 6098, 6102, 6104, 6106, 6110,
     6124, 6129, 6137, 6142, 6150, 6162, 6164, 6168, 6187, 6189,
     6195, 6215, 6224, 6219,    0, 6238, 6247, 6256, 6267, 6276,
     6271,    0, 6285, 6295, 6308, 6304, 6307, 6275, 6310, 6312,
     6330, 6334, 6336, 6338, 6357, 6361, 6365, 6363, 6393, 6403,
     6398,    0, 6417, 6426, 6435, 6432, 6434, 6437, 6445, 6457,
     6459, 6485, 6494, 6455, 6174, 6484, 6406, 6241, 6490, 6495,
     6498, 6502, 6513, 6516, 6520, 6522, 6524, 6531, 6542, 6545,

     6549, 6551, 6554, 6556, 6560, 6563, 6569, 6574, 6583, 6587,
     6589, 6594, 6596, 6601, 6628, 6637, 6608, 6634, 6637, 6639,
     6657, 6660, 6662, 6675, 6680, 6683, 6686, 6698, 6706, 6712,
     6718, 6720, 6724, 6726, 6744, 6747, 6750, 6777, 6792, 6781,
     6804, 6793, 6801, 6804, 6806, 6812, 6824, 6835, 6837, 6843,
     6857, 6861, 6887, 6877, 6883, 6889, 6891, 6895, 6909, 6913,
     6921, 6816, 6649, 6923, 6932, 6739, 6846, 6934, 6936, 6942,
     6954, 6956, 6961, 6964, 6966, 6968, 6979, 6990, 6993, 7012,
     7014, 7017, 7025, 7020, 7039, 7043, 7045, 7047, 7058, 7066,
     7069, 7071, 7077, 7090, 7092, 7095, 7103, 7114, 7117, 7122,

     7135, 7137, 7141, 7143, 7156, 7164, 7166, 7168, 7170, 7175,
     7177, 7179, 7188, 7197, 7199, 7201, 7212, 7220, 7226, 7231,
     7239, 7245, 7253, 7259, 7264, 7272, 7283, 7286, 7297, 7291,
     7309, 7317, 7320, 7331, 7340, 7342, 7346, 7364, 7366, 7372,
     7377, 7395, 7397, 7401, 7403, 7416, 7424, 7427, 7429, 7435,
     7447, 7453, 7458, 7461, 7472, 7405, 7476, 7480, 7484, 8410,
     7520, 7531, 7542, 7553, 7564, 7571, 7581, 7588, 7598, 7605,
     7615, 7622, 7632, 7639, 7649, 7660, 7671, 7682, 7692, 7698,
     7705, 7712, 7719, 7726, 7736, 7747, 7757, 7768, 7778, 7789,
     7800, 7810, 7821, 7831, 7842, 7853, 7864, 7875, 7886, 7897,

     7908, 7919, 7930, 7941, 7952, 7963, 7974, 7985, 7996, 8007,
     8018, 8029, 8040, 8051, 8062, 8073, 8084, 8095, 8102, 8113,
     8124, 8135, 8146, 8157, 8168, 8179, 8190, 8201, 8212, 8219,
     8230, 8241, 8252, 8263, 8274, 8285, 8292, 8303, 8314, 8325,
     8336, 8347, 8354, 8365, 8376, 8387, 8398
    } ;

static yyconst flex_int16_t yy_def[1348] =
    {   0,
     1260,    1, 1260,    3, 1260,    5, 1261, 1261, 1260,    9,
     1260,   11,   11,   13, 1262, 1262, 1263, 1263, 1264, 1264,
     1265, 1265, 1260, 1260, 1260, 1260, 1260, 1266, 1267, 1260,
     1266, 1260, 1266, 1266, 1266, 1266, 1266, 1260, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1268, 1269, 1260, 1268, 1268, 1268, 1268, 1268, 1268, 1260,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1270, 1271,
     1260, 1270, 1270, 1270, 1270, 1270, 1270, 1260, 1270, 1260,

     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1272, 1273, 1260,
     1260, 1272, 1260, 1272, 1272, 1272, 1272, 1260, 1260, 1272,
     1260, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1260, 1260, 1274, 1275, 1274, 1274,
     1274, 1274, 1260, 1274,  144, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1260, 1260, 1260, 1260, 1276, 1260,
     1260, 1260, 1260, 1277, 1260, 1260, 1278, 1260, 1260, 1279,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1266, 1267,
     1266, 1280, 1267, 1267, 1266, 1266, 1266, 1260, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,

     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1268, 1269, 1268, 1268, 1281, 1269, 1269, 1268, 1268,
     1268, 1268, 1268, 1260, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,   77, 1268,

     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1270, 1271, 1270, 1270, 1282,
     1271, 1271, 1270, 1270, 1260, 1260, 1270, 1260, 1270, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1272, 1273, 1272, 1272,
     1283, 1273, 1273, 1272, 1272, 1272, 1260, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1274, 1275,
     1274, 1274, 1284, 1275, 1275, 1274, 1274, 1260,  144, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1260, 1260, 1260, 1260, 1260, 1276,

     1260, 1260, 1260, 1277, 1278, 1279, 1260, 1266, 1285, 1286,
     1286, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1268, 1287, 1288, 1288, 1268, 1268, 1268,

     1268,   77, 1268, 1268, 1268,   77, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1270, 1289, 1290,
     1290, 1260, 1260, 1260, 1260, 1291, 1291, 1272, 1292, 1293,
     1293, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1274, 1294, 1295, 1295, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1260, 1260, 1285,
     1285, 1291,  411, 1296, 1297,  411, 1298, 1266, 1266, 1266,

     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1287, 1287,  497, 1299,  497, 1300,
      497, 1301, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,

     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1289, 1289,  541, 1302,  541,
     1303,  541, 1304, 1260, 1260, 1305, 1292, 1292,  551, 1306,
      551, 1307,  551, 1308, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1294, 1294,  577, 1309,  577, 1310,
      577, 1311, 1274,  579, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274, 1296, 1296, 1305, 1297, 1312,
      789, 1313, 1291,  411, 1314, 1266, 1266, 1266, 1266, 1266,

     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
     1266, 1266, 1266, 1266, 1266, 1266, 1266, 1266, 1299, 1299,
     1300, 1315,  861,  861, 1316, 1291, 1317, 1318, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,

     1319, 1302, 1302, 1303, 1320,  904,  904, 1321, 1291, 1322,
     1323, 1324, 1324, 1325, 1326, 1325,  916, 1327, 1291, 1328,
     1329, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330,
     1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1331, 1331,
     1332, 1333, 1332,  943, 1334, 1291, 1335, 1336, 1337, 1337,
     1337, 1337, 1337, 1337, 1337, 1338, 1338, 1339, 1340, 1341,
     1342, 1342, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,

     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1315,
     1315, 1339,  861, 1344, 1318, 1318, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1320, 1320, 1339,  904, 1345, 1323, 1323, 1326, 1326,
     1339,  916, 1346, 1329, 1329, 1330, 1330, 1330, 1330, 1330,
     1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1333, 1333,
     1339,  943, 1347, 1336, 1336, 1337, 1337, 1337, 1337, 1337,
     1337, 1341, 1341, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,

     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1344, 1344, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1345, 1345, 1346,
     1346, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330,
     1330, 1330, 1347, 1347, 1337, 1337, 1337, 1337, 1337, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1343, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1330, 1330, 1330, 1330, 1330, 1330, 1330,

     1330, 1337, 1337, 1337, 1337, 1343, 1343, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1330, 1330, 1330, 1330, 1330,
     1330, 1330, 1337, 1337, 1343, 1343, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1330, 1330, 1330, 1330, 1330, 1343,
     1319, 1319, 1319, 1319, 1330, 1343, 1319, 1330, 1319,    0,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,

     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260
    } ;

static yyconst flex_int16_t yy_nxt[8467] =
    {   0,
       24,   25,   26,   24,   27,   25,   25,   28,   29,   30,
       30,   31,   28,   32,   33,   34,   35,   36,   28,   28,
       28,   30,   28,   30,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   28,   46,   28,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       28,   28,   32,   32,   28,   28,   24,   25,   26,   24,
       27,   25,   25,   61,   62,   63,   63,   64,   65,   63,
       66,   65,   61,   61,   67,   68,   61,   63,   61,   63,
       69,   70,   71,   61,   72,   73,   74,   75,   76,   61,
       77,   78,   61,   79,   80,   61,   81,   82,   61,   83,

       84,   85,   86,   87,   61,   61,   61,   61,   63,   63,
       88,   61,   24,   25,   26,   24,   27,   25,   25,   89,
       90,   91,   91,   92,   89,   91,   93,   94,   89,   95,
       96,   89,   89,   91,   89,   91,   97,   98,   89,   89,
       89,   89,   89,   89,   89,   89,   99,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,  100,  100,   89,   89,  102,  103,
      104,  105,  102,  102,  168,  178,  168,  168,  106,  178,
      178,  107,  102,  103,  104,  105,  102,  102,  168,  178,
      168,  168,  106,  178,  178,  107,   24,   25,   26,   24,

       27,   25,   25,  108,  109,  110,  111,  112,  108,  113,
      114,  115,  108,  108,  116,  117,  108,  118,  108,  119,
      120,  121,  122,  108,  123,  124,  108,  125,  126,  108,
      127,  108,  108,  128,  129,  108,  130,  131,  108,  132,
      133,  134,  108,  108,  108,  108,  108,  108,  135,  135,
      108,  108,  136,   25,   26,   24,   27,   25,   25,  137,
      138,  136,  136,  139,  137,  136,  140,  141,  137,  137,
      137,  137,  137,  136,  137,  136,  142,  143,  137,  137,
      144,  137,  145,  137,  137,  137,  146,  147,  137,  137,
      148,  137,  149,  150,  137,  151,  152,  137,  153,  154,

      137,  137,  137,  137,  136,  136,  137,  137,  155,  156,
      157,  158,  155,  155, 1071,  160,  161,  180,  161,  160,
      160, 1051,  162,  160,  161,  179,  161,  160,  160,  262,
      162, 1044,  316,  181,  182,  137,  163,  137, 1012,  184,
      593,  137,  137,  268,  163,  137,  322,  137,  137,  180,
      137,  137,  185,  137,  137,  165,  166,  958,  166,  165,
      165,  166,  165,  166,  165,  181,  182,  165,  169,  180,
      171,  169,  172,  169,  337,  186,  169,  173,  174,  180,
      369,  180,  767,  180,  593,  181,  182,  180,  343,  793,
      175,  187,  187,  180,  375,  181,  182,  181,  182,  181,

      182,  181,  181,  181,  188,  181,  407,  407,  767,  181,
      182,  179,  189,  181,  190,  181, 1260,  183,  739,  180,
      176,  177,  191,  169,  169,  184,  171,  169,  172,  169,
      192,  180,  169,  173,  174,  181,  182, 1260,  267, 1260,
      321,  739,  180,  326,  181,  181,  175,  181,  182,  407,
      407,  193,  196,  180,  194,  180,  326,  195,  181,  182,
      197,  198,  728,  199,  201,  180,  200,  180,  677,  181,
      182,  181,  182,  866,  202,  213,  176,  177,  728,  169,
      203,  181,  182,  181,  182,  204,  179,  205,  206,  180,
      214,  216,  180,  262,  207,  180,  208,  209,  728,  210,

      184,  677,  211,  909,  212,  181,  182,  268,  181,  182,
      217,  181,  182,  220,  221,  180,  262,  222,  677,  180,
      215,  223,  593,  180,  218, 1260,  342,  224,  219,  180,
      268,  181,  182,  225,  396,  181,  182,  226,  229,  181,
      182,  234,  230,  180,  396,  181,  182,  227,  180,  231,
      232,  739,  233,  228,  736,  235,  919,  180,  236,  181,
      182,  237,  316,  238,  181,  182,  240,  239,  251,  252,
      241,  316,  736,  181,  182,  180,  322,  242,  253,  401,
      337,  402,  180, 1260,  374,  322,  243,  180,  254,  263,
      331,  181,  182,  255,  343,  403,  264,  256,  181,  182,

      337,  257,  331,  181,  182,  265,  266,  258,  259,  244,
      180,  735,  245,  263,  343,  180,  269,  246,  767,  247,
      264,  263,  248,  946,  249,  250,  181,  182,  264,  265,
      266,  181,  182,  734,  260,  263,  589,  265,  266,  263,
      261,  270,  264,  588,  369,  369,  264,  271,  547,  272,
      263,  265,  266,  263,  546,  265,  266,  264,  375,  375,
      264,  545,  273,  408,  265,  265,  265,  266,  265,  265,
      274,  494,  544,  263,  336,  263,  265,  591,  265,  263,
      264,  263,  264,  180,  335,  676,  264,  263,  264,  265,
      266,  265,  266, 1260,  264,  265,  266,  265,  266,  181,

      188,  283,  538,  265,  266,  289, 1260,  265,  265,  275,
      263,  287,  284,  263,  288,  285,  727,  264,  263,  548,
      264, 1260,  286, 1260,  574,  264,  265,  266, 1260,  265,
      266, 1260,  276,  738,  265,  266,  263,  295,  766,  277,
      278, 1260,  279,  264,  280,  281,  408,  282,  263,  313,
      263, 1260,  265,  266,  296,  264,  263,  264,  297, 1260,
      591, 1260,  590,  264,  265,  266,  265,  266,  314,  290,
      263,  291,  265,  266,  263,  298, 1260,  264,  299,  292,
      180,  264,  180,  410,  293,  294,  265,  266,  263,  301,
      265,  266,  300,  494,  263,  264,  181,  182,  181,  182,

     1260,  264,  180,  302,  265,  266,  303,  676,  263,  304,
      265,  266, 1260,  675,  305,  264, 1260,  306,  181,  182,
     1260,  263, 1260,  726,  265,  266,  307,  308,  264,  317,
      311,  309,  310,  315,  412,  317,  318,  265,  266,  538,
      312,  317,  318,  317,  323,  319,  320, 1260,  318,  324,
      318,  319,  320,  727, 1260,  180, 1260,  319,  320,  319,
      320,  325,  326,  325,  325,  325,  325, 1260,  317, 1260,
      317,  181,  182,  317, 1260,  318, 1260,  318,  327,  327,
      318,  317,  548,  180,  319,  320,  319,  320,  318,  319,
      328,  319,  319, 1260,  413,  319,  738,  319,  320,  181,

      182,  180, 1260,  319,  417,  319,  330,  331,  332,  332,
      330,  330,  329, 1260,  737,  180,  333,  181,  182,  334,
      332,  331,  332,  332,  332,  332, 1260,  419,  574, 1260,
      333,  181,  182,  334,  319,  319,  332,  331,  332,  332,
      332,  332,  766,  338, 1260,  338,  333,  338,  344,  334,
      339,  338,  339,  345,  339, 1260,  765,  180,  339,  340,
      341,  340,  341,  340,  341,  338, 1260,  340,  341,  338,
     1260,  338,  339,  181,  182, 1260,  339, 1260,  339, 1260,
     1260,  340,  341,  346, 1260,  340,  347,  340,  341,  340,
      340,  338,  369,  340,  416,  338, 1260,  338,  339,  369,

      369,  340,  339,  340,  339,  369,  180,  340,  341,  338,
     1260,  340,  341,  340,  341, 1260,  339, 1260, 1260, 1260,
     1260,  351,  181,  182, 1260,  340,  341,  348,  418,  349,
      338, 1260,  340,  340,  350,  338, 1260,  339,  338, 1260,
     1260,  352,  339,  338,  353,  339,  340,  341,  354, 1260,
      339,  340,  341,  369,  340,  341,  355,  338,  356,  340,
      341,  358,  369, 1260,  339,  359,  369,  950,  338,  369,
      368, 1260,  357,  340,  341,  339, 1260, 1260, 1260,  360,
     1260,  338, 1260,  338,  340,  341,  180,  362,  339,  338,
      339,  180,  411,  361,  370, 1260,  339,  340,  341,  340,

      341,  371,  181,  182, 1260,  340,  341,  181,  182,  365,
      372,  373,  370,  363,  370,  376,  364,  370, 1260,  371,
      377,  371,  366, 1260,  371,  370,  367,  431,  372,  373,
      372,  373,  371,  372,  373,  372,  372,  369,  180,  372,
     1260,  372,  378, 1260,  369,  369,  384,  372, 1260,  372,
      369,  370, 1260,  370,  181,  182,  385,  370,  371,  421,
      371, 1260, 1260, 1260,  371, 1260, 1260,  372,  373,  372,
      373, 1260,  387,  372,  373, 1260,  382, 1260,  372,  372,
      370, 1260,  386,  370, 1260, 1260, 1260,  371,  370, 1260,
      371,  370, 1260,  388, 1260,  371,  372,  373,  371,  372,

      373, 1260,  379, 1260,  372,  373, 1260,  372,  373,  380,
      381,  370, 1260,  180,  382,  383,  389,  370,  371,  370,
      382,  187,  187,  390,  371,  180,  371,  372,  373,  181,
      182, 1260, 1260,  372,  373,  372,  373,  394, 1260, 1260,
     1260,  181,  182,  391, 1260, 1260, 1260,  420, 1260,  392,
     1260, 1260, 1260,  393,  395,  396,  397,  397,  395,  395,
     1260,  409,  181,  181,  398, 1260,  181,  399,  397,  396,
      397,  397,  397,  397,  181, 1260,  181, 1260,  398, 1260,
      180,  399,  397,  396,  397,  397,  397,  397, 1260,  181,
      181,  180,  398,  181, 1260,  399,  181,  182, 1260,  180,

     1260,  181, 1260,  181, 1260,  181,  181,  181,  182,  422,
      423,  424,  180, 1260, 1260,  181,  182,  414,  425,  180,
      415,  426,  180, 1260,  180, 1260, 1260,  180,  181,  182,
     1260,  427,  181,  181,  180,  181,  182,  180,  181,  182,
      181,  182,  180,  181,  182,  430,  432,  433,  428,  429,
      181,  182,  435,  181,  182, 1260,  180, 1260,  181,  182,
     1260, 1260, 1260,  180,  434,  180, 1260,  180, 1260,  436,
      180, 1260,  181,  182, 1260,  180, 1260,  437,  438,  181,
      182,  181,  182,  181,  182,  439,  181,  182,  251, 1260,
      440,  181,  182,  180, 1260, 1260, 1260,  180, 1260, 1260,

      180, 1260,  180, 1260,  180, 1260,  441,  180, 1260,  181,
      182,  180,  442,  181,  182,  443,  181,  182,  181,  182,
      181,  182, 1260,  181,  182,  180, 1260,  181,  182,  444,
     1260,  180, 1260,  180, 1260, 1260, 1260,  447,  180,  445,
      446,  181,  182,  180, 1260,  180,  449,  181,  182,  181,
      182, 1260,  448,  180,  181,  182, 1260, 1260,  180,  181,
      182,  181,  182,  180, 1260,  180,  450,  180,  453,  181,
      182,  180,  251,  451,  181,  182,  454,  180,  452,  181,
      182,  181,  182,  181,  182, 1260, 1260,  181,  182,  180,
      455,  180, 1260,  181,  182, 1260, 1260,  460,  180, 1260,

      180,  456,  457,  461,  458,  181,  182,  181,  182, 1260,
      459,  180,  463,  180,  181,  182,  181,  182, 1260,  180,
     1260, 1260, 1260,  180,  464,  462,  180,  181,  182,  181,
      182, 1260,  466, 1260, 1260,  181,  182,  465,  180,  181,
      182,  472,  181,  182, 1260,  180, 1260,  467,  471,  470,
      468,  469,  473, 1260,  181,  182,  180, 1260,  475,  180,
      474,  181,  182, 1260, 1260, 1260,  180, 1260, 1260, 1260,
      476,  180,  181,  182,  180,  181,  182,  479,  478, 1260,
      477,  480,  181,  182,  180,  481, 1260,  181,  182,  180,
      181,  182,  180, 1260,  180, 1260,  482,  180, 1260, 1260,

      181,  182,  484, 1260,  483,  181,  182,  180,  181,  182,
      181,  182, 1260,  181,  182,  485,  180, 1260,  180,  488,
      180, 1260, 1260,  181,  182,  180,  492,  486, 1260,  487,
     1260, 1260,  181,  182,  181,  182,  181,  182,  489,  263,
     1260,  181,  182,  493,  491,  263,  264,  263,  490, 1260,
     1260, 1260,  264, 1260,  264,  265,  266, 1260, 1260, 1260,
     1260,  265,  266,  265,  274,  495,  265,  265,  263, 1260,
      265,  496,  263, 1260,  263,  264,  263, 1260,  265,  264,
      265,  264,  497,  264,  265,  266, 1260,  263,  265,  266,
      265,  266,  265,  266,  264, 1260, 1260, 1260, 1260, 1260,

      263,  265,  265,  265,  266,  265,  180,  264, 1260,  265,
      265, 1260,  263,  265,  263,  265,  265,  266,  263,  264,
     1260,  264,  181,  182, 1260,  264,  263, 1260,  265,  266,
      265,  266,  499,  264,  265,  266,  498,  500, 1260, 1260,
     1260,  598,  265,  266,  265,  265,  280,  263, 1260, 1260,
     1260,  263, 1260,  263,  264,  263,  501,  502,  264,  180,
      264, 1260,  264,  265,  266, 1260,  263,  265,  266,  265,
      266,  265,  266,  264,  263,  181,  182,  263, 1260, 1260,
      503,  264,  265,  266,  264,  504, 1260,  506,  263, 1260,
      265,  266,  505,  265,  266,  264,  263, 1260, 1260,  263,

     1260,  263, 1260,  264,  265,  266,  264, 1260,  264,  180,
     1260, 1260,  265,  266,  507,  265,  266,  265,  266, 1260,
     1260, 1260,  263,  508,  263,  181,  182, 1260,  509,  264,
      511,  264,  180, 1260,  512,  599,  510,  263,  265,  266,
      265,  266,  514,  263,  264,  263,  513, 1260,  181,  182,
      264,  263,  264,  265,  266, 1260,  263, 1260,  264,  265,
      266,  265,  266,  264,  263,  515, 1260,  265,  266, 1260,
      517,  264,  265,  266,  262,  263,  262,  516,  263,  519,
      265,  266,  264,  520,  262,  264, 1260, 1260,  518,  521,
      522,  265,  266,  263,  265,  266,  263, 1260,  180,  523,

      264,  263,  525,  264,  263,  524, 1260, 1260,  264,  265,
      266,  264,  265,  266,  181,  182,  600,  265,  266,  263,
      265,  266,  527,  528,  263, 1260,  264,  263,  530, 1260,
      263,  264,  526,  529,  264,  265,  266,  264,  263, 1260,
      265,  266, 1260,  265,  266,  264,  265,  266, 1260,  532,
     1260,  263, 1260,  263,  265,  266,  263,  534,  264,  531,
      264, 1260, 1260,  264,  263,  533, 1260,  265,  266,  265,
      266,  264,  265,  266, 1260, 1260,  263, 1260,  317, 1260,
      265,  266,  536,  264,  317,  318,  535, 1260, 1260,  317,
     1260,  318,  265,  266,  319,  320,  318, 1260, 1260,  537,

      319,  320,  539,  319,  319,  319,  328,  319, 1260,  317,
      319,  319,  540,  317,  319,  319,  318,  319, 1260,  541,
      318,  317,  319, 1260,  319,  319,  320, 1260,  318,  319,
      320,  325,  326,  325,  325,  325,  325,  319,  320,  180,
     1260,  542,  317, 1260,  543, 1260,  319,  319, 1260,  318,
      327,  327, 1260,  319,  319,  181,  182,  603,  319,  320,
      330,  331,  332,  332,  330,  330, 1260,  549,  340,  340,
      333, 1260,  340,  334,  332,  331,  332,  332,  332,  332,
      340,  338,  340,  338,  333,  338, 1260,  334,  339, 1260,
      339, 1260,  339, 1260, 1260, 1260, 1260,  340,  341,  340,

      341,  340,  347,  338, 1260, 1260,  550,  338, 1260,  338,
      339,  340,  340,  551,  339, 1260,  339,  340,  340,  340,
      341,  340, 1260,  340,  341,  340,  341,  338, 1260,  340,
      338,  340,  338, 1260,  339,  338, 1260,  339,  338,  339,
      180, 1260,  339,  340,  341,  339,  340,  341,  340,  341,
     1260,  340,  341, 1260,  340,  341,  181,  182, 1260, 1260,
      340,  340,  555,  552,  338,  553,  554,  338, 1260,  556,
      338,  339,  338,  557,  339,  601, 1260,  339, 1260,  339,
      340,  341,  560,  340,  341,  338,  340,  341,  340,  341,
     1260, 1260,  339,  338,  561, 1260,  558, 1260,  338, 1260,

      339,  340,  341,  180,  559,  339,  338,  562, 1260,  340,
      341,  338, 1260,  339,  340,  341, 1260,  338,  339,  181,
      182,  564,  340,  341,  339, 1260, 1260,  340,  341, 1260,
      563,  338, 1260,  340,  341,  560,  565,  180,  339,  338,
     1260, 1260,  566,  567,  568,  602,  339,  340,  341, 1260,
      338, 1260, 1260,  181,  182,  340,  341,  339, 1260, 1260,
      569,  570,  338, 1260,  338, 1260,  340,  341,  612,  339,
      338,  339, 1260, 1260,  571,  370, 1260,  339,  340,  341,
      340,  341,  371, 1260,  572,  180,  340,  341,  370, 1260,
      370,  372,  373, 1260, 1260,  371, 1260,  371, 1260,  573,

      180,  181,  182,  605,  372,  373,  372,  378,  575,  372,
      372,  370, 1260,  372,  576, 1260,  181,  182,  371,  370,
     1260,  372, 1260,  372, 1260,  577,  371,  372,  373,  372,
      372,  370,  606,  372, 1260,  372,  373, 1260,  371,  370,
     1260,  372, 1260,  372,  370, 1260,  371,  372,  373,  578,
      370,  371,  372,  372, 1260,  372,  373,  371,  382, 1260,
      372,  373, 1260, 1260,  370, 1260,  372,  373, 1260, 1260,
      370,  371,  372,  372, 1260,  370, 1260,  371, 1260,  382,
      372,  373,  371,  370, 1260,  579,  372,  373, 1260,  370,
      371,  372,  373, 1260,  370,  581,  371, 1260, 1260,  372,

      373,  371,  370, 1260, 1260,  372,  373,  580, 1260,  371,
      372,  373, 1260,  582, 1260,  382,  370, 1260,  372,  373,
      370, 1260, 1260,  371,  370, 1260, 1260,  371,  370, 1260,
      382,  371,  372,  373,  583,  371,  372,  373, 1260,  585,
      372,  373, 1260,  180,  372,  373, 1260, 1260, 1260, 1260,
      586,  584,  395,  396,  397,  397,  395,  395,  180,  181,
      182,  180,  398,  587, 1260,  399,  397,  396,  397,  397,
      397,  397,  604, 1260,  181,  182,  398,  181,  182,  399,
      592,  180, 1260,  592, 1260, 1260, 1260, 1260,  594,  592,
      592,  607,  180,  592,  608, 1260,  614,  181,  182,  180,

      595,  592,  613,  592,  596,  597,  180, 1260,  181,  182,
      180, 1260,  609,  610,  180,  181,  182, 1260, 1260,  180,
     1260,  615,  181,  182,  180, 1260,  181,  182, 1260,  611,
      181,  182,  592,  592,  592,  181,  182,  592, 1260,  616,
      181,  182,  594,  592,  592,  180, 1260,  592,  618,  180,
     1260, 1260,  180, 1260,  595,  592,  180,  592,  596,  597,
      180,  181,  182,  180,  617,  181,  182,  619,  181,  182,
      251, 1260,  181,  182, 1260,  180,  181,  182,  180,  181,
      182,  180, 1260,  180,  625,  180,  592,  592, 1260,  620,
      621,  181,  182,  180,  181,  182,  622,  181,  182,  181,

      182,  181,  182,  626,  627,  180, 1260,  624,  623,  181,
      182,  180, 1260,  629,  180, 1260,  180, 1260,  628,  180,
     1260,  181,  182,  180, 1260,  180, 1260,  181,  182,  180,
      181,  182,  181,  182,  180,  181,  182,  631, 1260,  181,
      182,  181,  182,  630,  180,  181,  182,  180,  634, 1260,
      181,  182,  180,  636,  632,  635,  180, 1260,  633,  180,
      181,  182,  180,  181,  182,  637,  180, 1260,  181,  182,
      180, 1260,  181,  182,  638,  181,  182, 1260,  181,  182,
      641,  640,  181,  182,  180, 1260,  181,  182,  639,  643,
      180, 1260,  180,  642,  180,  645,  180, 1260,  180, 1260,

      181,  182, 1260,  644, 1260,  180,  181,  182,  181,  182,
      181,  182,  181,  182,  181,  182, 1260, 1260,  647,  180,
      650,  181,  182, 1260, 1260,  180, 1260,  646,  180, 1260,
     1260, 1260,  648,  180,  649,  181,  182,  180, 1260, 1260,
      651,  181,  182,  180,  181,  182, 1260,  652,  180,  181,
      182,  180, 1260,  181,  182,  654,  180, 1260,  180,  181,
      182, 1260,  180,  653,  181,  182, 1260,  181,  182,  251,
      180, 1260,  181,  182,  181,  182,  180,  657,  181,  182,
     1260, 1260, 1260,  655, 1260,  180,  181,  182,  656, 1260,
     1260, 1260,  181,  182, 1260,  659,  658,  180,  661,  180,

     1260,  181,  182,  660,  180, 1260,  662,  663,  180, 1260,
     1260,  664,  180,  181,  182,  181,  182,  665,  180, 1260,
      181,  182,  666, 1260,  181,  182,  180,  668,  181,  182,
     1260,  180, 1260,  180,  181,  182, 1260, 1260, 1260, 1260,
      667,  180,  181,  182,  263, 1260,  180,  181,  182,  181,
      182,  264,  669,  670, 1260,  671,  672,  181,  182,  263,
      265,  266,  181,  182,  673, 1260,  264,  263, 1260, 1260,
      262, 1260,  686, 1260,  264,  265,  266, 1260,  674,  592,
      262, 1260,  592,  265,  266,  687,  262,  678,  592,  592,
      263,  683,  592,  180,  679,  180, 1260,  264,  263,  680,

      592,  263,  592,  681,  682,  264,  265,  266,  264,  181,
      182,  181,  182,  263,  265,  266, 1260,  265,  266,  799,
      264,  180, 1260,  800, 1260, 1260,  684, 1260,  685,  265,
      266,  592,  592,  592, 1260, 1260,  592,  181,  182,  804,
     1260,  678,  592,  592,  263, 1260,  592, 1260,  679,  180,
      689,  264,  263,  680,  592, 1260,  592,  681,  682,  264,
      265,  266,  262, 1260,  690,  181,  182, 1260,  265,  266,
     1260,  516,  262,  691,  695,  263, 1260,  692,  693,  688,
      694,  263,  264,  263,  802,  592,  592,  263,  264, 1260,
      264,  265,  266, 1260,  264, 1260, 1260,  265,  266,  265,

      266, 1260,  263,  265,  266,  696,  263, 1260,  699,  264,
      263,  697,  700,  264,  263, 1260, 1260,  264,  265,  266,
     1260,  264,  265,  266,  698,  263,  265,  266,  263, 1260,
      265,  266,  264, 1260, 1260,  264,  701,  702, 1260,  703,
      263,  265,  266, 1260,  265,  266, 1260,  264,  263,  704,
      705,  263, 1260,  263, 1260,  264,  265,  266,  264,  263,
      264, 1260,  706,  180,  265,  266,  264,  265,  266,  265,
      266,  263, 1260, 1260,  263,  265,  266,  710,  264,  181,
      182,  264, 1260,  708, 1260,  707,  263,  265,  266,  709,
      265,  266,  263,  264, 1260, 1260,  712,  263, 1260,  264,

      796, 1260,  265,  266,  264,  263, 1260,  711,  265,  266,
      263,  713,  264,  265,  266, 1260,  263,  264, 1260, 1260,
     1260,  265,  266,  264, 1260,  715,  265,  266,  263, 1260,
     1260, 1260,  265,  266, 1260,  264,  263, 1260, 1260,  714,
     1260,  717,  263,  264,  265,  266, 1260,  716, 1260,  264,
      263, 1260,  265,  266, 1260,  263,  719,  264,  265,  266,
      720,  263,  264, 1260, 1260,  718,  265,  266,  264, 1260,
      721,  265,  266,  263, 1260, 1260, 1260,  265,  266, 1260,
      264,  317, 1260, 1260,  338,  723,  722,  338,  318,  265,
      266,  339,  724, 1260,  339,  338, 1260,  319,  320,  338,

      340,  341,  339,  340,  341, 1260,  339, 1260, 1260,  725,
      592,  340,  341,  592, 1260,  340,  341,  746,  729,  592,
      592,  338, 1260,  592,  180,  730, 1260,  745,  339,  750,
      731,  592,  338,  592,  732,  733,  338,  340,  341,  339,
      181,  182, 1260,  339,  747, 1260, 1260, 1260,  340,  341,
     1260, 1260,  340,  341, 1260, 1260, 1260,  748, 1260,  338,
      797, 1260,  592,  592,  592,  180,  339,  592, 1260,  749,
     1260,  560,  729,  592,  592,  340,  341,  592, 1260,  730,
     1260,  181,  182,  338,  731,  592, 1260,  592,  732,  733,
      339,  805, 1260, 1260,  338, 1260, 1260,  806,  338,  340,

      341,  339,  751, 1260, 1260,  339,  338, 1260,  752, 1260,
      340,  341, 1260,  339,  340,  341,  592,  592,  592, 1260,
      756,  592,  340,  341, 1260, 1260,  740,  592,  592, 1260,
     1260,  592, 1260,  741, 1260, 1260,  753,  754,  742,  592,
      338,  592,  743,  744,  338, 1260,  338,  339,  338, 1260,
      180,  339,  338,  339, 1260,  339,  340,  341, 1260,  339,
      340,  341,  340,  341,  340,  341,  181,  182,  340,  341,
      592,  592,  592, 1260,  759,  592, 1260,  560,  560,  755,
      740,  592,  592,  338,  757,  592,  798,  741, 1260,  180,
      339,  338,  742,  592, 1260,  592,  743,  744,  339,  340,

      341,  758,  338, 1260,  338,  181,  182,  340,  341,  339,
      338,  339, 1260, 1260, 1260,  808, 1260,  339,  340,  341,
      340,  341,  761,  180,  592,  592,  340,  341,  338,  762,
      763,  370, 1260,  760,  370,  339, 1260,  180,  371,  181,
      182,  371, 1260, 1260,  340,  341,  764,  372,  373,  592,
      372,  373,  592,  181,  182, 1260,  779,  768,  592,  592,
      370,  811,  592,  809,  769, 1260, 1260,  371,  370,  770,
      592,  370,  592,  771,  772,  371,  372,  373,  371, 1260,
     1260, 1260,  370, 1260,  372,  373, 1260,  372,  373,  371,
     1260, 1260, 1260,  370, 1260, 1260,  773,  780,  372,  373,

      371,  592,  592,  592,  180, 1260,  592,  382, 1260,  372,
      373,  768,  592,  592, 1260,  370,  592, 1260,  769,  781,
      181,  182,  371,  770,  592, 1260,  592,  771,  772,  370,
      782,  372,  373,  370, 1260,  783,  371,  180, 1260, 1260,
      371,  801, 1260, 1260, 1260,  372,  373, 1260, 1260,  372,
      373,  784, 1260,  181,  182,  592,  592,  370, 1260,  180,
      785,  180,  592,  183,  371,  592,  180, 1260,  183,  382,
      593, 1260,  803,  372,  373,  181,  182,  181,  182, 1260,
      774,  807,  181,  182,  787,  180, 1260,  775, 1260,  776,
      812, 1260,  180,  777,  778,  180,  775,  788,  810,  180,

      788,  181,  182, 1260, 1260,  790,  788,  788,  181,  182,
      788,  181,  182, 1260,  813,  181,  182,  180,  788,  180,
      788,  791,  792,  180, 1260, 1260, 1260,  180, 1260,  180,
      814, 1260, 1260,  181,  182,  181,  182,  815, 1260,  181,
      182,  818, 1260,  181,  182,  181,  182, 1260,  816,  788,
      788,  592,  180, 1260,  592, 1260,  817, 1260, 1260,  795,
      596,  596,  819,  180,  596,  180, 1260,  821,  181,  182,
      180, 1260,  596,  180,  596,  592,  592,  820, 1260,  181,
      182,  181,  182, 1260,  180, 1260,  181,  182, 1260,  181,
      182,  180, 1260, 1260,  823,  180, 1260,  180, 1260,  822,

      181,  182,  180,  596,  596, 1260,  180,  181,  182,  824,
     1260,  181,  182,  181,  182, 1260, 1260, 1260,  181,  182,
      180,  825,  181,  182,  180, 1260,  826,  180, 1260, 1260,
     1260,  180,  828,  180,  827,  180,  181,  182,  829, 1260,
      181,  182,  180,  181,  182, 1260,  830,  181,  182,  181,
      182,  181,  182,  180, 1260,  832,  180, 1260,  181,  182,
     1260,  180,  831,  180, 1260, 1260, 1260, 1260, 1260,  181,
      182,  180,  181,  182, 1260,  180, 1260,  181,  182,  181,
      182,  180,  834,  835,  836, 1260,  180,  181,  182,  180,
      833,  181,  182,  180, 1260, 1260,  180,  181,  182, 1260,

     1260,  838,  181,  182,  180,  181,  182,  837, 1260,  181,
      182,  840,  181,  182,  180,  841,  839, 1260, 1260,  180,
      181,  182,  180, 1260,  842,  180, 1260,  180, 1260,  180,
      181,  182,  470,  180,  843,  181,  182,  180,  181,  182,
      180,  181,  182,  181,  182,  181,  182, 1260, 1260,  181,
      182,  180, 1260,  181,  182,  180,  181,  182,  844,  180,
     1260,  180,  846,  845, 1260,  847,  180,  181,  182,  849,
     1260,  181,  182,  180,  848,  181,  182,  181,  182,  180,
     1260,  851,  181,  182,  180, 1260,  850, 1260, 1260,  181,
      182,  180, 1260,  180, 1260,  181,  182, 1260, 1260, 1260,

      181,  182,  180,  852, 1260,  853,  855,  181,  182,  181,
      182,  180, 1260,  856, 1260,  854, 1260, 1260,  181,  182,
      857, 1260,  180, 1260, 1260, 1260,  263,  181,  182,  592,
      267,  858,  592,  264, 1260,  267, 1260,  677,  181,  182,
     1260,  263,  265,  266, 1260, 1260,  869,  263,  264, 1260,
     1260,  860,  788,  180,  264,  788, 1260,  265,  266, 1260,
      862,  788,  788,  265,  266,  788, 1260,  863, 1260,  181,
      182,  263,  966,  788,  263,  788,  864,  865,  264,  871,
     1260,  264,  263,  870, 1260,  263, 1260,  265,  266,  264,
      265,  266,  264, 1260, 1260, 1260,  263,  872,  265,  266,

     1260,  265,  266,  264,  788,  788,  592, 1260, 1260,  592,
     1260,  873,  265,  266,  868,  681,  681,  874,  263,  681,
     1260,  263, 1260, 1260,  180,  264,  516,  681,  264,  681,
      592,  592, 1260,  875,  265,  266,  263,  265,  266,  263,
      181,  182, 1260,  264, 1260,  967,  264,  263,  516, 1260,
      263,  516,  265,  266,  264,  265,  266,  264,  681,  681,
     1260,  516, 1260,  265,  266,  263,  265,  266,  877,  263,
     1260,  180,  264,  263, 1260, 1260,  264,  263,  876, 1260,
      264,  265,  266, 1260,  264,  265,  266,  181,  182,  265,
      266,  878, 1260,  265,  266,  879,  263,  968,  263, 1260,

      263, 1260,  180,  264,  263,  264, 1260,  264, 1260,  880,
     1260,  264,  265,  266,  265,  266,  265,  266,  181,  182,
      265,  266,  884,  263,  965,  263, 1260,  263, 1260,  881,
      264, 1260,  264,  180,  264,  882, 1260, 1260,  883,  265,
      266,  265,  266,  265,  266, 1260,  263, 1260,  263,  181,
      182,  263,  885,  264,  263,  264, 1260, 1260,  264, 1260,
     1260,  264,  265,  266,  265,  266,  886,  265,  266,  887,
      265,  266,  263, 1260,  263,  888, 1260,  263, 1260,  264,
      263,  264, 1260,  180,  264, 1260, 1260,  264,  265,  266,
      265,  266,  889,  265,  266, 1260,  265,  266,  263,  181,

      182,  263,  892, 1260, 1260,  264,  890,  891,  264,  263,
     1260, 1260,  263, 1260,  265,  266,  264,  265,  266,  264,
      893, 1260, 1260,  263, 1260,  265,  266,  263,  265,  266,
      264,  180, 1260, 1260,  264,  263, 1260, 1260,  894,  265,
      266,  898,  264,  265,  266,  895, 1260,  181,  182,  896,
     1260,  265,  266,  263, 1260,  263, 1260, 1260,  263,  900,
      264, 1260,  264, 1260,  897,  264, 1260,  899,  973,  265,
      266,  265,  266, 1260,  265,  266, 1260,  592,  321,  901,
      592, 1260, 1260,  321, 1260,  728, 1260, 1260,  180,  592,
      342, 1260,  592, 1260, 1260,  342, 1260,  739, 1260,  903,

      788, 1260, 1260,  788,  181,  182, 1260, 1260,  905,  788,
      788,  913,  338,  788, 1260,  906, 1260,  970,  180,  339,
      338,  788, 1260,  788,  907,  908,  180,  339,  340,  341,
     1260,  338,  922,  338,  181,  182,  340,  341,  339,  338,
      339, 1260,  181,  182,  338, 1260,  339,  340,  341,  340,
      341,  339,  788,  788,  592,  340,  341,  592,  923,  924,
      340,  341,  911,  732,  732,  338,  927,  732,  925,  338,
     1260,  560,  339,  180, 1260,  732,  339,  732,  592,  592,
      338,  340,  341,  926, 1260,  340,  341,  339,  338,  181,
      182,  928, 1260,  338, 1260,  339,  340,  341,  180,  977,

      339, 1260, 1260, 1260,  340,  341,  732,  732,  788,  340,
      341,  788, 1260,  929,  181,  182,  915,  788,  788,  338,
      963,  788, 1260,  916,  180,  930,  339, 1260, 1260,  788,
      964,  788,  917,  918,  560,  340,  341,  931,  338, 1260,
      181,  182,  338, 1260,  975,  339, 1260, 1260, 1260,  339,
     1260,  180, 1260, 1260,  340,  341,  932,  338,  340,  341,
      788,  788,  592,  933,  339,  592, 1260,  181,  182, 1260,
      921,  743,  743,  340,  341,  743, 1260,  934,  180, 1260,
     1260,  338,  969,  743,  338,  743,  592,  592,  339, 1260,
     1260,  339,  338, 1260,  181,  182,  338,  340,  341,  339,

      340,  341, 1260,  339,  982, 1260,  936, 1260,  340,  341,
      338,  935,  340,  341,  743,  743, 1260,  339,  370, 1260,
     1260, 1260,  937, 1260,  180,  371,  340,  341,  180,  560,
      592,  374,  370,  592,  372,  373,  374, 1260,  767,  371,
      181,  182, 1260,  370,  181,  182,  972,  938,  372,  373,
      371, 1260,  940,  788,  949,  971,  788, 1260, 1260,  372,
      373,  942,  788,  788,  370, 1260,  788, 1260,  943, 1260,
     1260,  371,  370,  775,  788,  370,  788,  944,  945,  371,
      372,  373,  371,  370, 1260, 1260,  370, 1260,  372,  373,
      371,  372,  373,  371,  775,  180, 1260,  775, 1260,  372,

      373, 1260,  372,  373, 1260,  788,  788,  592,  953, 1260,
      592,  181,  182,  952,  951,  948,  771,  771,  370, 1260,
      771, 1260,  370, 1260, 1260,  371,  370, 1260,  771,  371,
      771,  592,  592,  371,  372,  373,  180, 1260,  372,  373,
      370, 1260,  372,  373, 1260, 1260, 1260,  371, 1260, 1260,
     1260,  954,  181,  182,  382, 1260,  372,  373,  955,  771,
      771, 1260,  592,  183,  382,  592, 1260,  974,  183, 1260,
      593,  592, 1260,  183,  592,  788,  183,  183,  788, 1260,
     1260,  183, 1260,  789,  787,  788,  180, 1260,  788, 1260,
     1260, 1260, 1260,  790,  788,  788, 1260,  957,  788,  180,

      596,  596,  181,  182,  596, 1260,  788,  978,  788,  791,
      792,  180,  596,  180,  596,  181,  182, 1260,  592,  590,
      979,  592, 1260, 1260,  590, 1260,  794,  181,  182,  181,
      182, 1260, 1260,  976,  180,  980, 1260,  788,  788,  788,
      962,  180,  788,  596,  596, 1260, 1260,  960,  791,  791,
      181,  182,  791,  180, 1260, 1260,  180,  181,  182,  180,
      791,  180,  791,  788,  788,  180, 1260,  180, 1260,  181,
      182,  981,  181,  182,  983,  181,  182,  181,  182, 1260,
      180,  181,  182,  181,  182, 1260, 1260,  986,  180, 1260,
     1260,  791,  791,  180, 1260,  984,  181,  182,  180, 1260,

     1260, 1260,  985,  180,  181,  182,  180,  987,  180,  181,
      182,  988, 1260,  180,  181,  182, 1260,  989, 1260,  181,
      182, 1260,  181,  182,  181,  182,  180, 1260,  990,  181,
      182,  180, 1260,  994,  991,  992,  180,  993,  180, 1260,
      180, 1260,  181,  182, 1260, 1260, 1260,  181,  182,  180,
     1260,  180,  181,  182,  181,  182,  181,  182,  996, 1260,
      997,  180,  995,  180, 1260,  181,  182,  181,  182,  998,
     1260,  180, 1260,  180, 1260, 1260, 1000,  181,  182,  181,
      182, 1260, 1260, 1260,  180, 1260,  999,  181,  182,  181,
      182, 1002,  180, 1260,  180, 1260,  180, 1260, 1001, 1003,

      181,  182, 1260, 1260, 1260,  180, 1260,  180,  181,  182,
      181,  182,  181,  182,  180, 1260,  180, 1260, 1004,  180,
     1006,  181,  182,  181,  182,  180, 1260,  180, 1260, 1005,
      181,  182,  181,  182, 1260,  181,  182, 1260,  180, 1260,
      263,  181,  182,  181,  182,  592,  267,  264,  592, 1260,
     1007,  267, 1260,  677,  181,  182,  265,  266,  592, 1260,
      267,  592, 1008, 1009,  267, 1260, 1017,  860,  788, 1260,
     1260,  788, 1260, 1260, 1260, 1260,  862,  788,  788,  788,
      267,  788,  788,  863, 1260,  267, 1260,  861, 1260,  788,
     1260,  788,  864,  865,  681,  681,  592,  675,  681,  592,

      263, 1011,  675, 1260,  867, 1260,  681,  264,  681, 1260,
      180, 1260,  263, 1260, 1260, 1260,  265,  266, 1016,  264,
      788,  788,  788,  180, 1260,  788,  181,  182,  265,  266,
     1014,  864,  864, 1260,  263,  864, 1260,  681,  681,  181,
      182,  264, 1260,  864,  180,  864,  788,  788,  263, 1018,
      265,  266,  263, 1260, 1088,  264,  263, 1260, 1019,  264,
      181,  182, 1260,  264,  265,  266, 1260, 1260,  265,  266,
     1260,  263,  265,  266,  864,  864,  592,  180,  264,  592,
     1085,  516, 1260, 1020,  678,  592,  592,  265,  266,  592,
     1260,  679, 1021,  181,  182,  263, 1260,  592,  263,  592,

      681,  682,  264,  263, 1260,  264,  263, 1260, 1260,  263,
      264,  265,  266,  264,  265,  266,  264, 1260, 1260,  265,
      266, 1260,  265,  266, 1260,  265,  266, 1260,  592,  592,
      263, 1260, 1022, 1024, 1023, 1260,  263,  264, 1025, 1260,
     1260, 1026,  263,  264,  263, 1260,  265,  266,  263,  264,
     1260,  264,  265,  266, 1260,  264, 1027, 1028,  265,  266,
      265,  266, 1260, 1260,  265,  266,  263, 1260,  263, 1260,
     1260,  263, 1260,  264, 1260,  264, 1260, 1260,  264, 1029,
     1260, 1260,  265,  266,  265,  266, 1031,  265,  266,  263,
     1030, 1260, 1260,  263, 1260,  263,  264,  263, 1260, 1260,

      264, 1260,  264, 1260,  264,  265,  266, 1260, 1032,  265,
      266,  265,  266,  265,  266,  263, 1035, 1036, 1260,  263,
     1260, 1033,  264,  263, 1260, 1034,  264,  263, 1260, 1260,
      264,  265,  266, 1260,  264,  265,  266, 1260,  263,  265,
      266, 1037, 1260,  265,  266,  264,  263, 1260,  180, 1038,
      263, 1260,  263,  264,  265,  266, 1039,  264, 1260,  264,
     1260, 1260,  265,  266,  181,  182,  265,  266,  265,  266,
      592,  321, 1260,  592, 1260, 1041,  321, 1260,  728, 1260,
     1087, 1040,  592, 1260,  321,  592,  732,  732,  321, 1260,
      732, 1260,  903,  788, 1260, 1260,  788, 1260,  732, 1260,

      732,  905,  788,  788,  788,  321,  788,  788,  906, 1260,
      321, 1260,  904, 1260,  788, 1260,  788,  907,  908,  592,
      726, 1260,  592, 1260, 1260,  726, 1043,  910, 1260,  732,
      732,  592,  342, 1260,  592,  338, 1260,  342, 1260,  739,
     1260, 1048,  339, 1260, 1260,  788,  788,  788, 1260,  180,
      788,  340,  341,  913, 1260, 1046,  907,  907, 1260, 1058,
      907,  592, 1260,  342,  592,  181,  182,  342,  907, 1260,
      907,  788,  788,  788,  342, 1260,  788, 1260, 1091,  342,
     1260,  914, 1260, 1260,  743,  743,  592,  737,  743,  592,
      338, 1260,  737, 1260,  920, 1050,  743,  339,  743,  907,

      907,  592,  180, 1260,  592, 1260,  340,  341, 1055,  729,
      592,  592, 1260,  338,  592, 1260,  730, 1260,  181,  182,
      339,  560,  592, 1260,  592,  732,  733,  743,  743,  340,
      341,  338, 1260, 1260,  338, 1260, 1260, 1084,  339, 1056,
     1260,  339, 1260,  180, 1260,  338, 1260,  340,  341, 1260,
      340,  341,  339,  592,  592,  788,  180, 1260,  788,  181,
      182,  340,  341,  915,  788,  788, 1059,  338,  788,  180,
      916, 1057,  181,  182,  339, 1260,  788,  421,  788,  917,
      918,  338,  560,  340,  341,  181,  182,  180,  339,  338,
     1260, 1089, 1260, 1260,  338, 1260,  339,  340,  341, 1260,

     1260,  339,  560,  181,  182,  340,  341,  788,  788,  788,
      340,  341,  788, 1060, 1260, 1061, 1260,  915,  788,  788,
      338, 1260,  788, 1260,  916, 1086, 1260,  339, 1260, 1260,
      788, 1062,  788,  917,  918,  338,  340,  341,  338, 1260,
      338, 1260,  339,  338, 1063,  339, 1260,  339, 1260, 1260,
      339,  340,  341, 1064,  340,  341,  340,  341, 1067,  340,
      341,  788,  788,  788, 1066, 1260,  788, 1260, 1260, 1260,
     1260, 1053,  917,  917,  338,  560,  917, 1260,  338, 1260,
     1260,  339, 1260, 1260,  917,  339,  917,  788,  788, 1260,
      340,  341, 1260, 1260,  340,  341,  592,  374, 1260,  592,

     1068, 1260,  374, 1260,  767,  370, 1065,  592, 1260,  374,
      592, 1260,  371,  374, 1260,  917,  917,  592,  940, 1260,
      592,  372,  373, 1080, 1260,  740,  592,  592,  788,  374,
      592,  788,  741, 1260,  374, 1260,  941, 1260,  592, 1260,
      592,  743,  744, 1260,  771,  771,  592,  765,  771,  592,
     1070, 1260,  765, 1260,  947, 1260,  771, 1260,  771, 1260,
      370, 1260, 1260, 1260, 1260, 1260, 1260,  371, 1075,  592,
      592,  788, 1260, 1260,  788, 1260,  372,  373, 1260,  942,
      788,  788, 1076,  370,  788,  180,  943,  771,  771, 1260,
      371, 1260,  788,  180,  788,  944,  945,  370, 1260,  372,

      373,  181,  182, 1260,  371,  370, 1260, 1090,  775,  181,
      182, 1260,  371,  372,  373,  180, 1260, 1260, 1077, 1092,
     1260,  372,  373,  788,  788,  788, 1078, 1260,  788, 1260,
     1260,  181,  182,  942,  788,  788,  370, 1094,  788, 1260,
      943, 1260, 1260,  371, 1260, 1260,  788, 1260,  788,  944,
      945,  370,  372,  373,  788,  183, 1079,  788,  371, 1260,
      183, 1260,  789,  788, 1260,  183,  788,  372,  373,  183,
     1260,  791,  791, 1260, 1260,  791,  957,  788,  788,  788,
     1260, 1260,  788,  791, 1260,  791, 1081, 1073,  944,  944,
      788,  590,  944,  788, 1260, 1260,  590, 1260,  959, 1260,

      944, 1260,  944,  788,  788,  592,  590,  180,  592,  180,
     1260,  590, 1083,  794,  791,  791,  592, 1260,  590,  592,
     1260,  180,  590,  181,  182,  181,  182,  962, 1260, 1095,
     1260,  944,  944,  592,  180, 1260,  592,  181,  182, 1260,
     1260,  768,  592,  592,  180, 1093,  592,  180,  769, 1260,
      181,  182, 1098,  180,  592, 1260,  592,  771,  772, 1260,
      181,  182,  180,  181,  182,  180, 1097, 1260, 1260,  181,
      182, 1096,  180, 1260, 1260, 1100, 1260,  180,  181,  182,
     1260,  181,  182, 1260, 1099,  592,  592,  788,  181,  182,
      788, 1260, 1260,  181,  182,  790,  788,  788,  180, 1260,

      788,  180, 1260, 1260, 1260,  180, 1260,  180,  788,  180,
      788,  791,  792, 1101,  181,  182,  180,  181,  182,  180,
     1102,  181,  182,  181,  182,  181,  182, 1103,  180, 1260,
     1260,  180,  181,  182, 1104,  181,  182,  180, 1105,  788,
      788,  180, 1260,  180,  181,  182, 1107,  181,  182, 1260,
      180, 1260,  180,  181,  182,  180, 1106,  181,  182,  181,
      182, 1260,  180, 1260,  180, 1108,  181,  182,  181,  182,
      180,  181,  182,  180, 1260,  180, 1260, 1109,  181,  182,
      181,  182, 1260, 1260, 1260, 1260,  181,  182,  180,  181,
      182,  181,  182,  180,  864,  864, 1260, 1113,  864, 1110,

     1260, 1111, 1260, 1260,  181,  182,  864, 1260,  864,  181,
      182, 1260, 1112,  788,  267, 1260,  788, 1260, 1260,  267,
     1260,  861, 1260, 1114,  788, 1260,  267,  788,  788,  675,
      267,  788, 1260, 1260,  675, 1011, 1013,  864,  864,  592,
      675, 1260,  592, 1260, 1260,  675, 1260,  867,  263, 1260,
     1116,  592, 1260,  675,  592,  264,  263,  675, 1260, 1260,
      263, 1016,  263,  264,  265,  266, 1117,  264,  263,  264,
     1260, 1260,  265,  266, 1118,  264,  265,  266,  265,  266,
      263, 1260, 1260, 1260,  265,  266,  263,  264,  263, 1260,
     1260, 1260,  263,  264, 1121,  264,  265,  266, 1119,  264,

     1120, 1260,  265,  266,  265,  266,  263, 1260,  265,  266,
      263, 1260,  263,  264,  263, 1260, 1260,  264,  263,  264,
     1122,  264,  265,  266, 1260,  264,  265,  266,  265,  266,
      265,  266,  263, 1260,  265,  266, 1126,  263, 1125,  264,
     1127, 1260, 1260, 1123,  264,  263, 1260, 1124,  265,  266,
      263, 1260,  264,  265,  266, 1260, 1260,  264,  263, 1260,
     1260,  265,  266, 1260, 1260,  264,  265,  266, 1260, 1128,
      263, 1260,  263, 1129,  265,  266,  263,  264, 1260,  264,
     1131, 1260,  180,  264, 1260, 1130,  265,  266,  265,  266,
     1260, 1260,  265,  266, 1260,  263, 1260,  263,  181,  182,

     1134, 1133,  264,  263,  264, 1260, 1260, 1132, 1260, 1260,
      264,  265,  266,  265,  266,  788,  321, 1260,  788,  265,
      266,  321, 1260,  904,  788, 1260,  321,  788,  907,  907,
      321, 1135,  907, 1260, 1136, 1137, 1260, 1043,  788,  726,
      907,  788,  907, 1260,  726, 1260, 1045,  592,  726,  180,
      592, 1260, 1260,  726, 1260,  910,  592, 1260,  726,  592,
     1139, 1260,  726, 1260, 1260,  181,  182,  788,  342, 1048,
      788,  907,  907,  342, 1260,  914,  788, 1260,  342,  788,
      917,  917,  342,  338,  917,  788,  737, 1260,  788, 1050,
      339,  737,  917, 1052,  917,  592,  737, 1260,  592,  340,

      341,  737, 1260,  920, 1260, 1260, 1260, 1141,  592, 1260,
      737,  592,  338, 1260,  737,  338, 1260, 1055,  338,  339,
      338, 1144,  339,  917,  917,  339, 1260,  339,  340,  341,
     1142,  340,  341, 1143,  340,  341,  340,  341,  338, 1260,
     1260, 1260,  338, 1260,  338,  339,  338, 1260, 1260,  339,
     1260,  339, 1260,  339,  340,  341, 1145, 1146,  340,  341,
      340,  341,  340,  341, 1148,  338,  560, 1260, 1260,  338,
     1260,  338,  339,  338, 1260, 1147,  339, 1260,  339, 1260,
      339,  340,  341, 1149, 1260,  340,  341,  340,  341,  340,
      341, 1151, 1260,  788,  374, 1152,  788, 1260, 1260,  374,

     1150,  941,  560,  788, 1260,  374,  788,  944,  944,  374,
     1260,  944, 1260, 1260,  180, 1070, 1260,  788,  765,  944,
      788,  944, 1260,  765, 1260, 1072,  592,  765, 1260,  592,
      181,  182,  765, 1260,  947,  592, 1260,  765,  592, 1154,
      370,  765,  370, 1260, 1260,  370, 1260,  371, 1075,  371,
      944,  944,  371,  370, 1162, 1260,  372,  373,  372,  373,
      371,  372,  373,  180, 1260,  370, 1260,  370, 1155,  372,
      373, 1156,  371, 1260,  371, 1260,  382, 1260, 1260,  181,
      182,  372,  373,  372,  373,  788,  590, 1260,  788, 1160,
     1157,  590,  180,  959,  788, 1260,  590,  788,  180, 1260,

      590, 1158, 1260,  180, 1159,  963,  180, 1083,  181,  182,
      180, 1260, 1260, 1260,  181,  182, 1260, 1260, 1260,  181,
      182,  180,  181,  182,  180, 1260,  181,  182,  180, 1161,
      180, 1260,  180, 1163, 1164, 1260, 1260,  181,  182,  180,
      181,  182, 1165, 1166,  181,  182,  181,  182,  181,  182,
      180, 1260, 1168,  180, 1260,  181,  182,  180, 1260,  180,
     1260, 1169,  180, 1260,  180, 1167,  181,  182,  180,  181,
      182,  180, 1170,  181,  182,  181,  182,  180,  181,  182,
      181,  182,  180, 1260,  181,  182, 1172,  181,  182, 1260,
     1260,  180, 1260,  181,  182,  180, 1260,  180,  181,  182,

     1260, 1260,  180, 1260,  180, 1171, 1173,  181,  182,  180,
     1260,  181,  182,  181,  182, 1260,  263, 1174,  181,  182,
      181,  182, 1260,  264, 1260,  181,  182, 1260,  788,  675,
     1260,  788,  265,  266,  675, 1175, 1013,  788, 1260,  675,
      788, 1176,  263,  675, 1260,  263, 1260,  263, 1260,  264,
     1116, 1260,  264, 1177,  264, 1260, 1260,  180,  265,  266,
     1260,  265,  266,  265,  266,  263, 1260, 1180,  263, 1260,
      263, 1260,  264,  181,  182,  264, 1260,  264, 1260, 1178,
     1179,  265,  266,  263,  265,  266,  265,  266,  263, 1260,
      264,  263, 1182, 1260,  263,  264, 1181, 1260,  264,  265,

      266,  264, 1260, 1260,  265,  266,  263,  265,  266, 1260,
      265,  266, 1185,  264,  263, 1260, 1260, 1260, 1260, 1184,
      263,  264,  265,  266, 1186, 1183,  263,  264,  263, 1260,
      265,  266,  263,  264,  263,  264,  265,  266, 1260,  264,
     1260,  264,  265,  266,  265,  266, 1260,  180,  265,  266,
      265,  266,  263, 1187, 1189,  263, 1260, 1188,  263,  264,
     1260, 1260,  264,  181,  182,  264, 1260, 1260,  265,  266,
     1260,  265,  266, 1260,  265,  266, 1190,  788,  726, 1260,
      788,  788,  737,  726,  788, 1045, 1260,  737, 1191, 1052,
     1193, 1192,  788, 1260,  726,  788, 1260, 1260,  726, 1139,

     1260,  338, 1260, 1141,  788, 1260,  737,  788,  339,  338,
      737, 1260,  338, 1260,  338, 1260,  339,  340,  341,  339,
      338,  339, 1260, 1260,  180,  340,  341,  339,  340,  341,
      340,  341,  338, 1260, 1197, 1260,  340,  341, 1194,  339,
      181,  182, 1198,  338, 1260,  338, 1195, 1196,  340,  341,
      339,  338,  339, 1260,  180, 1208, 1260, 1260,  339,  340,
      341,  340,  341,  560,  560,  338, 1260,  340,  341,  338,
      181,  182,  339, 1260, 1199, 1260,  339,  788, 1260,  765,
      788,  340,  341,  765, 1200,  340,  341,  788,  765, 1260,
      788,  370, 1260,  765, 1260, 1072, 1201,  370,  371,  370,

     1260, 1260, 1260,  370,  371, 1260,  371,  372,  373, 1154,
      371,  560, 1260,  372,  373,  372,  373,  370, 1260,  372,
      373,  180, 1202, 1260,  371, 1204, 1260, 1260, 1203,  180,
     1260,  180, 1260,  372,  373, 1260, 1260,  181,  182, 1205,
      180, 1260,  180, 1206,  180,  181,  182,  181,  182, 1260,
      180, 1207, 1260,  382, 1260, 1260,  181,  182,  181,  182,
      181,  182,  180, 1260,  180, 1211,  181,  182, 1209,  180,
     1260, 1210,  180, 1260,  180, 1260,  180, 1260,  181,  182,
      181,  182, 1260, 1260, 1212,  181,  182,  263,  181,  182,
      181,  182,  181,  182,  264, 1260, 1260, 1260,  263, 1260,

     1213,  263, 1260,  265,  266,  264, 1260, 1260,  264, 1260,
     1260, 1214, 1260, 1216,  265,  266, 1215,  265,  266, 1218,
      263, 1260,  263, 1260, 1217,  263, 1260,  264,  263,  264,
     1260, 1260,  264,  263, 1260,  264,  265,  266,  265,  266,
      264,  265,  266,  512,  265,  266,  901,  263, 1260,  265,
      266,  263,  901,  263,  264,  263, 1220, 1219,  264, 1260,
      264, 1260,  264,  265,  266, 1260,  263,  265,  266,  265,
      266,  265,  266,  264,  263, 1222, 1260,  263, 1221,  263,
     1260,  264,  265,  266,  264,  263,  264, 1260, 1260, 1260,
      265,  266,  264,  265,  266,  265,  266, 1223,  338, 1224,

      338,  265,  266,  338, 1260,  339, 1260,  339, 1260, 1260,
      339,  338, 1260, 1225,  340,  341,  340,  341,  339,  340,
      341, 1228,  338, 1260, 1226,  338, 1227,  340,  341,  339,
      338, 1260,  339, 1260, 1260,  560, 1260,  339,  340,  341,
     1260,  340,  341,  338, 1260,  370,  340,  341, 1229,  370,
      339,  370,  371, 1230, 1260, 1231,  371, 1260,  371,  340,
      341,  372,  373, 1232,  370,  372,  373,  372,  373,  382,
     1260,  371,  180,  382,  180, 1260,  180, 1260,  180, 1260,
      372,  373, 1233,  180, 1260,  180, 1234,  180,  181,  182,
      181,  182,  181,  182,  181,  182,  180, 1260, 1260,  181,

      182,  181,  182,  181,  182,  180, 1260,  180,  963,  263,
     1260, 1260,  181,  182,  822, 1260,  264, 1260, 1235, 1260,
      263,  181,  182,  181,  182,  265,  266,  264,  263, 1260,
     1260, 1236, 1260, 1260,  263,  264,  265,  266, 1260,  263,
     1260,  264, 1260, 1260,  265,  266,  264,  263, 1237, 1260,
      265,  266, 1260,  263,  264,  265,  266, 1260, 1260, 1238,
      264,  263, 1260,  265,  266, 1239, 1240,  263,  264,  265,
      266, 1260,  263, 1242,  264, 1243, 1241,  265,  266,  264,
      338, 1260, 1260,  265,  266,  901, 1260,  339,  265,  266,
     1260,  338, 1260, 1260,  338, 1260,  340,  341,  339,  338,

     1260,  339, 1260, 1244, 1260,  338,  339,  340,  341, 1260,
      340,  341,  339, 1260, 1260,  340,  341,  338, 1260, 1245,
     1260,  340,  341, 1260,  339,  338, 1260, 1260,  370, 1260,
     1246, 1247,  339,  340,  341,  371,  560, 1248, 1260,  370,
     1260,  340,  341, 1249,  372,  373,  371,  560,  180, 1260,
      180, 1260,  382, 1260,  263,  372,  373, 1260, 1260, 1260,
     1260,  264, 1260, 1260,  181,  182,  181,  182, 1260, 1260,
      265,  266,  263, 1260,  263,  382, 1251, 1260, 1260,  264,
      263,  264, 1250, 1260,  991,  263, 1260,  264,  265,  266,
      265,  266,  264, 1260, 1252, 1260,  265,  266, 1260, 1260,

     1253,  265,  266,  263, 1260,  263, 1260, 1260, 1260,  263,
      264,  338,  264,  180, 1260,  688,  264, 1260,  339,  265,
      266,  265,  266, 1254,  338,  265,  266,  340,  341,  181,
      182,  339,  338,  560, 1260,  338, 1260,  338, 1260,  339,
      340,  341,  339,  180,  339, 1260,  560, 1260,  340,  341,
     1260,  340,  341,  340,  341,  263, 1260,  560, 1255,  181,
      182,  263,  264, 1260, 1260, 1260,  263, 1260,  264,  263,
      560,  265,  266,  264, 1256, 1260,  264,  265,  266, 1260,
      338, 1260,  265,  266,  263,  265,  266,  339,  338, 1260,
     1260,  264,  263, 1260, 1260,  339,  340,  341, 1257,  264,

      265,  266, 1260, 1260,  340,  341, 1260, 1260,  265,  266,
     1260, 1260, 1258, 1260, 1260, 1259, 1260, 1260, 1260,  560,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  179,  179, 1260, 1260,  179,
      179,  179,  183, 1260,  183,  183,  183,  183,  183,  183,
      183,  183,  262,  262, 1260, 1260,  262,  262,  262,  267,

     1260,  267,  267,  267,  267,  267,  267,  267,  267,  316,
      316, 1260, 1260,  316,  316,  316,  321, 1260,  321,  321,
      321,  321,  321,  321,  321,  321,  337,  337, 1260, 1260,
      337,  337,  337,  342, 1260,  342,  342,  342,  342,  342,
      342,  342,  342,  369,  369, 1260, 1260,  369,  369,  369,
      374, 1260,  374,  374,  374,  374,  374,  374,  374,  374,
      400, 1260, 1260, 1260,  400, 1260,  400,  400, 1260,  400,
      400,  404, 1260, 1260,  404,  404, 1260,  404,  404,  404,
      404,  404,  405,  405, 1260,  405,  405,  405,  405,  405,
      405,  405,  405,  406, 1260,  406,  406, 1260, 1260,  406,

     1260,  406,  408,  408,  408,  408,  408, 1260,  408,  494,
      494,  494,  494,  494, 1260,  494,  538,  538,  538,  538,
      538, 1260,  538,  548,  548,  548,  548,  548, 1260,  548,
      574,  574,  574,  574,  574, 1260,  574,  590, 1260,  590,
      590,  590,  590,  590,  590,  590,  590,  593, 1260, 1260,
     1260,  593,  593,  593,  593,  593,  593,  593,  675, 1260,
      675,  675,  675,  675,  675,  675,  675,  675,  677, 1260,
     1260, 1260,  677,  677,  677,  677,  677,  677,  677,  726,
     1260,  726,  726,  726,  726,  726,  726,  726,  726,  728,
     1260, 1260, 1260,  728,  728,  728,  728,  728,  728,  728,

      592, 1260, 1260, 1260,  592,  592,  592,  592,  592,  592,
      592,  737, 1260,  737,  737,  737,  737,  737,  737,  737,
      737,  739, 1260, 1260, 1260,  739,  739,  739,  739,  739,
      739,  739,  765, 1260,  765,  765,  765,  765,  765,  765,
      765,  765,  767, 1260, 1260, 1260,  767,  767,  767,  767,
      767,  767,  767,  786,  786, 1260,  786,  786,  786,  786,
      786,  786,  786,  786,  789, 1260, 1260, 1260,  789,  789,
      789,  789,  789,  789,  789,  794, 1260, 1260, 1260,  794,
      794,  794,  794,  794,  794,  794,  859,  859, 1260,  859,
      859,  859,  859,  859,  859,  859,  859,  861, 1260, 1260,

     1260,  861,  861,  861,  861,  861,  861,  861,  867, 1260,
     1260, 1260,  867,  867,  867,  867,  867,  867,  867,  902,
      902, 1260,  902,  902,  902,  902,  902,  902,  902,  902,
      904, 1260, 1260, 1260,  904,  904,  904,  904,  904,  904,
      904,  910, 1260, 1260, 1260,  910,  910,  910,  910,  910,
      910,  910,  788, 1260, 1260, 1260,  788,  788,  788,  788,
      788,  788,  788,  912,  912, 1260,  912,  912,  912,  912,
      912,  912,  912,  912,  914, 1260, 1260, 1260,  914,  914,
      914,  914,  914,  914,  914,  920, 1260, 1260, 1260,  920,
      920,  920,  920,  920,  920,  920,  939,  939, 1260,  939,

      939,  939,  939,  939,  939,  939,  939,  941, 1260, 1260,
     1260,  941,  941,  941,  941,  941,  941,  941,  947, 1260,
     1260, 1260,  947,  947,  947,  947,  947,  947,  947,  956,
      956, 1260,  956,  956,  956,  956,  956,  956,  956,  956,
      959, 1260, 1260, 1260,  959,  959,  959,  959,  959,  959,
      959,  961,  961, 1260,  961,  961,  961,  961,  961,  961,
      961,  961, 1010, 1010, 1260, 1010, 1010, 1010, 1010, 1010,
     1010, 1010, 1010, 1013, 1260, 1260, 1260, 1013, 1013, 1013,
     1013, 1013, 1013, 1013,  677, 1260, 1260, 1260,  677,  677,
      677,  677,  677,  677,  677, 1015, 1015, 1260, 1015, 1015,

     1015, 1015, 1015, 1015, 1015, 1015,  262,  262, 1260, 1260,
      262,  262,  262, 1042, 1042, 1260, 1042, 1042, 1042, 1042,
     1042, 1042, 1042, 1042, 1045, 1260, 1260, 1260, 1045, 1045,
     1045, 1045, 1045, 1045, 1045,  728, 1260, 1260, 1260,  728,
      728,  728,  728,  728,  728,  728, 1047, 1047, 1260, 1047,
     1047, 1047, 1047, 1047, 1047, 1047, 1047,  912,  912, 1260,
      912,  912,  912,  912,  912,  912,  912,  912,  914, 1260,
     1260, 1260,  914,  914,  914,  914,  914,  914,  914, 1049,
     1049, 1260, 1049, 1049, 1049, 1049, 1049, 1049, 1049, 1049,
     1052, 1260, 1260, 1260, 1052, 1052, 1052, 1052, 1052, 1052,

     1052,  739, 1260, 1260, 1260,  739,  739,  739,  739,  739,
      739,  739, 1054, 1054, 1260, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054,  337,  337, 1260, 1260,  337,  337,  337,
      939,  939, 1260,  939,  939,  939,  939,  939,  939,  939,
      939,  941, 1260, 1260, 1260,  941,  941,  941,  941,  941,
      941,  941, 1069, 1069, 1260, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1072, 1260, 1260, 1260, 1072, 1072, 1072,
     1072, 1072, 1072, 1072,  767, 1260, 1260, 1260,  767,  767,
      767,  767,  767,  767,  767, 1074, 1074, 1260, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074,  369,  369, 1260, 1260,

      369,  369,  369,  956,  956, 1260,  956,  956,  956,  956,
      956,  956,  956,  956,  788, 1260, 1260, 1260,  788,  788,
      788,  788,  788,  788,  788,  789, 1260, 1260, 1260,  789,
      789,  789,  789,  789,  789,  789, 1082, 1082, 1260, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082,  961,  961, 1260,
      961,  961,  961,  961,  961,  961,  961,  961,  179,  179,
     1260, 1260,  179,  179,  179, 1115, 1115, 1260, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1138, 1138, 1260, 1138,
     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1140, 1140, 1260,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1153, 1153,

     1260, 1153, 1153, 1153, 1153, 1153, 1153, 1153, 1153,   23,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260
    } ;

static yyconst flex_int16_t yy_chk[8467] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    7,    7,
        7,    7,    7,    7,   19,   25,   19,   19,    7,   25,
       25,    7,    8,    8,    8,    8,    8,    8,   20,  178,
       20,   20,    8,  178,  178,    8,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   13,   13,
       13,   13,   13,   13,  944,   15,   15,   28,   15,   15,
       15,  917,   15,   16,   16,   29,   16,   16,   16,   62,
       16,  907,   90,   28,   28,   13,   15,   13,  864,   29,
      794,   13,   13,   62,   16,   13,   90,   13,   13,   31,
       13,   13,   31,   13,   13,   17,   17,  791,   17,   17,
       18,   18,   17,   18,   18,   31,   31,   18,   21,   33,
       21,   21,   21,   21,  109,   33,   21,   21,   21,   34,
      138,   35,  769,   36,  596,   33,   33,   37,  109,  596,
       21,   36,   36,   39,  138,   34,   34,   35,   35,   36,

       36,   38,   38,   37,   37,   38,  175,  175,  767,   39,
       39,  180,   39,   38,   39,   38,  184,  184,  741,   40,
       21,   21,   39,   21,   22,  180,   22,   22,   22,   22,
       39,   41,   22,   22,   22,   40,   40,  268,  268,  322,
      322,  739,   42,  735,   38,   38,   22,   41,   41,  175,
      175,   40,   41,   43,   40,   45,  734,   40,   42,   42,
       41,   41,  730,   41,   42,   47,   41,   44,  681,   43,
       43,   45,   45,  681,   42,   45,   22,   22,  728,   22,
       42,   47,   47,   44,   44,   43,  183,   43,   43,   46,
       45,   47,   48,  263,   43,   49,   44,   44,  732,   44,

      183,  679,   44,  732,   44,   46,   46,  263,   48,   48,
       48,   49,   49,   49,   49,   50,  267,   49,  677,   51,
       46,   49,  593,   52,   48,  343,  343,   49,   48,   53,
      267,   50,   50,   50,  589,   51,   51,   50,   51,   52,
       52,   52,   51,   56,  588,   53,   53,   50,   54,   51,
       51,  743,   51,   50,  547,   52,  743,   57,   52,   56,
       56,   52,  317,   52,   54,   54,   54,   53,   56,   56,
       54,  321,  546,   57,   57,   58,  317,   54,   56,  163,
      338,  163,   59,  375,  375,  321,   54,   55,   57,   61,
      545,   58,   58,   58,  338,  163,   61,   58,   59,   59,

      342,   58,  544,   55,   55,   61,   61,   59,   59,   55,
       60,  543,   55,   64,  342,  179,   64,   55,  771,   55,
       64,   65,   55,  771,   55,   55,   60,   60,   65,   64,
       64,  179,  179,  542,   60,   66,  399,   65,   65,   67,
       60,   66,   66,  398,  370,  374,   67,   66,  336,   67,
       68,   66,   66,   69,  335,   67,   67,   68,  370,  374,
       69,  334,   68,  409,   70,   70,   68,   68,   70,   69,
       69,  495,  333,   71,  107,   73,   70,  409,   70,   75,
       71,   74,   73,  181,  106,  495,   75,   76,   74,   71,
       71,   73,   73,   23,   76,   75,   75,   74,   74,  181,

      181,   73,  539,   76,   76,   76,    0,   70,   70,   71,
       72,   75,   74,   86,   75,   74,  539,   72,   78,  549,
       86,    0,   74,    0,  575,   78,   72,   72,    0,   86,
       86,    0,   72,  549,   78,   78,   79,   78,  575,   72,
       72,    0,   72,   79,   72,   72,  590,   72,   77,   86,
       87,    0,   79,   79,   79,   77,   80,   87,   79,    0,
      590,  591,  591,   80,   77,   77,   87,   87,   87,   77,
       81,   77,   80,   80,   82,   80,    0,   81,   80,   77,
      185,   82,  196,  185,   77,   77,   81,   81,   83,   81,
       82,   82,   80,  675,   84,   83,  185,  185,  196,  196,

        0,   84,  189,   81,   83,   83,   82,  675,   85,   82,
       84,   84,  676,  676,   83,   85,    0,   83,  189,  189,
        0,   88,  727,  727,   85,   85,   84,   84,   88,   89,
       85,   84,   84,   88,  189,   96,   89,   88,   88,  726,
       85,   92,   96,   93,   92,   89,   89,    0,   92,   93,
       93,   96,   96,  726,    0,  190,    0,   92,   92,   93,
       93,   94,   94,   94,   94,   94,   94,    0,   94,    0,
       95,  190,  190,   97,    0,   94,    0,   95,   95,   95,
       97,   99,  737,  193,   94,   94,   95,   95,   99,   97,
       97,   98,   98,    0,  190,   98,  737,   99,   99,  193,

      193,  195,    0,   98,  193,   98,  102,  102,  102,  102,
      102,  102,   99,  738,  738,  202,  102,  195,  195,  102,
      104,  104,  104,  104,  104,  104,    0,  195,  765,    0,
      104,  202,  202,  104,   98,   98,  105,  105,  105,  105,
      105,  105,  765,  108,    0,  112,  105,  114,  112,  105,
      108,  115,  112,  114,  114,  766,  766,  192,  115,  108,
      108,  112,  112,  114,  114,  116,    0,  115,  115,  120,
        0,  117,  116,  192,  192,    0,  120,    0,  117,    0,
        0,  116,  116,  117,    0,  120,  120,  117,  117,  121,
      121,  122,  379,  121,  192,  124,    0,  123,  122,  379,

      379,  121,  124,  121,  123,  379,  194,  122,  122,  125,
        0,  124,  124,  123,  123,    0,  125,    0,    0,    0,
        0,  124,  194,  194,    0,  125,  125,  122,  194,  123,
      126,    0,  121,  121,  123,  127,    0,  126,  134,    0,
        0,  125,  127,  128,  125,  134,  126,  126,  126,    0,
      128,  127,  127,  774,  134,  134,  127,  129,  127,  128,
      128,  128,  774,    0,  129,  128,  774,  774,  130,  774,
      134,    0,  127,  129,  129,  130,    0,    0,    0,  129,
        0,  131,    0,  132,  130,  130,  186,  130,  131,  133,
      132,  205,  186,  129,  137,    0,  133,  131,  131,  132,

      132,  137,  186,  186,    0,  133,  133,  205,  205,  132,
      137,  137,  139,  131,  140,  139,  131,  141,    0,  139,
      140,  140,  133,    0,  141,  142,  133,  205,  139,  139,
      140,  140,  142,  141,  141,  143,  143,  145,  198,  143,
        0,  142,  142,    0,  145,  145,  145,  143,    0,  143,
      145,  146,    0,  147,  198,  198,  145,  148,  146,  198,
      147,    0,    0,    0,  148,    0,    0,  146,  146,  147,
      147,    0,  147,  148,  148,    0,  148,    0,  143,  143,
      144,    0,  146,  149,    0,    0,    0,  144,  150,    0,
      149,  151,    0,  148,    0,  150,  144,  144,  151,  149,

      149,    0,  144,    0,  150,  150,    0,  151,  151,  144,
      144,  152,    0,  187,  144,  144,  149,  153,  152,  154,
      151,  187,  187,  150,  153,  197,  154,  152,  152,  187,
      187,    0,    0,  153,  153,  154,  154,  154,    0,    0,
        0,  197,  197,  152,    0,    0,    0,  197,    0,  152,
        0,    0,    0,  153,  155,  155,  155,  155,  155,  155,
        0,  182,  182,  182,  155,    0,  182,  155,  157,  157,
      157,  157,  157,  157,  182,    0,  182,    0,  157,    0,
      199,  157,  158,  158,  158,  158,  158,  158,    0,  188,
      188,  191,  158,  188,    0,  158,  199,  199,    0,  200,

        0,  188,    0,  188,    0,  182,  182,  191,  191,  199,
      199,  199,  201,    0,    0,  200,  200,  191,  199,  203,
      191,  200,  204,    0,  206,    0,    0,  207,  201,  201,
        0,  201,  188,  188,  208,  203,  203,  209,  204,  204,
      206,  206,  210,  207,  207,  204,  206,  207,  201,  203,
      208,  208,  208,  209,  209,    0,  211,    0,  210,  210,
        0,    0,    0,  212,  207,  213,    0,  214,    0,  209,
      215,    0,  211,  211,    0,  216,    0,  210,  211,  212,
      212,  213,  213,  214,  214,  214,  215,  215,  212,    0,
      215,  216,  216,  217,    0,    0,    0,  218,    0,    0,

      219,    0,  220,    0,  221,    0,  216,  222,    0,  217,
      217,  223,  217,  218,  218,  218,  219,  219,  220,  220,
      221,  221,    0,  222,  222,  224,    0,  223,  223,  218,
        0,  225,    0,  226,    0,    0,    0,  222,  228,  220,
      221,  224,  224,  227,    0,  229,  224,  225,  225,  226,
      226,    0,  223,  230,  228,  228,    0,    0,  231,  227,
      227,  229,  229,  232,    0,  233,  225,  234,  228,  230,
      230,  236,  229,  226,  231,  231,  230,  235,  227,  232,
      232,  233,  233,  234,  234,    0,    0,  236,  236,  237,
      231,  238,    0,  235,  235,    0,    0,  236,  239,    0,

      240,  233,  234,  236,  234,  237,  237,  238,  238,    0,
      235,  241,  238,  242,  239,  239,  240,  240,    0,  243,
        0,    0,    0,  244,  239,  237,  245,  241,  241,  242,
      242,    0,  241,    0,    0,  243,  243,  240,  246,  244,
      244,  244,  245,  245,    0,  247,    0,  241,  243,  242,
      241,  241,  244,    0,  246,  246,  248,    0,  245,  249,
      244,  247,  247,    0,    0,    0,  250,    0,    0,    0,
      246,  251,  248,  248,  252,  249,  249,  249,  248,    0,
      247,  249,  250,  250,  253,  250,    0,  251,  251,  254,
      252,  252,  255,    0,  256,    0,  250,  257,    0,    0,

      253,  253,  253,    0,  252,  254,  254,  259,  255,  255,
      256,  256,    0,  257,  257,  254,  258,    0,  408,  257,
      260,    0,    0,  259,  259,  261,  260,  255,    0,  256,
        0,    0,  258,  258,  408,  408,  260,  260,  258,  262,
        0,  261,  261,  261,  259,  264,  262,  265,  258,    0,
        0,    0,  264,    0,  265,  262,  262,    0,    0,    0,
        0,  264,  264,  265,  265,  266,  266,  266,  269,    0,
      266,  269,  271,    0,  272,  269,  270,    0,  266,  271,
      266,  272,  270,  270,  269,  269,    0,  273,  271,  271,
      272,  272,  270,  270,  273,    0,    0,    0,    0,    0,

      275,  274,  274,  273,  273,  274,  412,  275,    0,  266,
      266,    0,  276,  274,  277,  274,  275,  275,  278,  276,
        0,  277,  412,  412,    0,  278,  279,    0,  276,  276,
      277,  277,  277,  279,  278,  278,  275,  278,    0,    0,
        0,  412,  279,  279,  274,  274,  276,  280,    0,    0,
        0,  281,    0,  282,  280,  283,  279,  279,  281,  415,
      282,    0,  283,  280,  280,    0,  284,  281,  281,  282,
      282,  283,  283,  284,  285,  415,  415,  286,    0,    0,
      281,  285,  284,  284,  286,  282,    0,  284,  287,    0,
      285,  285,  283,  286,  286,  287,  288,    0,    0,  289,

        0,  291,    0,  288,  287,  287,  289,    0,  291,  413,
        0,    0,  288,  288,  286,  289,  289,  291,  291,    0,
        0,    0,  292,  287,  290,  413,  413,    0,  288,  292,
      290,  290,  421,    0,  290,  413,  289,  293,  292,  292,
      290,  290,  292,  294,  293,  295,  290,    0,  421,  421,
      294,  296,  295,  293,  293,    0,  297,    0,  296,  294,
      294,  295,  295,  297,  298,  294,    0,  296,  296,    0,
      296,  298,  297,  297,  299,  300,  299,  295,  301,  297,
      298,  298,  300,  299,  299,  301,    0,    0,  296,  299,
      299,  300,  300,  303,  301,  301,  302,    0,  414,  300,

      303,  304,  302,  302,  305,  301,    0,    0,  304,  303,
      303,  305,  302,  302,  414,  414,  414,  304,  304,  306,
      305,  305,  303,  304,  307,    0,  306,  308,  305,    0,
      309,  307,  302,  304,  308,  306,  306,  309,  310,    0,
      307,  307,    0,  308,  308,  310,  309,  309,    0,  308,
        0,  311,    0,  312,  310,  310,  313,  310,  311,  307,
      312,    0,    0,  313,  314,  309,    0,  311,  311,  312,
      312,  314,  313,  313,    0,    0,  315,    0,  316,    0,
      314,  314,  313,  315,  318,  316,  311,    0,    0,  319,
        0,  318,  315,  315,  316,  316,  319,    0,    0,  314,

      318,  318,  320,  320,  320,  319,  319,  320,    0,  323,
      328,  328,  323,  324,  328,  320,  323,  320,    0,  324,
      324,  329,  328,    0,  328,  323,  323,    0,  329,  324,
      324,  325,  325,  325,  325,  325,  325,  329,  329,  418,
        0,  325,  327,    0,  325,    0,  320,  320,    0,  327,
      327,  327,    0,  328,  328,  418,  418,  418,  327,  327,
      330,  330,  330,  330,  330,  330,    0,  341,  341,  341,
      330,    0,  341,  330,  332,  332,  332,  332,  332,  332,
      341,  337,  341,  339,  332,  340,    0,  332,  337,    0,
      339,    0,  340,    0,    0,    0,    0,  337,  337,  339,

      339,  340,  340,  344,    0,    0,  344,  345,    0,  346,
      344,  341,  341,  345,  345,    0,  346,  347,  347,  344,
      344,  347,    0,  345,  345,  346,  346,  348,    0,  347,
      350,  347,  351,    0,  348,  349,    0,  350,  352,  351,
      416,    0,  349,  348,  348,  352,  350,  350,  351,  351,
        0,  349,  349,    0,  352,  352,  416,  416,    0,    0,
      347,  347,  350,  348,  353,  349,  349,  354,    0,  351,
      356,  353,  355,  352,  354,  416,    0,  356,    0,  355,
      353,  353,  355,  354,  354,  357,  356,  356,  355,  355,
        0,    0,  357,  358,  355,    0,  353,    0,  359,    0,

      358,  357,  357,  417,  354,  359,  360,  357,    0,  358,
      358,  361,    0,  360,  359,  359,    0,  362,  361,  417,
      417,  359,  360,  360,  362,    0,    0,  361,  361,    0,
      358,  363,    0,  362,  362,  361,  360,  425,  363,  364,
        0,    0,  360,  360,  362,  417,  364,  363,  363,    0,
      365,    0,    0,  425,  425,  364,  364,  365,    0,    0,
      363,  364,  366,    0,  367,    0,  365,  365,  425,  366,
      368,  367,    0,    0,  365,  369,    0,  368,  366,  366,
      367,  367,  369,    0,  366,  420,  368,  368,  371,    0,
      372,  369,  369,    0,    0,  371,    0,  372,    0,  367,

      422,  420,  420,  420,  371,  371,  372,  372,  373,  373,
      373,  376,    0,  373,  376,    0,  422,  422,  376,  377,
        0,  373,    0,  373,    0,  377,  377,  376,  376,  378,
      378,  380,  422,  378,    0,  377,  377,    0,  380,  381,
        0,  378,    0,  378,  382,    0,  381,  380,  380,  380,
      383,  382,  373,  373,    0,  381,  381,  383,  381,    0,
      382,  382,    0,    0,  384,    0,  383,  383,    0,    0,
      385,  384,  378,  378,    0,  386,    0,  385,    0,  383,
      384,  384,  386,  387,    0,  384,  385,  385,    0,  388,
      387,  386,  386,    0,  389,  386,  388,    0,    0,  387,

      387,  389,  390,    0,    0,  388,  388,  385,    0,  390,
      389,  389,    0,  388,    0,  387,  391,    0,  390,  390,
      392,    0,    0,  391,  393,    0,    0,  392,  394,    0,
      389,  393,  391,  391,  390,  394,  392,  392,    0,  392,
      393,  393,    0,  419,  394,  394,    0,    0,    0,    0,
      393,  391,  395,  395,  395,  395,  395,  395,  427,  419,
      419,  423,  395,  394,    0,  395,  397,  397,  397,  397,
      397,  397,  419,    0,  427,  427,  397,  423,  423,  397,
      410,  426,    0,  410,    0,    0,    0,    0,  410,  410,
      410,  423,  424,  410,  423,    0,  427,  426,  426,  428,

      410,  410,  426,  410,  410,  410,  429,    0,  424,  424,
      430,    0,  424,  424,  431,  428,  428,    0,    0,  433,
        0,  428,  429,  429,  432,    0,  430,  430,    0,  424,
      431,  431,  410,  410,  411,  433,  433,  411,    0,  429,
      432,  432,  411,  411,  411,  434,    0,  411,  433,  436,
        0,    0,  435,    0,  411,  411,  438,  411,  411,  411,
      437,  434,  434,  441,  432,  436,  436,  434,  435,  435,
      436,    0,  438,  438,    0,  439,  437,  437,  440,  441,
      441,  442,    0,  443,  441,  444,  411,  411,    0,  435,
      437,  439,  439,  445,  440,  440,  438,  442,  442,  443,

      443,  444,  444,  442,  443,  446,    0,  440,  439,  445,
      445,  447,    0,  445,  448,    0,  449,    0,  444,  451,
        0,  446,  446,  450,    0,  452,    0,  447,  447,  454,
      448,  448,  449,  449,  453,  451,  451,  448,    0,  450,
      450,  452,  452,  447,  455,  454,  454,  456,  451,    0,
      453,  453,  457,  453,  449,  452,  458,    0,  450,  459,
      455,  455,  460,  456,  456,  455,  461,    0,  457,  457,
      462,    0,  458,  458,  457,  459,  459,    0,  460,  460,
      459,  458,  461,  461,  463,    0,  462,  462,  457,  461,
      464,    0,  465,  460,  466,  462,  467,    0,  468,    0,

      463,  463,    0,  461,    0,  469,  464,  464,  465,  465,
      466,  466,  467,  467,  468,  468,    0,    0,  465,  470,
      468,  469,  469,    0,    0,  471,    0,  464,  472,    0,
        0,    0,  466,  473,  467,  470,  470,  474,    0,    0,
      469,  471,  471,  475,  472,  472,    0,  471,  476,  473,
      473,  477,    0,  474,  474,  473,  478,    0,  479,  475,
      475,    0,  481,  472,  476,  476,    0,  477,  477,  476,
      480,    0,  478,  478,  479,  479,  482,  478,  481,  481,
        0,    0,    0,  475,    0,  483,  480,  480,  477,    0,
        0,    0,  482,  482,    0,  479,  478,  484,  481,  485,

        0,  483,  483,  480,  486,    0,  482,  483,  487,    0,
        0,  483,  488,  484,  484,  485,  485,  484,  489,    0,
      486,  486,  485,    0,  487,  487,  490,  487,  488,  488,
        0,  491,    0,  492,  489,  489,    0,    0,    0,    0,
      486,  493,  490,  490,  494,    0,  602,  491,  491,  492,
      492,  494,  488,  489,    0,  490,  491,  493,  493,  498,
      494,  494,  602,  602,  492,    0,  498,  500,    0,    0,
      502,    0,  502,    0,  500,  498,  498,    0,  493,  496,
      502,    0,  496,  500,  500,  502,  502,  496,  496,  496,
      499,  498,  496,  601,  496,  603,    0,  499,  501,  496,

      496,  503,  496,  496,  496,  501,  499,  499,  503,  601,
      601,  603,  603,  505,  501,  501,    0,  503,  503,  601,
      505,  607,    0,  603,    0,    0,  499,    0,  501,  505,
      505,  496,  496,  497,    0,    0,  497,  607,  607,  607,
        0,  497,  497,  497,  504,    0,  497,    0,  497,  605,
      505,  504,  507,  497,  497,    0,  497,  497,  497,  507,
      504,  504,  506,    0,  506,  605,  605,    0,  507,  507,
        0,  506,  506,  506,  507,  508,    0,  506,  506,  504,
      506,  509,  508,  510,  605,  497,  497,  511,  509,    0,
      510,  508,  508,    0,  511,    0,    0,  509,  509,  510,

      510,    0,  512,  511,  511,  508,  513,    0,  510,  512,
      514,  509,  511,  513,  515,    0,    0,  514,  512,  512,
        0,  515,  513,  513,  509,  516,  514,  514,  517,    0,
      515,  515,  516,    0,    0,  517,  513,  513,    0,  514,
      518,  516,  516,    0,  517,  517,    0,  518,  519,  515,
      517,  520,    0,  521,    0,  519,  518,  518,  520,  522,
      521,    0,  518,  598,  519,  519,  522,  520,  520,  521,
      521,  523,    0,    0,  524,  522,  522,  522,  523,  598,
      598,  524,    0,  520,    0,  519,  525,  523,  523,  521,
      524,  524,  526,  525,    0,    0,  524,  527,    0,  526,

      598,    0,  525,  525,  527,  528,    0,  523,  526,  526,
      529,  525,  528,  527,  527,    0,  530,  529,    0,    0,
        0,  528,  528,  530,    0,  528,  529,  529,  531,    0,
        0,    0,  530,  530,    0,  531,  532,    0,    0,  527,
        0,  530,  533,  532,  531,  531,    0,  529,    0,  533,
      534,    0,  532,  532,    0,  535,  532,  534,  533,  533,
      533,  536,  535,    0,    0,  531,  534,  534,  536,    0,
      534,  535,  535,  537,    0,    0,    0,  536,  536,    0,
      537,  538,    0,    0,  548,  535,  534,  553,  538,  537,
      537,  548,  536,    0,  553,  552,    0,  538,  538,  557,

      548,  548,  552,  553,  553,    0,  557,    0,    0,  537,
      540,  552,  552,  540,    0,  557,  557,  553,  540,  540,
      540,  554,    0,  540,  599,  540,    0,  552,  554,  557,
      540,  540,  556,  540,  540,  540,  555,  554,  554,  556,
      599,  599,    0,  555,  554,    0,    0,    0,  556,  556,
        0,    0,  555,  555,    0,    0,    0,  554,    0,  558,
      599,    0,  540,  540,  541,  608,  558,  541,    0,  556,
        0,  555,  541,  541,  541,  558,  558,  541,    0,  541,
        0,  608,  608,  559,  541,  541,    0,  541,  541,  541,
      559,  608,    0,    0,  560,    0,    0,  608,  563,  559,

      559,  560,  558,    0,    0,  563,  561,    0,  559,    0,
      560,  560,    0,  561,  563,  563,  541,  541,  550,    0,
      563,  550,  561,  561,    0,    0,  550,  550,  550,    0,
        0,  550,    0,  550,    0,    0,  561,  561,  550,  550,
      564,  550,  550,  550,  562,    0,  565,  564,  566,    0,
      600,  562,  568,  565,    0,  566,  564,  564,    0,  568,
      562,  562,  565,  565,  566,  566,  600,  600,  568,  568,
      550,  550,  551,    0,  568,  551,    0,  564,  565,  562,
      551,  551,  551,  567,  566,  551,  600,  551,    0,  610,
      567,  569,  551,  551,    0,  551,  551,  551,  569,  567,

      567,  567,  570,    0,  571,  610,  610,  569,  569,  570,
      572,  571,    0,    0,    0,  610,    0,  572,  570,  570,
      571,  571,  570,  613,  551,  551,  572,  572,  573,  571,
      572,  574,    0,  569,  580,  573,    0,  611,  574,  613,
      613,  580,    0,    0,  573,  573,  573,  574,  574,  576,
      580,  580,  576,  611,  611,    0,  580,  576,  576,  576,
      578,  613,  576,  611,  576,    0,    0,  578,  581,  576,
      576,  582,  576,  576,  576,  581,  578,  578,  582,    0,
        0,    0,  583,    0,  581,  581,    0,  582,  582,  583,
        0,    0,    0,  584,    0,    0,  578,  581,  583,  583,

      584,  576,  576,  577,  604,    0,  577,  582,    0,  584,
      584,  577,  577,  577,    0,  585,  577,    0,  577,  583,
      604,  604,  585,  577,  577,    0,  577,  577,  577,  586,
      584,  585,  585,  587,    0,  585,  586,  606,    0,    0,
      587,  604,    0,    0,    0,  586,  586,    0,    0,  587,
      587,  585,    0,  606,  606,  577,  577,  579,    0,  609,
      586,  612,  594,  594,  579,  594,  614,    0,  594,  587,
      594,    0,  606,  579,  579,  609,  609,  612,  612,    0,
      579,  609,  614,  614,  594,  615,    0,  579,    0,  579,
      614,    0,  616,  579,  579,  617,  579,  595,  612,  618,

      595,  615,  615,    0,    0,  595,  595,  595,  616,  616,
      595,  617,  617,    0,  615,  618,  618,  619,  595,  620,
      595,  595,  595,  621,    0,    0,    0,  622,    0,  624,
      617,    0,    0,  619,  619,  620,  620,  618,    0,  621,
      621,  621,    0,  622,  622,  624,  624,    0,  619,  595,
      595,  597,  623,    0,  597,    0,  620,    0,    0,  597,
      597,  597,  622,  625,  597,  626,    0,  624,  623,  623,
      627,    0,  597,  628,  597,  597,  597,  623,    0,  625,
      625,  626,  626,    0,  629,    0,  627,  627,    0,  628,
      628,  630,    0,    0,  626,  631,    0,  632,    0,  625,

      629,  629,  633,  597,  597,    0,  634,  630,  630,  629,
        0,  631,  631,  632,  632,    0,    0,    0,  633,  633,
      635,  631,  634,  634,  636,    0,  632,  637,    0,    0,
        0,  638,  634,  639,  633,  640,  635,  635,  635,    0,
      636,  636,  641,  637,  637,    0,  636,  638,  638,  639,
      639,  640,  640,  642,    0,  639,  643,    0,  641,  641,
        0,  644,  638,  645,    0,    0,    0,    0,    0,  642,
      642,  646,  643,  643,    0,  647,    0,  644,  644,  645,
      645,  648,  643,  644,  645,    0,  649,  646,  646,  651,
      642,  647,  647,  650,    0,    0,  652,  648,  648,    0,

        0,  648,  649,  649,  653,  651,  651,  647,    0,  650,
      650,  650,  652,  652,  654,  651,  649,    0,    0,  655,
      653,  653,  656,    0,  653,  657,    0,  658,    0,  659,
      654,  654,  652,  660,  654,  655,  655,  661,  656,  656,
      663,  657,  657,  658,  658,  659,  659,    0,    0,  660,
      660,  662,    0,  661,  661,  664,  663,  663,  656,  665,
        0,  666,  658,  657,    0,  659,  667,  662,  662,  662,
        0,  664,  664,  668,  661,  665,  665,  666,  666,  669,
        0,  665,  667,  667,  670,    0,  664,    0,    0,  668,
      668,  671,    0,  672,    0,  669,  669,    0,    0,    0,

      670,  670,  673,  666,    0,  668,  670,  671,  671,  672,
      672,  674,    0,  671,    0,  669,    0,    0,  673,  673,
      673,    0,  796,    0,    0,    0,  683,  674,  674,  678,
      678,  674,  678,  683,    0,  678,    0,  678,  796,  796,
        0,  685,  683,  683,    0,    0,  683,  684,  685,    0,
        0,  678,  680,  799,  684,  680,    0,  685,  685,    0,
      680,  680,  680,  684,  684,  680,    0,  680,    0,  799,
      799,  686,  799,  680,  687,  680,  680,  680,  686,  685,
        0,  687,  688,  684,    0,  689,    0,  686,  686,  688,
      687,  687,  689,    0,    0,    0,  690,  686,  688,  688,

        0,  689,  689,  690,  680,  680,  682,    0,    0,  682,
        0,  687,  690,  690,  682,  682,  682,  689,  691,  682,
        0,  692,    0,    0,  800,  691,  690,  682,  692,  682,
      682,  682,    0,  690,  691,  691,  693,  692,  692,  694,
      800,  800,    0,  693,    0,  800,  694,  695,  691,    0,
      696,  692,  693,  693,  695,  694,  694,  696,  682,  682,
        0,  693,    0,  695,  695,  697,  696,  696,  696,  698,
        0,  801,  697,  699,    0,    0,  698,  700,  695,    0,
      699,  697,  697,    0,  700,  698,  698,  801,  801,  699,
      699,  698,    0,  700,  700,  699,  701,  801,  702,    0,

      703,    0,  798,  701,  704,  702,    0,  703,    0,  700,
        0,  704,  701,  701,  702,  702,  703,  703,  798,  798,
      704,  704,  704,  705,  798,  706,    0,  707,    0,  701,
      705,    0,  706,  802,  707,  702,    0,    0,  703,  705,
      705,  706,  706,  707,  707,    0,  708,    0,  711,  802,
      802,  709,  705,  708,  710,  711,    0,    0,  709,    0,
        0,  710,  708,  708,  711,  711,  706,  709,  709,  709,
      710,  710,  712,    0,  713,  710,    0,  714,    0,  712,
      715,  713,    0,  803,  714,    0,    0,  715,  712,  712,
      713,  713,  712,  714,  714,    0,  715,  715,  716,  803,

      803,  717,  715,    0,    0,  716,  713,  714,  717,  718,
        0,    0,  721,    0,  716,  716,  718,  717,  717,  721,
      716,    0,    0,  719,    0,  718,  718,  720,  721,  721,
      719,  808,    0,    0,  720,  722,    0,    0,  717,  719,
      719,  721,  722,  720,  720,  718,    0,  808,  808,  719,
        0,  722,  722,  723,    0,  724,    0,    0,  725,  723,
      723,    0,  724,    0,  720,  725,    0,  722,  808,  723,
      723,  724,  724,    0,  725,  725,    0,  729,  729,  724,
      729,    0,    0,  729,    0,  729,    0,    0,  805,  740,
      740,    0,  740,    0,    0,  740,    0,  740,    0,  729,

      731,    0,    0,  731,  805,  805,    0,    0,  731,  731,
      731,  740,  745,  731,    0,  731,    0,  805,  810,  745,
      746,  731,    0,  731,  731,  731,  812,  746,  745,  745,
        0,  748,  745,  747,  810,  810,  746,  746,  748,  749,
      747,    0,  812,  812,  751,    0,  749,  748,  748,  747,
      747,  751,  731,  731,  733,  749,  749,  733,  746,  747,
      751,  751,  733,  733,  733,  750,  751,  733,  748,  752,
        0,  749,  750,  814,    0,  733,  752,  733,  733,  733,
      753,  750,  750,  750,    0,  752,  752,  753,  754,  814,
      814,  752,    0,  756,    0,  754,  753,  753,  797,  814,

      756,    0,    0,    0,  754,  754,  733,  733,  742,  756,
      756,  742,    0,  753,  797,  797,  742,  742,  742,  755,
      797,  742,    0,  742,  811,  754,  755,    0,    0,  742,
      797,  742,  742,  742,  756,  755,  755,  755,  757,    0,
      811,  811,  758,    0,  811,  757,    0,    0,    0,  758,
        0,  804,    0,    0,  757,  757,  757,  759,  758,  758,
      742,  742,  744,  758,  759,  744,    0,  804,  804,    0,
      744,  744,  744,  759,  759,  744,    0,  759,  819,    0,
        0,  760,  804,  744,  761,  744,  744,  744,  760,    0,
        0,  761,  762,    0,  819,  819,  763,  760,  760,  762,

      761,  761,    0,  763,  819,    0,  761,    0,  762,  762,
      764,  760,  763,  763,  744,  744,    0,  764,  773,    0,
        0,    0,  763,    0,  806,  773,  764,  764,  807,  762,
      768,  768,  775,  768,  773,  773,  768,    0,  768,  775,
      806,  806,    0,  776,  807,  807,  807,  764,  775,  775,
      776,    0,  768,  770,  773,  806,  770,    0,    0,  776,
      776,  770,  770,  770,  777,    0,  770,    0,  770,    0,
        0,  777,  778,  776,  770,  780,  770,  770,  770,  778,
      777,  777,  780,  779,    0,    0,  781,    0,  778,  778,
      779,  780,  780,  781,  777,  820,    0,  778,    0,  779,

      779,    0,  781,  781,    0,  770,  770,  772,  781,    0,
      772,  820,  820,  780,  779,  772,  772,  772,  782,    0,
      772,    0,  783,    0,    0,  782,  784,    0,  772,  783,
      772,  772,  772,  784,  782,  782,  809,    0,  783,  783,
      785,    0,  784,  784,    0,    0,    0,  785,    0,    0,
        0,  783,  809,  809,  782,    0,  785,  785,  784,  772,
      772,    0,  786,  786,  785,  786,    0,  809,  786,    0,
      786,  787,  787,  787,  787,  790,  790,  787,  790,    0,
        0,  790,    0,  790,  786,  789,  815,    0,  789,    0,
        0,    0,    0,  789,  789,  789,    0,  790,  789,  816,

      793,  793,  815,  815,  793,    0,  789,  815,  789,  789,
      789,  813,  793,  817,  793,  816,  816,    0,  795,  795,
      816,  795,    0,    0,  795,    0,  795,  813,  813,  817,
      817,    0,    0,  813,  818,  817,    0,  789,  789,  792,
      795,  822,  792,  793,  793,    0,    0,  792,  792,  792,
      818,  818,  792,  821,    0,    0,  824,  822,  822,  823,
      792,  825,  792,  792,  792,  826,    0,  827,    0,  821,
      821,  818,  824,  824,  821,  823,  823,  825,  825,    0,
      828,  826,  826,  827,  827,    0,    0,  826,  829,    0,
        0,  792,  792,  830,    0,  823,  828,  828,  831,    0,

        0,    0,  825,  832,  829,  829,  833,  827,  834,  830,
      830,  828,    0,  835,  831,  831,    0,  829,    0,  832,
      832,    0,  833,  833,  834,  834,  836,    0,  830,  835,
      835,  837,    0,  835,  831,  831,  838,  834,  839,    0,
      840,    0,  836,  836,    0,    0,    0,  837,  837,  841,
        0,  842,  838,  838,  839,  839,  840,  840,  838,    0,
      839,  843,  837,  844,    0,  841,  841,  842,  842,  840,
        0,  845,    0,  846,    0,    0,  842,  843,  843,  844,
      844,    0,    0,    0,  847,    0,  841,  845,  845,  846,
      846,  845,  848,    0,  849,    0,  850,    0,  843,  846,

      847,  847,    0,    0,    0,  851,    0,  852,  848,  848,
      849,  849,  850,  850,  853,    0,  854,    0,  848,  855,
      850,  851,  851,  852,  852,  856,    0,  857,    0,  849,
      853,  853,  854,  854,    0,  855,  855,    0,  858,    0,
      869,  856,  856,  857,  857,  859,  859,  869,  859,    0,
      853,  859,    0,  859,  858,  858,  869,  869,  860,  860,
      860,  860,  857,  858,  860,    0,  869,  859,  861,    0,
        0,  861,    0,    0,    0,    0,  861,  861,  861,  862,
      862,  861,  862,  861,    0,  862,    0,  862,    0,  861,
        0,  861,  861,  861,  866,  866,  868,  868,  866,  868,

      870,  862,  868,    0,  868,    0,  866,  870,  866,    0,
      963,    0,  871,    0,    0,    0,  870,  870,  868,  871,
      861,  861,  865,  968,    0,  865,  963,  963,  871,  871,
      865,  865,  865,    0,  872,  865,    0,  866,  866,  968,
      968,  872,    0,  865,  965,  865,  865,  865,  873,  871,
      872,  872,  874,    0,  968,  873,  875,    0,  872,  874,
      965,  965,    0,  875,  873,  873,    0,    0,  874,  874,
        0,  876,  875,  875,  865,  865,  867,  979,  876,  867,
      965,  875,    0,  873,  867,  867,  867,  876,  876,  867,
        0,  867,  876,  979,  979,  877,    0,  867,  879,  867,

      867,  867,  877,  878,    0,  879,  880,    0,    0,  881,
      878,  877,  877,  880,  879,  879,  881,    0,    0,  878,
      878,    0,  880,  880,    0,  881,  881,    0,  867,  867,
      882,    0,  877,  879,  878,    0,  883,  882,  880,    0,
        0,  881,  884,  883,  885,    0,  882,  882,  886,  884,
        0,  885,  883,  883,    0,  886,  882,  883,  884,  884,
      885,  885,    0,    0,  886,  886,  887,    0,  888,    0,
        0,  889,    0,  887,    0,  888,    0,    0,  889,  884,
        0,    0,  887,  887,  888,  888,  888,  889,  889,  890,
      887,    0,    0,  891,    0,  892,  890,  893,    0,    0,

      891,    0,  892,    0,  893,  890,  890,    0,  889,  891,
      891,  892,  892,  893,  893,  894,  892,  893,    0,  895,
        0,  890,  894,  896,    0,  891,  895,  897,    0,    0,
      896,  894,  894,    0,  897,  895,  895,    0,  898,  896,
      896,  896,    0,  897,  897,  898,  899,    0,  967,  897,
      900,    0,  901,  899,  898,  898,  898,  900,    0,  901,
        0,    0,  899,  899,  967,  967,  900,  900,  901,  901,
      902,  902,    0,  902,    0,  900,  902,    0,  902,    0,
      967,  899,  903,  903,  903,  903,  909,  909,  903,    0,
      909,    0,  902,  904,    0,    0,  904,    0,  909,    0,

      909,  904,  904,  904,  905,  905,  904,  905,  904,    0,
      905,    0,  905,    0,  904,    0,  904,  904,  904,  911,
      911,    0,  911,    0,    0,  911,  905,  911,    0,  909,
      909,  912,  912,    0,  912,  924,    0,  912,    0,  912,
        0,  911,  924,    0,    0,  904,  904,  908,    0,  972,
      908,  924,  924,  912,    0,  908,  908,  908,    0,  924,
      908,  913,  913,  913,  913,  972,  972,  913,  908,    0,
      908,  908,  908,  915,  915,    0,  915,    0,  972,  915,
        0,  915,    0,    0,  919,  919,  921,  921,  919,  921,
      927,    0,  921,    0,  921,  915,  919,  927,  919,  908,

      908,  910,  964,    0,  910,    0,  927,  927,  921,  910,
      910,  910,    0,  922,  910,    0,  910,    0,  964,  964,
      922,  927,  910,    0,  910,  910,  910,  919,  919,  922,
      922,  925,    0,    0,  923,    0,    0,  964,  925,  922,
        0,  923,    0,  981,    0,  926,    0,  925,  925,    0,
      923,  923,  926,  910,  910,  914,  969,    0,  914,  981,
      981,  926,  926,  914,  914,  914,  925,  928,  914,  970,
      914,  923,  969,  969,  928,    0,  914,  969,  914,  914,
      914,  929,  926,  928,  928,  970,  970,  966,  929,  930,
        0,  970,    0,    0,  931,    0,  930,  929,  929,    0,

        0,  931,  928,  966,  966,  930,  930,  914,  914,  916,
      931,  931,  916,  929,    0,  930,    0,  916,  916,  916,
      932,    0,  916,    0,  916,  966,    0,  932,    0,    0,
      916,  931,  916,  916,  916,  933,  932,  932,  934,    0,
      937,    0,  933,  936,  932,  934,    0,  937,    0,    0,
      936,  933,  933,  933,  934,  934,  937,  937,  937,  936,
      936,  916,  916,  918,  936,    0,  918,    0,    0,    0,
        0,  918,  918,  918,  935,  934,  918,    0,  938,    0,
        0,  935,    0,    0,  918,  938,  918,  918,  918,    0,
      935,  935,    0,    0,  938,  938,  939,  939,    0,  939,

      938,    0,  939,    0,  939,  954,  935,  940,  940,  940,
      940,    0,  954,  940,    0,  918,  918,  920,  939,    0,
      920,  954,  954,  954,    0,  920,  920,  920,  942,  942,
      920,  942,  920,    0,  942,    0,  942,    0,  920,    0,
      920,  920,  920,    0,  946,  946,  948,  948,  946,  948,
      942,    0,  948,    0,  948,    0,  946,    0,  946,    0,
      949,    0,    0,    0,    0,    0,    0,  949,  948,  920,
      920,  941,    0,    0,  941,    0,  949,  949,    0,  941,
      941,  941,  949,  950,  941,  971,  941,  946,  946,    0,
      950,    0,  941,  973,  941,  941,  941,  951,    0,  950,

      950,  971,  971,    0,  951,  952,    0,  971,  950,  973,
      973,    0,  952,  951,  951,  975,    0,    0,  951,  973,
        0,  952,  952,  941,  941,  943,  952,    0,  943,    0,
        0,  975,  975,  943,  943,  943,  953,  975,  943,    0,
      943,    0,    0,  953,    0,    0,  943,    0,  943,  943,
      943,  955,  953,  953,  956,  956,  953,  956,  955,    0,
      956,    0,  956,  957,  957,  957,  957,  955,  955,  957,
        0,  958,  958,    0,    0,  958,  956,  943,  943,  945,
        0,    0,  945,  958,    0,  958,  955,  945,  945,  945,
      960,  960,  945,  960,    0,    0,  960,    0,  960,    0,

      945,    0,  945,  945,  945,  961,  961,  974,  961,  976,
        0,  961,  960,  961,  958,  958,  962,  962,  962,  962,
        0,  980,  962,  974,  974,  976,  976,  961,    0,  976,
        0,  945,  945,  947,  977,    0,  947,  980,  980,    0,
        0,  947,  947,  947,  978,  974,  947,  982,  947,    0,
      977,  977,  980,  983,  947,    0,  947,  947,  947,    0,
      978,  978,  984,  982,  982,  985,  978,    0,    0,  983,
      983,  977,  987,    0,    0,  983,    0,  986,  984,  984,
        0,  985,  985,    0,  982,  947,  947,  959,  987,  987,
      959,    0,    0,  986,  986,  959,  959,  959,  988,    0,

      959,  989,    0,    0,    0,  990,    0,  991,  959,  992,
      959,  959,  959,  986,  988,  988,  993,  989,  989,  994,
      988,  990,  990,  991,  991,  992,  992,  989,  995,    0,
        0,  996,  993,  993,  992,  994,  994,  997,  993,  959,
      959,  998,    0,  999,  995,  995,  995,  996,  996,    0,
     1000,    0, 1001,  997,  997, 1002,  994,  998,  998,  999,
      999,    0, 1003,    0, 1004,  999, 1000, 1000, 1001, 1001,
     1005, 1002, 1002, 1006,    0, 1007,    0, 1002, 1003, 1003,
     1004, 1004,    0,    0,    0,    0, 1005, 1005, 1008, 1006,
     1006, 1007, 1007, 1009, 1012, 1012,    0, 1007, 1012, 1003,

        0, 1004,    0,    0, 1008, 1008, 1012,    0, 1012, 1009,
     1009,    0, 1005, 1010, 1010,    0, 1010,    0,    0, 1010,
        0, 1010,    0, 1008, 1011, 1011, 1011, 1011, 1014, 1014,
     1011, 1014,    0,    0, 1014, 1010, 1014, 1012, 1012, 1015,
     1015,    0, 1015,    0,    0, 1015,    0, 1015, 1017,    0,
     1014, 1016, 1016, 1016, 1016, 1017, 1018, 1016,    0,    0,
     1019, 1015, 1020, 1018, 1017, 1017, 1017, 1019, 1021, 1020,
        0,    0, 1018, 1018, 1018, 1021, 1019, 1019, 1020, 1020,
     1022,    0,    0,    0, 1021, 1021, 1023, 1022, 1024,    0,
        0,    0, 1025, 1023, 1021, 1024, 1022, 1022, 1019, 1025,

     1020,    0, 1023, 1023, 1024, 1024, 1026,    0, 1025, 1025,
     1027,    0, 1028, 1026, 1029,    0,    0, 1027, 1030, 1028,
     1025, 1029, 1026, 1026,    0, 1030, 1027, 1027, 1028, 1028,
     1029, 1029, 1031,    0, 1030, 1030, 1029, 1032, 1028, 1031,
     1030,    0,    0, 1026, 1032, 1033,    0, 1027, 1031, 1031,
     1034,    0, 1033, 1032, 1032,    0,    0, 1034, 1035,    0,
        0, 1033, 1033,    0,    0, 1035, 1034, 1034,    0, 1031,
     1036,    0, 1037, 1033, 1035, 1035, 1038, 1036,    0, 1037,
     1035,    0, 1085, 1038,    0, 1034, 1036, 1036, 1037, 1037,
        0,    0, 1038, 1038,    0, 1039,    0, 1040, 1085, 1085,

     1038, 1037, 1039, 1041, 1040,    0,    0, 1036,    0,    0,
     1041, 1039, 1039, 1040, 1040, 1042, 1042,    0, 1042, 1041,
     1041, 1042,    0, 1042, 1043, 1043, 1043, 1043, 1044, 1044,
     1043, 1039, 1044,    0, 1040, 1041,    0, 1042, 1046, 1046,
     1044, 1046, 1044,    0, 1046,    0, 1046, 1047, 1047, 1088,
     1047,    0,    0, 1047,    0, 1047, 1048, 1048, 1048, 1048,
     1046,    0, 1048,    0,    0, 1088, 1088, 1049, 1049, 1047,
     1049, 1044, 1044, 1049,    0, 1049, 1050, 1050, 1050, 1050,
     1051, 1051, 1050, 1058, 1051, 1053, 1053,    0, 1053, 1049,
     1058, 1053, 1051, 1053, 1051, 1054, 1054,    0, 1054, 1058,

     1058, 1054,    0, 1054,    0,    0,    0, 1053, 1055, 1055,
     1055, 1055, 1056,    0, 1055, 1057,    0, 1054, 1059, 1056,
     1060, 1058, 1057, 1051, 1051, 1059,    0, 1060, 1056, 1056,
     1056, 1057, 1057, 1057, 1059, 1059, 1060, 1060, 1061,    0,
        0,    0, 1062,    0, 1063, 1061, 1064,    0,    0, 1062,
        0, 1063,    0, 1064, 1061, 1061, 1059, 1060, 1062, 1062,
     1063, 1063, 1064, 1064, 1062, 1065, 1063,    0,    0, 1066,
        0, 1068, 1065, 1067,    0, 1061, 1066,    0, 1068,    0,
     1067, 1065, 1065, 1064,    0, 1066, 1066, 1068, 1068, 1067,
     1067, 1066,    0, 1069, 1069, 1068, 1069,    0,    0, 1069,

     1065, 1069, 1067, 1070, 1070, 1070, 1070, 1071, 1071, 1070,
        0, 1071,    0,    0, 1087, 1069,    0, 1073, 1073, 1071,
     1073, 1071,    0, 1073,    0, 1073, 1074, 1074,    0, 1074,
     1087, 1087, 1074,    0, 1074, 1075, 1075, 1075, 1075, 1073,
     1076, 1075, 1077,    0,    0, 1078,    0, 1076, 1074, 1077,
     1071, 1071, 1078, 1079, 1087,    0, 1076, 1076, 1077, 1077,
     1079, 1078, 1078, 1084,    0, 1080,    0, 1081, 1077, 1079,
     1079, 1078, 1080,    0, 1081,    0, 1076,    0,    0, 1084,
     1084, 1080, 1080, 1081, 1081, 1082, 1082,    0, 1082, 1084,
     1079, 1082, 1086, 1082, 1083, 1083, 1083, 1083, 1089,    0,

     1083, 1080,    0, 1090, 1081, 1084, 1091, 1082, 1086, 1086,
     1092,    0,    0,    0, 1089, 1089,    0,    0,    0, 1090,
     1090, 1093, 1091, 1091, 1094,    0, 1092, 1092, 1095, 1086,
     1096,    0, 1097, 1089, 1090,    0,    0, 1093, 1093, 1098,
     1094, 1094, 1092, 1093, 1095, 1095, 1096, 1096, 1097, 1097,
     1099,    0, 1096, 1100,    0, 1098, 1098, 1101,    0, 1102,
        0, 1098, 1103,    0, 1104, 1095, 1099, 1099, 1105, 1100,
     1100, 1106, 1099, 1101, 1101, 1102, 1102, 1107, 1103, 1103,
     1104, 1104, 1108,    0, 1105, 1105, 1104, 1106, 1106,    0,
        0, 1109,    0, 1107, 1107, 1110,    0, 1111, 1108, 1108,

        0,    0, 1112,    0, 1113, 1103, 1107, 1109, 1109, 1114,
        0, 1110, 1110, 1111, 1111,    0, 1117, 1110, 1112, 1112,
     1113, 1113,    0, 1117,    0, 1114, 1114,    0, 1115, 1115,
        0, 1115, 1117, 1117, 1115, 1111, 1115, 1116, 1116, 1116,
     1116, 1114, 1118, 1116,    0, 1119,    0, 1120,    0, 1118,
     1115,    0, 1119, 1117, 1120,    0,    0, 1163, 1118, 1118,
        0, 1119, 1119, 1120, 1120, 1121,    0, 1120, 1122,    0,
     1123,    0, 1121, 1163, 1163, 1122,    0, 1123,    0, 1118,
     1119, 1121, 1121, 1124, 1122, 1122, 1123, 1123, 1125,    0,
     1124, 1126, 1123,    0, 1127, 1125, 1121,    0, 1126, 1124,

     1124, 1127,    0,    0, 1125, 1125, 1128, 1126, 1126,    0,
     1127, 1127, 1126, 1128, 1129,    0,    0,    0,    0, 1125,
     1130, 1129, 1128, 1128, 1128, 1124, 1131, 1130, 1132,    0,
     1129, 1129, 1133, 1131, 1134, 1132, 1130, 1130,    0, 1133,
        0, 1134, 1131, 1131, 1132, 1132,    0, 1166, 1133, 1133,
     1134, 1134, 1135, 1130, 1132, 1136,    0, 1131, 1137, 1135,
        0,    0, 1136, 1166, 1166, 1137,    0,    0, 1135, 1135,
        0, 1136, 1136,    0, 1137, 1137, 1134, 1138, 1138,    0,
     1138, 1140, 1140, 1138, 1140, 1138,    0, 1140, 1135, 1140,
     1137, 1136, 1139, 1139, 1139, 1139,    0,    0, 1139, 1138,

        0, 1142,    0, 1140, 1141, 1141, 1141, 1141, 1142, 1143,
     1141,    0, 1144,    0, 1145,    0, 1143, 1142, 1142, 1144,
     1146, 1145,    0,    0, 1162, 1143, 1143, 1146, 1144, 1144,
     1145, 1145, 1147,    0, 1145,    0, 1146, 1146, 1142, 1147,
     1162, 1162, 1146, 1148,    0, 1149, 1143, 1144, 1147, 1147,
     1148, 1150, 1149,    0, 1167, 1162,    0,    0, 1150, 1148,
     1148, 1149, 1149, 1149, 1148, 1151,    0, 1150, 1150, 1152,
     1167, 1167, 1151,    0, 1147,    0, 1152, 1154, 1154, 1154,
     1154, 1151, 1151, 1154, 1150, 1152, 1152, 1153, 1153,    0,
     1153, 1155,    0, 1153,    0, 1153, 1151, 1156, 1155, 1157,

        0,    0,    0, 1158, 1156,    0, 1157, 1155, 1155, 1153,
     1158, 1152,    0, 1156, 1156, 1157, 1157, 1159,    0, 1158,
     1158, 1160, 1155,    0, 1159, 1157,    0,    0, 1156, 1161,
        0, 1164,    0, 1159, 1159,    0,    0, 1160, 1160, 1158,
     1165,    0, 1168, 1160, 1169, 1161, 1161, 1164, 1164,    0,
     1170, 1161,    0, 1159,    0,    0, 1165, 1165, 1168, 1168,
     1169, 1169, 1171,    0, 1172, 1169, 1170, 1170, 1164, 1173,
        0, 1165, 1174,    0, 1175,    0, 1176,    0, 1171, 1171,
     1172, 1172,    0,    0, 1171, 1173, 1173, 1177, 1174, 1174,
     1175, 1175, 1176, 1176, 1177,    0,    0,    0, 1178,    0,

     1172, 1179,    0, 1177, 1177, 1178,    0,    0, 1179,    0,
        0, 1175,    0, 1177, 1178, 1178, 1176, 1179, 1179, 1179,
     1180,    0, 1181,    0, 1178, 1182,    0, 1180, 1184, 1181,
        0,    0, 1182, 1183,    0, 1184, 1180, 1180, 1181, 1181,
     1183, 1182, 1182, 1183, 1184, 1184, 1181, 1185,    0, 1183,
     1183, 1186, 1184, 1187, 1185, 1188, 1182, 1180, 1186,    0,
     1187,    0, 1188, 1185, 1185,    0, 1189, 1186, 1186, 1187,
     1187, 1188, 1188, 1189, 1190, 1188,    0, 1191, 1187, 1192,
        0, 1190, 1189, 1189, 1191, 1193, 1192,    0,    0,    0,
     1190, 1190, 1193, 1191, 1191, 1192, 1192, 1189, 1194, 1191,

     1195, 1193, 1193, 1196,    0, 1194,    0, 1195,    0,    0,
     1196, 1197,    0, 1193, 1194, 1194, 1195, 1195, 1197, 1196,
     1196, 1196, 1198,    0, 1194, 1199, 1195, 1197, 1197, 1198,
     1200,    0, 1199,    0,    0, 1199,    0, 1200, 1198, 1198,
        0, 1199, 1199, 1201,    0, 1202, 1200, 1200, 1197, 1203,
     1201, 1204, 1202, 1198,    0, 1200, 1203,    0, 1204, 1201,
     1201, 1202, 1202, 1201, 1205, 1203, 1203, 1204, 1204, 1202,
        0, 1205, 1206, 1203, 1207,    0, 1208,    0, 1209,    0,
     1205, 1205, 1204, 1210,    0, 1211, 1205, 1212, 1206, 1206,
     1207, 1207, 1208, 1208, 1209, 1209, 1213,    0,    0, 1210,

     1210, 1211, 1211, 1212, 1212, 1214,    0, 1215, 1206, 1216,
        0,    0, 1213, 1213, 1209,    0, 1216,    0, 1213,    0,
     1217, 1214, 1214, 1215, 1215, 1216, 1216, 1217, 1218,    0,
        0, 1214,    0,    0, 1219, 1218, 1217, 1217,    0, 1220,
        0, 1219,    0,    0, 1218, 1218, 1220, 1221, 1216,    0,
     1219, 1219,    0, 1222, 1221, 1220, 1220,    0,    0, 1217,
     1222, 1223,    0, 1221, 1221, 1218, 1219, 1224, 1223, 1222,
     1222,    0, 1225, 1221, 1224, 1222, 1220, 1223, 1223, 1225,
     1226,    0,    0, 1224, 1224, 1223,    0, 1226, 1225, 1225,
        0, 1227,    0,    0, 1228,    0, 1226, 1226, 1227, 1230,

        0, 1228,    0, 1224,    0, 1229, 1230, 1227, 1227,    0,
     1228, 1228, 1229,    0,    0, 1230, 1230, 1231,    0, 1226,
        0, 1229, 1229,    0, 1231, 1232,    0,    0, 1233,    0,
     1227, 1228, 1232, 1231, 1231, 1233, 1230, 1229,    0, 1234,
        0, 1232, 1232, 1231, 1233, 1233, 1234, 1232, 1235,    0,
     1236,    0, 1233,    0, 1237, 1234, 1234,    0,    0,    0,
        0, 1237,    0,    0, 1235, 1235, 1236, 1236,    0,    0,
     1237, 1237, 1238,    0, 1239, 1234, 1237,    0,    0, 1238,
     1240, 1239, 1236,    0, 1235, 1241,    0, 1240, 1238, 1238,
     1239, 1239, 1241,    0, 1238,    0, 1240, 1240,    0,    0,

     1239, 1241, 1241, 1242,    0, 1243,    0,    0,    0, 1244,
     1242, 1245, 1243, 1256,    0, 1240, 1244,    0, 1245, 1242,
     1242, 1243, 1243, 1242, 1246, 1244, 1244, 1245, 1245, 1256,
     1256, 1246, 1247, 1245,    0, 1248,    0, 1249,    0, 1247,
     1246, 1246, 1248, 1250, 1249,    0, 1246,    0, 1247, 1247,
        0, 1248, 1248, 1249, 1249, 1251,    0, 1249, 1247, 1250,
     1250, 1252, 1251,    0,    0,    0, 1253,    0, 1252, 1254,
     1248, 1251, 1251, 1253, 1250,    0, 1254, 1252, 1252,    0,
     1255,    0, 1253, 1253, 1257, 1254, 1254, 1255, 1258,    0,
        0, 1257, 1259,    0,    0, 1258, 1255, 1255, 1253, 1259,

     1257, 1257,    0,    0, 1258, 1258,    0,    0, 1259, 1259,
        0,    0, 1255,    0,    0, 1257,    0,    0,    0, 1258,
     1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261, 1261,
     1261, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
     1262, 1262, 1263, 1263, 1263, 1263, 1263, 1263, 1263, 1263,
     1263, 1263, 1263, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
     1264, 1264, 1264, 1264, 1265, 1265, 1265, 1265, 1265, 1265,
     1265, 1265, 1265, 1265, 1265, 1266, 1266,    0,    0, 1266,
     1266, 1266, 1267,    0, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1268, 1268,    0,    0, 1268, 1268, 1268, 1269,

        0, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1270,
     1270,    0,    0, 1270, 1270, 1270, 1271,    0, 1271, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1272, 1272,    0,    0,
     1272, 1272, 1272, 1273,    0, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1274, 1274,    0,    0, 1274, 1274, 1274,
     1275,    0, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275,
     1276,    0,    0,    0, 1276,    0, 1276, 1276,    0, 1276,
     1276, 1277,    0,    0, 1277, 1277,    0, 1277, 1277, 1277,
     1277, 1277, 1278, 1278,    0, 1278, 1278, 1278, 1278, 1278,
     1278, 1278, 1278, 1279,    0, 1279, 1279,    0,    0, 1279,

        0, 1279, 1280, 1280, 1280, 1280, 1280,    0, 1280, 1281,
     1281, 1281, 1281, 1281,    0, 1281, 1282, 1282, 1282, 1282,
     1282,    0, 1282, 1283, 1283, 1283, 1283, 1283,    0, 1283,
     1284, 1284, 1284, 1284, 1284,    0, 1284, 1285,    0, 1285,
     1285, 1285, 1285, 1285, 1285, 1285, 1285, 1286,    0,    0,
        0, 1286, 1286, 1286, 1286, 1286, 1286, 1286, 1287,    0,
     1287, 1287, 1287, 1287, 1287, 1287, 1287, 1287, 1288,    0,
        0,    0, 1288, 1288, 1288, 1288, 1288, 1288, 1288, 1289,
        0, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1289, 1290,
        0,    0,    0, 1290, 1290, 1290, 1290, 1290, 1290, 1290,

     1291,    0,    0,    0, 1291, 1291, 1291, 1291, 1291, 1291,
     1291, 1292,    0, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
     1292, 1293,    0,    0,    0, 1293, 1293, 1293, 1293, 1293,
     1293, 1293, 1294,    0, 1294, 1294, 1294, 1294, 1294, 1294,
     1294, 1294, 1295,    0,    0,    0, 1295, 1295, 1295, 1295,
     1295, 1295, 1295, 1296, 1296,    0, 1296, 1296, 1296, 1296,
     1296, 1296, 1296, 1296, 1297,    0,    0,    0, 1297, 1297,
     1297, 1297, 1297, 1297, 1297, 1298,    0,    0,    0, 1298,
     1298, 1298, 1298, 1298, 1298, 1298, 1299, 1299,    0, 1299,
     1299, 1299, 1299, 1299, 1299, 1299, 1299, 1300,    0,    0,

        0, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1301,    0,
        0,    0, 1301, 1301, 1301, 1301, 1301, 1301, 1301, 1302,
     1302,    0, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
     1303,    0,    0,    0, 1303, 1303, 1303, 1303, 1303, 1303,
     1303, 1304,    0,    0,    0, 1304, 1304, 1304, 1304, 1304,
     1304, 1304, 1305,    0,    0,    0, 1305, 1305, 1305, 1305,
     1305, 1305, 1305, 1306, 1306,    0, 1306, 1306, 1306, 1306,
     1306, 1306, 1306, 1306, 1307,    0,    0,    0, 1307, 1307,
     1307, 1307, 1307, 1307, 1307, 1308,    0,    0,    0, 1308,
     1308, 1308, 1308, 1308, 1308, 1308, 1309, 1309,    0, 1309,

     1309, 1309, 1309, 1309, 1309, 1309, 1309, 1310,    0,    0,
        0, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1311,    0,
        0,    0, 1311, 1311, 1311, 1311, 1311, 1311, 1311, 1312,
     1312,    0, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
     1313,    0,    0,    0, 1313, 1313, 1313, 1313, 1313, 1313,
     1313, 1314, 1314,    0, 1314, 1314, 1314, 1314, 1314, 1314,
     1314, 1314, 1315, 1315,    0, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1315, 1316,    0,    0,    0, 1316, 1316, 1316,
     1316, 1316, 1316, 1316, 1317,    0,    0,    0, 1317, 1317,
     1317, 1317, 1317, 1317, 1317, 1318, 1318,    0, 1318, 1318,

     1318, 1318, 1318, 1318, 1318, 1318, 1319, 1319,    0,    0,
     1319, 1319, 1319, 1320, 1320,    0, 1320, 1320, 1320, 1320,
     1320, 1320, 1320, 1320, 1321,    0,    0,    0, 1321, 1321,
     1321, 1321, 1321, 1321, 1321, 1322,    0,    0,    0, 1322,
     1322, 1322, 1322, 1322, 1322, 1322, 1323, 1323,    0, 1323,
     1323, 1323, 1323, 1323, 1323, 1323, 1323, 1324, 1324,    0,
     1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1325,    0,
        0,    0, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1326,
     1326,    0, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1327,    0,    0,    0, 1327, 1327, 1327, 1327, 1327, 1327,

     1327, 1328,    0,    0,    0, 1328, 1328, 1328, 1328, 1328,
     1328, 1328, 1329, 1329,    0, 1329, 1329, 1329, 1329, 1329,
     1329, 1329, 1329, 1330, 1330,    0,    0, 1330, 1330, 1330,
     1331, 1331,    0, 1331, 1331, 1331, 1331, 1331, 1331, 1331,
     1331, 1332,    0,    0,    0, 1332, 1332, 1332, 1332, 1332,
     1332, 1332, 1333, 1333,    0, 1333, 1333, 1333, 1333, 1333,
     1333, 1333, 1333, 1334,    0,    0,    0, 1334, 1334, 1334,
     1334, 1334, 1334, 1334, 1335,    0,    0,    0, 1335, 1335,
     1335, 1335, 1335, 1335, 1335, 1336, 1336,    0, 1336, 1336,
     1336, 1336, 1336, 1336, 1336, 1336, 1337, 1337,    0,    0,

     1337, 1337, 1337, 1338, 1338,    0, 1338, 1338, 1338, 1338,
     1338, 1338, 1338, 1338, 1339,    0,    0,    0, 1339, 1339,
     1339, 1339, 1339, 1339, 1339, 1340,    0,    0,    0, 1340,
     1340, 1340, 1340, 1340, 1340, 1340, 1341, 1341,    0, 1341,
     1341, 1341, 1341, 1341, 1341, 1341, 1341, 1342, 1342,    0,
     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1343, 1343,
        0,    0, 1343, 1343, 1343, 1344, 1344,    0, 1344, 1344,
     1344, 1344, 1344, 1344, 1344, 1344, 1345, 1345,    0, 1345,
     1345, 1345, 1345, 1345, 1345, 1345, 1345, 1346, 1346,    0,
     1346, 1346, 1346, 1346, 1346, 1346, 1346, 1346, 1347, 1347,

        0, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../../../src/Mixfix/lexer.ll"
/*

    This file is part of the Maude 2 interpreter.

    Copyright 1997-2010 SRI International, Menlo Park, CA 94025, USA.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

*/
/*
//	Lexical analyser
*/
#line 27 "../../../src/Mixfix/lexer.ll"
//      utility stuff
#include "macros.hh"
#include "vector.hh"

//	forward declarations
#include "interface.hh"
#include "core.hh"
#include "higher.hh"
#include "strategyLanguage.hh"
#include "mixfix.hh"

//	core class definitions
#include "lineNumber.hh"

//	front end class definitions
#include "token.hh"
#include "fileTable.hh"
#include "directoryManager.hh"
//#include "preModule.hh"
#include "lexerAux.hh"
#include "global.hh"
#include "userLevelRewritingContext.hh"
#include "interpreter.hh"

//	bison generated token file
#include "surface.h"

#define YY_DECL int yylex(YYSTYPE* lvalp)

#define YY_INPUT(buf, result, max_size)		getInput(buf, result, max_size)

#define RETURN(token) \
  { lvalp->yyToken.tokenize(yytext, lineNumber); return (token); }

#define RETURN_FIX_UP(token) \
  { lvalp->yyToken.fixUp(yytext, lineNumber); return (token); }

#define SAVE(token) \
  { savedToken.tokenize(yytext, lineNumber); savedReturn = token; }

#define SAVE_FIX_UP(token) \
  { savedToken.fixUp(yytext, lineNumber); savedReturn = token; }

#define RETURN_SAVED(token) \
  { lvalp->yyToken = savedToken; return (token); }

#define STORE \
  { Token t; t.tokenize(yytext, lineNumber); lexerBubble.append(t); /*DebugAdvisory("Stored " << t);*/ }
#define STORE_FIX_UP \
  { Token t; t.fixUp(yytext, lineNumber); lexerBubble.append(t); /*DebugAdvisory("Stored fixUp " << t);*/ }

#define EXIT(token) \
  { yy_pop_state(); RETURN(token) }

Token savedToken;
int savedReturn;
int braceCount;
int parenCount;
int terminationSet;
string accumulator;
string fileName;

//int terminationCondition;
int minLength;
extern Vector<Token> lexerBubble;










#line 2857 "<stdout>"

#define INITIAL 0
#define ID_MODE 1
#define CMD_MODE 2
#define SEEN_DOT 3
#define BUBBLE_MODE 4
#define END_STATEMENT_MODE 5
#define END_COMMAND_MODE 6
#define FILE_NAME_MODE 7
#define FILE_NAME_QUOTE_MODE 8
#define STRING_MODE 9
#define LATEX_MODE 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 114 "../../../src/Mixfix/lexer.ll"

	if (UserLevelRewritingContext::interrupted())
	  yyterminate();

#line 3069 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1261 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8410 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 118 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  eatComment(false);
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 122 "../../../src/Mixfix/lexer.ll"
{
					  yyless(3);
					  eatComment(true);
					}
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 128 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MEMO)
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 129 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FORMAT)
	YY_BREAK


case 5:
YY_RULE_SETUP
#line 133 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IN)
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 137 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MOD)  // need to know which one we saw
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 138 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OMOD)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 139 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VIEW);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 140 "../../../src/Mixfix/lexer.ll"
return KW_LOAD;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 141 "../../../src/Mixfix/lexer.ll"
return KW_PWD;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 142 "../../../src/Mixfix/lexer.ll"
return KW_CD;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 143 "../../../src/Mixfix/lexer.ll"
return KW_PUSHD;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 144 "../../../src/Mixfix/lexer.ll"
return KW_POPD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 145 "../../../src/Mixfix/lexer.ll"
return KW_LS;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 146 "../../../src/Mixfix/lexer.ll"
return KW_QUIT;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 147 "../../../src/Mixfix/lexer.ll"
return KW_EOF;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 148 "../../../src/Mixfix/lexer.ll"
return KW_PARSE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 149 "../../../src/Mixfix/lexer.ll"
return KW_NORMALIZE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 150 "../../../src/Mixfix/lexer.ll"
return KW_REDUCE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 151 "../../../src/Mixfix/lexer.ll"
return KW_CREDUCE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 152 "../../../src/Mixfix/lexer.ll"
return KW_SREDUCE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 153 "../../../src/Mixfix/lexer.ll"
return KW_REWRITE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 154 "../../../src/Mixfix/lexer.ll"
return KW_EREWRITE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 155 "../../../src/Mixfix/lexer.ll"
return KW_FREWRITE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 156 "../../../src/Mixfix/lexer.ll"
return KW_SREWRITE;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 157 "../../../src/Mixfix/lexer.ll"
return KW_LOOP;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 158 "../../../src/Mixfix/lexer.ll"
return KW_CONTINUE;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 159 "../../../src/Mixfix/lexer.ll"
return KW_NARROW;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 160 "../../../src/Mixfix/lexer.ll"
return KW_XG_NARROW;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 161 "../../../src/Mixfix/lexer.ll"
return KW_MATCH;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 162 "../../../src/Mixfix/lexer.ll"
return KW_XMATCH;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 163 "../../../src/Mixfix/lexer.ll"
return KW_SEARCH;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 164 "../../../src/Mixfix/lexer.ll"
return KW_UNIFY;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 165 "../../../src/Mixfix/lexer.ll"
return KW_SET;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 166 "../../../src/Mixfix/lexer.ll"
return KW_SHOW;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 167 "../../../src/Mixfix/lexer.ll"
return KW_ON;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 168 "../../../src/Mixfix/lexer.ll"
return KW_OFF;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 169 "../../../src/Mixfix/lexer.ll"
return KW_TRACE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 170 "../../../src/Mixfix/lexer.ll"
return KW_ADVISE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 171 "../../../src/Mixfix/lexer.ll"
return KW_VERBOSE;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 172 "../../../src/Mixfix/lexer.ll"
return KW_DO;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 173 "../../../src/Mixfix/lexer.ll"
return KW_CLEAR;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 174 "../../../src/Mixfix/lexer.ll"
return KW_BODY;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 175 "../../../src/Mixfix/lexer.ll"
return KW_BUILTIN;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 176 "../../../src/Mixfix/lexer.ll"
return KW_WHOLE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 177 "../../../src/Mixfix/lexer.ll"
return KW_SELECT;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 178 "../../../src/Mixfix/lexer.ll"
return KW_DESELECT;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 179 "../../../src/Mixfix/lexer.ll"
return KW_CONCEAL;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 180 "../../../src/Mixfix/lexer.ll"
return KW_REVEAL;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 181 "../../../src/Mixfix/lexer.ll"
return KW_CONDITION;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 182 "../../../src/Mixfix/lexer.ll"
return KW_SUBSTITUTION;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 183 "../../../src/Mixfix/lexer.ll"
return KW_PRINT;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 184 "../../../src/Mixfix/lexer.ll"
return KW_ATTRIBUTE;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 185 "../../../src/Mixfix/lexer.ll"
return KW_NEWLINE;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 186 "../../../src/Mixfix/lexer.ll"
return KW_COLOR;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 187 "../../../src/Mixfix/lexer.ll"
return KW_GRAPH;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 188 "../../../src/Mixfix/lexer.ll"
return KW_MIXFIX;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 189 "../../../src/Mixfix/lexer.ll"
return KW_FLAT;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 190 "../../../src/Mixfix/lexer.ll"
return KW_WITH;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 191 "../../../src/Mixfix/lexer.ll"
return KW_PARENS;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 192 "../../../src/Mixfix/lexer.ll"
return KW_ALIASES;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 193 "../../../src/Mixfix/lexer.ll"
return KW_GC;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 194 "../../../src/Mixfix/lexer.ll"
return KW_TIME;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 195 "../../../src/Mixfix/lexer.ll"
return KW_STATS;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 196 "../../../src/Mixfix/lexer.ll"
return KW_TIMING;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 197 "../../../src/Mixfix/lexer.ll"
return KW_CMD;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 198 "../../../src/Mixfix/lexer.ll"
return KW_ALL;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 199 "../../../src/Mixfix/lexer.ll"
return KW_MODULES;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 200 "../../../src/Mixfix/lexer.ll"
return KW_MODULE;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 201 "../../../src/Mixfix/lexer.ll"
return KW_VIEWS;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 202 "../../../src/Mixfix/lexer.ll"
return KW_SORTS;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 203 "../../../src/Mixfix/lexer.ll"
return KW_OPS2;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 204 "../../../src/Mixfix/lexer.ll"
return KW_VARS;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 205 "../../../src/Mixfix/lexer.ll"
return KW_MBS;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 206 "../../../src/Mixfix/lexer.ll"
return KW_EQS;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 207 "../../../src/Mixfix/lexer.ll"
return KW_RLS;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 208 "../../../src/Mixfix/lexer.ll"
return KW_SUMMARY;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 209 "../../../src/Mixfix/lexer.ll"
return KW_KINDS;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 210 "../../../src/Mixfix/lexer.ll"
return KW_COMPILE;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 211 "../../../src/Mixfix/lexer.ll"
return KW_COUNT;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 212 "../../../src/Mixfix/lexer.ll"
return KW_PROTECT;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 213 "../../../src/Mixfix/lexer.ll"
return KW_EXTEND;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 214 "../../../src/Mixfix/lexer.ll"
return KW_INCLUDE;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 215 "../../../src/Mixfix/lexer.ll"
return KW_EXCLUDE;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 216 "../../../src/Mixfix/lexer.ll"
return KW_DEBUG;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 217 "../../../src/Mixfix/lexer.ll"
return KW_RESUME;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 218 "../../../src/Mixfix/lexer.ll"
return KW_ABORT;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 219 "../../../src/Mixfix/lexer.ll"
return KW_STEP;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 220 "../../../src/Mixfix/lexer.ll"
return KW_WHERE;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 221 "../../../src/Mixfix/lexer.ll"
return KW_DUMP;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 222 "../../../src/Mixfix/lexer.ll"
return KW_BREAK;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 223 "../../../src/Mixfix/lexer.ll"
return KW_BREAKDOWN;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 224 "../../../src/Mixfix/lexer.ll"
return KW_PATH;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 225 "../../../src/Mixfix/lexer.ll"
return KW_LABEL;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 226 "../../../src/Mixfix/lexer.ll"
return KW_PROFILE;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 227 "../../../src/Mixfix/lexer.ll"
return KW_NUMBER;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 228 "../../../src/Mixfix/lexer.ll"
return KW_RAT;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 229 "../../../src/Mixfix/lexer.ll"
return *yytext;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 230 "../../../src/Mixfix/lexer.ll"
{
					  bool dummy;
					  lvalp->yyInt64 = stringToInt64(yytext, dummy, 10);
					  return SIMPLE_NUMBER;
					}
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 235 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped unexpected token: " <<
					    QUOTE(yytext));
					}
	YY_BREAK

/*
  *	In command mode we only recognize special tokens
  *	"in" "(" ")" "[" "]" ":" "." "," and non-negative numbers.
  *	Everything else is an identifier. Furthermore "." is only recognized
  *	at the end of a line or before a comment (ignoring white space).
  */

case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 249 "../../../src/Mixfix/lexer.ll"
{
                                          yyless(1);
                                          RETURN('.')
                                        }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 253 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 254 "../../../src/Mixfix/lexer.ll"
RETURN(NUMERIC_ID)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 255 "../../../src/Mixfix/lexer.ll"
RETURN(IDENTIFIER)
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 256 "../../../src/Mixfix/lexer.ll"
{
					  SAVE_FIX_UP(ENDS_IN_DOT)
					  BEGIN(SEEN_DOT);
					}
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 260 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(IDENTIFIER)
	YY_BREAK


case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 264 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  BEGIN(CMD_MODE);
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 269 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  BEGIN(CMD_MODE);
					  RETURN_SAVED(IDENTIFIER)
					}
	YY_BREAK

/*
  *	Id mode is used for scanning modules; a whole bunch of special tokens
  *	are recognized.
  */

case 109:
YY_RULE_SETUP
#line 281 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TO)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 282 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROM)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 283 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LABEL)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 284 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ASSOC)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 285 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COMM)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 286 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 287 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IDEM)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 288 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ITER)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 289 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LEFT)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 290 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RIGHT)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 291 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PREC)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 292 "../../../src/Mixfix/lexer.ll"
RETURN(KW_GATHER)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 293 "../../../src/Mixfix/lexer.ll"
RETURN(KW_METADATA)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 294 "../../../src/Mixfix/lexer.ll"
RETURN(KW_STRAT)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 295 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROZEN)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 296 "../../../src/Mixfix/lexer.ll"
RETURN(KW_POLY)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 297 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CTOR)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 298 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LATEX)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 299 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SPECIAL)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 300 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CONFIG)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 301 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OBJ)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 302 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSG)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 303 "../../../src/Mixfix/lexer.ll"
RETURN(KW_DITTO)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 304 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID_HOOK)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 305 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP_HOOK)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 306 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TERM_HOOK)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 307 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IS)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 308 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IF)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 309 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IMPORT)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 310 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SORT)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 311 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBSORT)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 312 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CLASS)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 313 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBCLASS)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 314 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 315 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OPS)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 316 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSGS)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 317 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VAR)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 318 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MB)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 319 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CMB)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 320 "../../../src/Mixfix/lexer.ll"
RETURN(KW_EQ)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 321 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CEQ)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 322 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RL)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 323 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CRL)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 324 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDM)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 325 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDV)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 326 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 327 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW2)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 328 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PARTIAL)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 329 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COLON2)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 330 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 331 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(ENDS_IN_DOT)
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 332 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(IDENTIFIER)
	YY_BREAK

/*
  *	Bubble mode squirrels tokens away in lexerBubble until some termination criteria is met.
  */

case 161:
YY_RULE_SETUP
#line 339 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_COLON) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 345 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_COMMA) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 351 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_LEFT_BRACKET) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 357 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_RIGHT_BRACKET) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 363 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_EQUALS) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 369 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_ARROW2) && lexerBubble.length() >= minLength)
					    EXIT(KW_ARROW2)
					  else
					    STORE
					}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 375 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_TO) && lexerBubble.length() >= minLength)
					    EXIT(KW_TO)
					  else
					    STORE
					}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 381 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_IF) && lexerBubble.length() >= minLength)
					    EXIT(KW_IF)
					  else
					    STORE
					}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 387 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_OP_ATTRIBUTE) && lexerBubble.length() >= minLength)
					    {
					      yyless(0);  // need to re-lex it to get the correct return value
					      yy_pop_state();
					    }
					  else
					    STORE
					}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 396 "../../../src/Mixfix/lexer.ll"
{
					  ++parenCount;
					  STORE
					}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 400 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0)
					    {
					      if ((terminationSet & BAR_RIGHT_PAREN) && lexerBubble.length() >= minLength)
					        EXIT(*yytext)
					      IssueWarning(LineNumber(lineNumber) << ": mismatched parentheses.");
					    }
					  else
					    --parenCount;
					  STORE
					}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 411 "../../../src/Mixfix/lexer.ll"
STORE
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 412 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 &&
					      lexerBubble.length() >= minLength &&
					      (terminationSet & (END_STATEMENT | END_COMMAND)))
					    {
					      SAVE(*yytext)
					      BEGIN((terminationSet & END_STATEMENT) ? END_STATEMENT_MODE : END_COMMAND_MODE);
					    }
					  else
					    STORE
					}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 423 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 &&
					      lexerBubble.length() + 1 >= minLength  &&
					      (terminationSet & (END_STATEMENT | END_COMMAND)))
					    {
					      SAVE_FIX_UP(ENDS_IN_DOT)
					      BEGIN((terminationSet & END_STATEMENT) ? END_STATEMENT_MODE : END_COMMAND_MODE);
					    }
					  else
					    STORE_FIX_UP
					}
	YY_BREAK
case 175:
/* rule 175 can match eol */
YY_RULE_SETUP
#line 434 "../../../src/Mixfix/lexer.ll"
STORE_FIX_UP
	YY_BREAK

/*
  *	We have saved something that looks like a statement terminating period. We now lex the next
  *	token to see if it ends a module or starts a new statement, and if so push the lexed token back
  *	on to the input stream to be re-lexed in a new mode.
  */

case 176:
YY_RULE_SETUP
#line 443 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // BUG - need to deal with white space and comments after the .
					  yy_pop_state();
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK


case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 451 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  yy_pop_state();
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK


case 178:
YY_RULE_SETUP
#line 459 "../../../src/Mixfix/lexer.ll"
{
					  lexerBubble.append(savedToken);
					  SAVE(*yytext);
					}
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 463 "../../../src/Mixfix/lexer.ll"
{
					  lexerBubble.append(savedToken);
					  SAVE_FIX_UP(ENDS_IN_DOT)
					}
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 467 "../../../src/Mixfix/lexer.ll"
{
	     				  //
					  //	We need {maudeId} here so that an identifier such
					  //	as .foo doesn't get split by the first rule.
					  //
					  lexerBubble.append(savedToken);
					  yyless(0);
					  BEGIN(BUBBLE_MODE);
					}
	YY_BREAK


case 181:
YY_RULE_SETUP
#line 479 "../../../src/Mixfix/lexer.ll"
{
					  if (accumulator.empty())
					    BEGIN(FILE_NAME_QUOTE_MODE);
					  else
					    accumulator += '"';
					}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 485 "../../../src/Mixfix/lexer.ll"
accumulator += ' ';
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 486 "../../../src/Mixfix/lexer.ll"
accumulator += '"';
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 487 "../../../src/Mixfix/lexer.ll"
accumulator += '\\';
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 488 "../../../src/Mixfix/lexer.ll"
accumulator += '\\';
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 489 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 490 "../../../src/Mixfix/lexer.ll"
{
					  if (!accumulator.empty())
					    {
					      yy_pop_state();
					      lvalp->yyString = accumulator.c_str();
					      eatComment(false);
					      return FILE_NAME_STRING;
					    }
					}
	YY_BREAK
case 188:
/* rule 188 can match eol */
YY_RULE_SETUP
#line 499 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  yy_pop_state();
					  lvalp->yyString = accumulator.c_str();
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 189:
YY_RULE_SETUP
#line 508 "../../../src/Mixfix/lexer.ll"
{
					   yy_pop_state();
					   lvalp->yyString = accumulator.c_str();
					   eatComment(false);
					   return FILE_NAME_STRING;
					}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 514 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 515 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  yy_pop_state();
					  lvalp->yyString = accumulator.c_str();
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 192:
YY_RULE_SETUP
#line 524 "../../../src/Mixfix/lexer.ll"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK
case 193:
/* rule 193 can match eol */
YY_RULE_SETUP
#line 529 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // so that line numbers will be correct
					  yy_pop_state();
					  lvalp->yyString = "";			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK


case 194:
YY_RULE_SETUP
#line 538 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 539 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    ++parenCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 544 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    {
					      --parenCount;
					      if (parenCount == 0)
					        {
						  yyless(0);
						  yy_pop_state();
						  lvalp->yyString = accumulator.c_str();
						  return LATEX_STRING;
						}
					    }
					  accumulator += yytext;
					}
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 558 "../../../src/Mixfix/lexer.ll"
{
					  ++braceCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 562 "../../../src/Mixfix/lexer.ll"
{
					  --braceCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 566 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  accumulator += yytext;
					}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 570 "../../../src/Mixfix/lexer.ll"
yy_pop_state();  // mindless recovery
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ID_MODE):
case YY_STATE_EOF(CMD_MODE):
case YY_STATE_EOF(SEEN_DOT):
case YY_STATE_EOF(BUBBLE_MODE):
case YY_STATE_EOF(END_STATEMENT_MODE):
case YY_STATE_EOF(END_COMMAND_MODE):
case YY_STATE_EOF(FILE_NAME_MODE):
case YY_STATE_EOF(FILE_NAME_QUOTE_MODE):
case YY_STATE_EOF(STRING_MODE):
case YY_STATE_EOF(LATEX_MODE):
#line 573 "../../../src/Mixfix/lexer.ll"
{
					  if (UserLevelRewritingContext::interrupted() ||
					      !handleEof())
					    yyterminate();
					}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 579 "../../../src/Mixfix/lexer.ll"
;
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 580 "../../../src/Mixfix/lexer.ll"
++lineNumber;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 581 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped: " << QUOTE(yytext));
					}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 586 "../../../src/Mixfix/lexer.ll"
ECHO;
	YY_BREAK
#line 4450 "<stdout>"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1261 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1261 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1260);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 586 "../../../src/Mixfix/lexer.ll"



#include "lexerAux.cc"

