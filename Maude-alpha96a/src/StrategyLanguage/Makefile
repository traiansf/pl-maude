# Makefile.in generated by automake 1.10 from Makefile.am.
# src/StrategyLanguage/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.





pkgdatadir = $(datadir)/Maude
pkglibdir = $(libdir)/Maude
pkgincludedir = $(includedir)/Maude
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
subdir = src/StrategyLanguage
DIST_COMMON = $(noinst_HEADERS) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in ChangeLog
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
LIBRARIES = $(noinst_LIBRARIES)
AR = ar
ARFLAGS = cru
libstrategyLanguage_a_AR = $(AR) $(ARFLAGS)
libstrategyLanguage_a_LIBADD =
am_libstrategyLanguage_a_OBJECTS =  \
	libstrategyLanguage_a-trivialStrategy.$(OBJEXT) \
	libstrategyLanguage_a-applicationStrategy.$(OBJEXT) \
	libstrategyLanguage_a-concatenationStrategy.$(OBJEXT) \
	libstrategyLanguage_a-iterationStrategy.$(OBJEXT) \
	libstrategyLanguage_a-branchStrategy.$(OBJEXT) \
	libstrategyLanguage_a-unionStrategy.$(OBJEXT) \
	libstrategyLanguage_a-testStrategy.$(OBJEXT) \
	libstrategyLanguage_a-strategicExecution.$(OBJEXT) \
	libstrategyLanguage_a-strategicTask.$(OBJEXT) \
	libstrategyLanguage_a-branchTask.$(OBJEXT) \
	libstrategyLanguage_a-strategicProcess.$(OBJEXT) \
	libstrategyLanguage_a-decompositionProcess.$(OBJEXT) \
	libstrategyLanguage_a-applicationProcess.$(OBJEXT) \
	libstrategyLanguage_a-strategicSearch.$(OBJEXT) \
	libstrategyLanguage_a-sharedRewriteSearchState.$(OBJEXT) \
	libstrategyLanguage_a-matchProcess.$(OBJEXT) \
	libstrategyLanguage_a-rewriteTask.$(OBJEXT) \
	libstrategyLanguage_a-strategyStackManager.$(OBJEXT)
libstrategyLanguage_a_OBJECTS = $(am_libstrategyLanguage_a_OBJECTS)
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
SOURCES = $(libstrategyLanguage_a_SOURCES)
DIST_SOURCES = $(libstrategyLanguage_a_SOURCES)
HEADERS = $(noinst_HEADERS)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/andrei/Maude-alpha96a/missing --run aclocal-1.10
AMTAR = ${SHELL} /home/andrei/Maude-alpha96a/missing --run tar
AUTOCONF = ${SHELL} /home/andrei/Maude-alpha96a/missing --run autoconf
AUTOHEADER = ${SHELL} /home/andrei/Maude-alpha96a/missing --run autoheader
AUTOMAKE = ${SHELL} /home/andrei/Maude-alpha96a/missing --run automake-1.10
AWK = mawk
BISON = bison
BUDDY_LIB = -lbdd
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -Wall -O2 -fomit-frame-pointer -fforce-addr -finline-limit=10000 -mpreferred-stack-boundary=4 
CPPFLAGS = -I/home/andrei/pl-maude/local/include
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -Wall -O2 -fomit-frame-pointer -fforce-addr -finline-limit=10000 -mpreferred-stack-boundary=4 
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
FLEX = flex
GMP_LIBS = -lgmpxx -lgmp
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS = -static -L/home/andrei/pl-maude/local/lib
LIBOBJS = 
LIBS = -lnsl 
LIBSIGSEGV_LIB = -lsigsegv
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/andrei/Maude-alpha96a/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
OBJEXT = o
PACKAGE = Maude
PACKAGE_BUGREPORT = maude-bugs@maude.cs.uiuc.edu
PACKAGE_NAME = Maude
PACKAGE_STRING = Maude alpha96a
PACKAGE_TARNAME = maude
PACKAGE_VERSION = alpha96a
PATH_SEPARATOR = :
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/bash
STRIP = 
TECLA_LIBS = -ltecla -lcurses
VERSION = alpha96a
abs_builddir = /home/andrei/Maude-alpha96a/src/StrategyLanguage
abs_srcdir = /home/andrei/Maude-alpha96a/src/StrategyLanguage
abs_top_builddir = /home/andrei/Maude-alpha96a
abs_top_srcdir = /home/andrei/Maude-alpha96a
ac_ct_CC = gcc
ac_ct_CXX = g++
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = $(SHELL) /home/andrei/Maude-alpha96a/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_builddir = ../..
top_srcdir = ../..
noinst_LIBRARIES = libstrategyLanguage.a
libstrategyLanguage_a_CPPFLAGS = \
	-I$(top_srcdir)/src/Utility \
	-I$(top_srcdir)/src/Interface \
	-I$(top_srcdir)/src/Variable \
	-I$(top_srcdir)/src/Core \
	-I$(top_srcdir)/src/Higher \
	-I$(top_srcdir)/src/FullCompiler

libstrategyLanguage_a_SOURCES = \
	trivialStrategy.cc \
	applicationStrategy.cc \
	concatenationStrategy.cc \
	iterationStrategy.cc \
	branchStrategy.cc \
	unionStrategy.cc \
	testStrategy.cc \
	strategicExecution.cc \
	strategicTask.cc \
	branchTask.cc \
	strategicProcess.cc \
	decompositionProcess.cc \
	applicationProcess.cc \
	strategicSearch.cc \
	sharedRewriteSearchState.cc \
	matchProcess.cc \
	rewriteTask.cc \
	strategyStackManager.cc

noinst_HEADERS = \
	strategyLanguage.hh \
	strategyExpression.hh \
	trivialStrategy.hh \
	applicationStrategy.hh \
	concatenationStrategy.hh \
	iterationStrategy.hh \
	branchStrategy.hh \
	unionStrategy.hh \
	testStrategy.hh \
	strategicExecution.hh \
	strategicTask.hh \
	branchTask.hh \
	strategicProcess.hh \
	decompositionProcess.hh \
	applicationProcess.hh \
	strategicSearch.hh \
	sharedRewriteSearchState.hh \
	matchProcess.hh \
	rewriteTask.hh \
	strategyStackManager.hh

all: all-am

.SUFFIXES:
.SUFFIXES: .cc .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  src/StrategyLanguage/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  src/StrategyLanguage/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

clean-noinstLIBRARIES:
	-test -z "$(noinst_LIBRARIES)" || rm -f $(noinst_LIBRARIES)
libstrategyLanguage.a: $(libstrategyLanguage_a_OBJECTS) $(libstrategyLanguage_a_DEPENDENCIES) 
	-rm -f libstrategyLanguage.a
	$(libstrategyLanguage_a_AR) libstrategyLanguage.a $(libstrategyLanguage_a_OBJECTS) $(libstrategyLanguage_a_LIBADD)
	$(RANLIB) libstrategyLanguage.a

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/libstrategyLanguage_a-applicationProcess.Po
include ./$(DEPDIR)/libstrategyLanguage_a-applicationStrategy.Po
include ./$(DEPDIR)/libstrategyLanguage_a-branchStrategy.Po
include ./$(DEPDIR)/libstrategyLanguage_a-branchTask.Po
include ./$(DEPDIR)/libstrategyLanguage_a-concatenationStrategy.Po
include ./$(DEPDIR)/libstrategyLanguage_a-decompositionProcess.Po
include ./$(DEPDIR)/libstrategyLanguage_a-iterationStrategy.Po
include ./$(DEPDIR)/libstrategyLanguage_a-matchProcess.Po
include ./$(DEPDIR)/libstrategyLanguage_a-rewriteTask.Po
include ./$(DEPDIR)/libstrategyLanguage_a-sharedRewriteSearchState.Po
include ./$(DEPDIR)/libstrategyLanguage_a-strategicExecution.Po
include ./$(DEPDIR)/libstrategyLanguage_a-strategicProcess.Po
include ./$(DEPDIR)/libstrategyLanguage_a-strategicSearch.Po
include ./$(DEPDIR)/libstrategyLanguage_a-strategicTask.Po
include ./$(DEPDIR)/libstrategyLanguage_a-strategyStackManager.Po
include ./$(DEPDIR)/libstrategyLanguage_a-testStrategy.Po
include ./$(DEPDIR)/libstrategyLanguage_a-trivialStrategy.Po
include ./$(DEPDIR)/libstrategyLanguage_a-unionStrategy.Po

.cc.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cc.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

libstrategyLanguage_a-trivialStrategy.o: trivialStrategy.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-trivialStrategy.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-trivialStrategy.Tpo -c -o libstrategyLanguage_a-trivialStrategy.o `test -f 'trivialStrategy.cc' || echo '$(srcdir)/'`trivialStrategy.cc
	mv -f $(DEPDIR)/libstrategyLanguage_a-trivialStrategy.Tpo $(DEPDIR)/libstrategyLanguage_a-trivialStrategy.Po
#	source='trivialStrategy.cc' object='libstrategyLanguage_a-trivialStrategy.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-trivialStrategy.o `test -f 'trivialStrategy.cc' || echo '$(srcdir)/'`trivialStrategy.cc

libstrategyLanguage_a-trivialStrategy.obj: trivialStrategy.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-trivialStrategy.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-trivialStrategy.Tpo -c -o libstrategyLanguage_a-trivialStrategy.obj `if test -f 'trivialStrategy.cc'; then $(CYGPATH_W) 'trivialStrategy.cc'; else $(CYGPATH_W) '$(srcdir)/trivialStrategy.cc'; fi`
	mv -f $(DEPDIR)/libstrategyLanguage_a-trivialStrategy.Tpo $(DEPDIR)/libstrategyLanguage_a-trivialStrategy.Po
#	source='trivialStrategy.cc' object='libstrategyLanguage_a-trivialStrategy.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-trivialStrategy.obj `if test -f 'trivialStrategy.cc'; then $(CYGPATH_W) 'trivialStrategy.cc'; else $(CYGPATH_W) '$(srcdir)/trivialStrategy.cc'; fi`

libstrategyLanguage_a-applicationStrategy.o: applicationStrategy.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-applicationStrategy.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-applicationStrategy.Tpo -c -o libstrategyLanguage_a-applicationStrategy.o `test -f 'applicationStrategy.cc' || echo '$(srcdir)/'`applicationStrategy.cc
	mv -f $(DEPDIR)/libstrategyLanguage_a-applicationStrategy.Tpo $(DEPDIR)/libstrategyLanguage_a-applicationStrategy.Po
#	source='applicationStrategy.cc' object='libstrategyLanguage_a-applicationStrategy.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-applicationStrategy.o `test -f 'applicationStrategy.cc' || echo '$(srcdir)/'`applicationStrategy.cc

libstrategyLanguage_a-applicationStrategy.obj: applicationStrategy.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-applicationStrategy.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-applicationStrategy.Tpo -c -o libstrategyLanguage_a-applicationStrategy.obj `if test -f 'applicationStrategy.cc'; then $(CYGPATH_W) 'applicationStrategy.cc'; else $(CYGPATH_W) '$(srcdir)/applicationStrategy.cc'; fi`
	mv -f $(DEPDIR)/libstrategyLanguage_a-applicationStrategy.Tpo $(DEPDIR)/libstrategyLanguage_a-applicationStrategy.Po
#	source='applicationStrategy.cc' object='libstrategyLanguage_a-applicationStrategy.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-applicationStrategy.obj `if test -f 'applicationStrategy.cc'; then $(CYGPATH_W) 'applicationStrategy.cc'; else $(CYGPATH_W) '$(srcdir)/applicationStrategy.cc'; fi`

libstrategyLanguage_a-concatenationStrategy.o: concatenationStrategy.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-concatenationStrategy.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-concatenationStrategy.Tpo -c -o libstrategyLanguage_a-concatenationStrategy.o `test -f 'concatenationStrategy.cc' || echo '$(srcdir)/'`concatenationStrategy.cc
	mv -f $(DEPDIR)/libstrategyLanguage_a-concatenationStrategy.Tpo $(DEPDIR)/libstrategyLanguage_a-concatenationStrategy.Po
#	source='concatenationStrategy.cc' object='libstrategyLanguage_a-concatenationStrategy.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-concatenationStrategy.o `test -f 'concatenationStrategy.cc' || echo '$(srcdir)/'`concatenationStrategy.cc

libstrategyLanguage_a-concatenationStrategy.obj: concatenationStrategy.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-concatenationStrategy.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-concatenationStrategy.Tpo -c -o libstrategyLanguage_a-concatenationStrategy.obj `if test -f 'concatenationStrategy.cc'; then $(CYGPATH_W) 'concatenationStrategy.cc'; else $(CYGPATH_W) '$(srcdir)/concatenationStrategy.cc'; fi`
	mv -f $(DEPDIR)/libstrategyLanguage_a-concatenationStrategy.Tpo $(DEPDIR)/libstrategyLanguage_a-concatenationStrategy.Po
#	source='concatenationStrategy.cc' object='libstrategyLanguage_a-concatenationStrategy.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-concatenationStrategy.obj `if test -f 'concatenationStrategy.cc'; then $(CYGPATH_W) 'concatenationStrategy.cc'; else $(CYGPATH_W) '$(srcdir)/concatenationStrategy.cc'; fi`

libstrategyLanguage_a-iterationStrategy.o: iterationStrategy.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-iterationStrategy.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-iterationStrategy.Tpo -c -o libstrategyLanguage_a-iterationStrategy.o `test -f 'iterationStrategy.cc' || echo '$(srcdir)/'`iterationStrategy.cc
	mv -f $(DEPDIR)/libstrategyLanguage_a-iterationStrategy.Tpo $(DEPDIR)/libstrategyLanguage_a-iterationStrategy.Po
#	source='iterationStrategy.cc' object='libstrategyLanguage_a-iterationStrategy.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-iterationStrategy.o `test -f 'iterationStrategy.cc' || echo '$(srcdir)/'`iterationStrategy.cc

libstrategyLanguage_a-iterationStrategy.obj: iterationStrategy.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-iterationStrategy.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-iterationStrategy.Tpo -c -o libstrategyLanguage_a-iterationStrategy.obj `if test -f 'iterationStrategy.cc'; then $(CYGPATH_W) 'iterationStrategy.cc'; else $(CYGPATH_W) '$(srcdir)/iterationStrategy.cc'; fi`
	mv -f $(DEPDIR)/libstrategyLanguage_a-iterationStrategy.Tpo $(DEPDIR)/libstrategyLanguage_a-iterationStrategy.Po
#	source='iterationStrategy.cc' object='libstrategyLanguage_a-iterationStrategy.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-iterationStrategy.obj `if test -f 'iterationStrategy.cc'; then $(CYGPATH_W) 'iterationStrategy.cc'; else $(CYGPATH_W) '$(srcdir)/iterationStrategy.cc'; fi`

libstrategyLanguage_a-branchStrategy.o: branchStrategy.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-branchStrategy.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-branchStrategy.Tpo -c -o libstrategyLanguage_a-branchStrategy.o `test -f 'branchStrategy.cc' || echo '$(srcdir)/'`branchStrategy.cc
	mv -f $(DEPDIR)/libstrategyLanguage_a-branchStrategy.Tpo $(DEPDIR)/libstrategyLanguage_a-branchStrategy.Po
#	source='branchStrategy.cc' object='libstrategyLanguage_a-branchStrategy.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-branchStrategy.o `test -f 'branchStrategy.cc' || echo '$(srcdir)/'`branchStrategy.cc

libstrategyLanguage_a-branchStrategy.obj: branchStrategy.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-branchStrategy.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-branchStrategy.Tpo -c -o libstrategyLanguage_a-branchStrategy.obj `if test -f 'branchStrategy.cc'; then $(CYGPATH_W) 'branchStrategy.cc'; else $(CYGPATH_W) '$(srcdir)/branchStrategy.cc'; fi`
	mv -f $(DEPDIR)/libstrategyLanguage_a-branchStrategy.Tpo $(DEPDIR)/libstrategyLanguage_a-branchStrategy.Po
#	source='branchStrategy.cc' object='libstrategyLanguage_a-branchStrategy.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-branchStrategy.obj `if test -f 'branchStrategy.cc'; then $(CYGPATH_W) 'branchStrategy.cc'; else $(CYGPATH_W) '$(srcdir)/branchStrategy.cc'; fi`

libstrategyLanguage_a-unionStrategy.o: unionStrategy.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-unionStrategy.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-unionStrategy.Tpo -c -o libstrategyLanguage_a-unionStrategy.o `test -f 'unionStrategy.cc' || echo '$(srcdir)/'`unionStrategy.cc
	mv -f $(DEPDIR)/libstrategyLanguage_a-unionStrategy.Tpo $(DEPDIR)/libstrategyLanguage_a-unionStrategy.Po
#	source='unionStrategy.cc' object='libstrategyLanguage_a-unionStrategy.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-unionStrategy.o `test -f 'unionStrategy.cc' || echo '$(srcdir)/'`unionStrategy.cc

libstrategyLanguage_a-unionStrategy.obj: unionStrategy.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-unionStrategy.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-unionStrategy.Tpo -c -o libstrategyLanguage_a-unionStrategy.obj `if test -f 'unionStrategy.cc'; then $(CYGPATH_W) 'unionStrategy.cc'; else $(CYGPATH_W) '$(srcdir)/unionStrategy.cc'; fi`
	mv -f $(DEPDIR)/libstrategyLanguage_a-unionStrategy.Tpo $(DEPDIR)/libstrategyLanguage_a-unionStrategy.Po
#	source='unionStrategy.cc' object='libstrategyLanguage_a-unionStrategy.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-unionStrategy.obj `if test -f 'unionStrategy.cc'; then $(CYGPATH_W) 'unionStrategy.cc'; else $(CYGPATH_W) '$(srcdir)/unionStrategy.cc'; fi`

libstrategyLanguage_a-testStrategy.o: testStrategy.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-testStrategy.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-testStrategy.Tpo -c -o libstrategyLanguage_a-testStrategy.o `test -f 'testStrategy.cc' || echo '$(srcdir)/'`testStrategy.cc
	mv -f $(DEPDIR)/libstrategyLanguage_a-testStrategy.Tpo $(DEPDIR)/libstrategyLanguage_a-testStrategy.Po
#	source='testStrategy.cc' object='libstrategyLanguage_a-testStrategy.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-testStrategy.o `test -f 'testStrategy.cc' || echo '$(srcdir)/'`testStrategy.cc

libstrategyLanguage_a-testStrategy.obj: testStrategy.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-testStrategy.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-testStrategy.Tpo -c -o libstrategyLanguage_a-testStrategy.obj `if test -f 'testStrategy.cc'; then $(CYGPATH_W) 'testStrategy.cc'; else $(CYGPATH_W) '$(srcdir)/testStrategy.cc'; fi`
	mv -f $(DEPDIR)/libstrategyLanguage_a-testStrategy.Tpo $(DEPDIR)/libstrategyLanguage_a-testStrategy.Po
#	source='testStrategy.cc' object='libstrategyLanguage_a-testStrategy.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-testStrategy.obj `if test -f 'testStrategy.cc'; then $(CYGPATH_W) 'testStrategy.cc'; else $(CYGPATH_W) '$(srcdir)/testStrategy.cc'; fi`

libstrategyLanguage_a-strategicExecution.o: strategicExecution.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-strategicExecution.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-strategicExecution.Tpo -c -o libstrategyLanguage_a-strategicExecution.o `test -f 'strategicExecution.cc' || echo '$(srcdir)/'`strategicExecution.cc
	mv -f $(DEPDIR)/libstrategyLanguage_a-strategicExecution.Tpo $(DEPDIR)/libstrategyLanguage_a-strategicExecution.Po
#	source='strategicExecution.cc' object='libstrategyLanguage_a-strategicExecution.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-strategicExecution.o `test -f 'strategicExecution.cc' || echo '$(srcdir)/'`strategicExecution.cc

libstrategyLanguage_a-strategicExecution.obj: strategicExecution.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-strategicExecution.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-strategicExecution.Tpo -c -o libstrategyLanguage_a-strategicExecution.obj `if test -f 'strategicExecution.cc'; then $(CYGPATH_W) 'strategicExecution.cc'; else $(CYGPATH_W) '$(srcdir)/strategicExecution.cc'; fi`
	mv -f $(DEPDIR)/libstrategyLanguage_a-strategicExecution.Tpo $(DEPDIR)/libstrategyLanguage_a-strategicExecution.Po
#	source='strategicExecution.cc' object='libstrategyLanguage_a-strategicExecution.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-strategicExecution.obj `if test -f 'strategicExecution.cc'; then $(CYGPATH_W) 'strategicExecution.cc'; else $(CYGPATH_W) '$(srcdir)/strategicExecution.cc'; fi`

libstrategyLanguage_a-strategicTask.o: strategicTask.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-strategicTask.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-strategicTask.Tpo -c -o libstrategyLanguage_a-strategicTask.o `test -f 'strategicTask.cc' || echo '$(srcdir)/'`strategicTask.cc
	mv -f $(DEPDIR)/libstrategyLanguage_a-strategicTask.Tpo $(DEPDIR)/libstrategyLanguage_a-strategicTask.Po
#	source='strategicTask.cc' object='libstrategyLanguage_a-strategicTask.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-strategicTask.o `test -f 'strategicTask.cc' || echo '$(srcdir)/'`strategicTask.cc

libstrategyLanguage_a-strategicTask.obj: strategicTask.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-strategicTask.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-strategicTask.Tpo -c -o libstrategyLanguage_a-strategicTask.obj `if test -f 'strategicTask.cc'; then $(CYGPATH_W) 'strategicTask.cc'; else $(CYGPATH_W) '$(srcdir)/strategicTask.cc'; fi`
	mv -f $(DEPDIR)/libstrategyLanguage_a-strategicTask.Tpo $(DEPDIR)/libstrategyLanguage_a-strategicTask.Po
#	source='strategicTask.cc' object='libstrategyLanguage_a-strategicTask.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-strategicTask.obj `if test -f 'strategicTask.cc'; then $(CYGPATH_W) 'strategicTask.cc'; else $(CYGPATH_W) '$(srcdir)/strategicTask.cc'; fi`

libstrategyLanguage_a-branchTask.o: branchTask.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-branchTask.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-branchTask.Tpo -c -o libstrategyLanguage_a-branchTask.o `test -f 'branchTask.cc' || echo '$(srcdir)/'`branchTask.cc
	mv -f $(DEPDIR)/libstrategyLanguage_a-branchTask.Tpo $(DEPDIR)/libstrategyLanguage_a-branchTask.Po
#	source='branchTask.cc' object='libstrategyLanguage_a-branchTask.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-branchTask.o `test -f 'branchTask.cc' || echo '$(srcdir)/'`branchTask.cc

libstrategyLanguage_a-branchTask.obj: branchTask.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-branchTask.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-branchTask.Tpo -c -o libstrategyLanguage_a-branchTask.obj `if test -f 'branchTask.cc'; then $(CYGPATH_W) 'branchTask.cc'; else $(CYGPATH_W) '$(srcdir)/branchTask.cc'; fi`
	mv -f $(DEPDIR)/libstrategyLanguage_a-branchTask.Tpo $(DEPDIR)/libstrategyLanguage_a-branchTask.Po
#	source='branchTask.cc' object='libstrategyLanguage_a-branchTask.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-branchTask.obj `if test -f 'branchTask.cc'; then $(CYGPATH_W) 'branchTask.cc'; else $(CYGPATH_W) '$(srcdir)/branchTask.cc'; fi`

libstrategyLanguage_a-strategicProcess.o: strategicProcess.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-strategicProcess.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-strategicProcess.Tpo -c -o libstrategyLanguage_a-strategicProcess.o `test -f 'strategicProcess.cc' || echo '$(srcdir)/'`strategicProcess.cc
	mv -f $(DEPDIR)/libstrategyLanguage_a-strategicProcess.Tpo $(DEPDIR)/libstrategyLanguage_a-strategicProcess.Po
#	source='strategicProcess.cc' object='libstrategyLanguage_a-strategicProcess.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-strategicProcess.o `test -f 'strategicProcess.cc' || echo '$(srcdir)/'`strategicProcess.cc

libstrategyLanguage_a-strategicProcess.obj: strategicProcess.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-strategicProcess.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-strategicProcess.Tpo -c -o libstrategyLanguage_a-strategicProcess.obj `if test -f 'strategicProcess.cc'; then $(CYGPATH_W) 'strategicProcess.cc'; else $(CYGPATH_W) '$(srcdir)/strategicProcess.cc'; fi`
	mv -f $(DEPDIR)/libstrategyLanguage_a-strategicProcess.Tpo $(DEPDIR)/libstrategyLanguage_a-strategicProcess.Po
#	source='strategicProcess.cc' object='libstrategyLanguage_a-strategicProcess.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-strategicProcess.obj `if test -f 'strategicProcess.cc'; then $(CYGPATH_W) 'strategicProcess.cc'; else $(CYGPATH_W) '$(srcdir)/strategicProcess.cc'; fi`

libstrategyLanguage_a-decompositionProcess.o: decompositionProcess.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-decompositionProcess.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-decompositionProcess.Tpo -c -o libstrategyLanguage_a-decompositionProcess.o `test -f 'decompositionProcess.cc' || echo '$(srcdir)/'`decompositionProcess.cc
	mv -f $(DEPDIR)/libstrategyLanguage_a-decompositionProcess.Tpo $(DEPDIR)/libstrategyLanguage_a-decompositionProcess.Po
#	source='decompositionProcess.cc' object='libstrategyLanguage_a-decompositionProcess.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-decompositionProcess.o `test -f 'decompositionProcess.cc' || echo '$(srcdir)/'`decompositionProcess.cc

libstrategyLanguage_a-decompositionProcess.obj: decompositionProcess.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-decompositionProcess.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-decompositionProcess.Tpo -c -o libstrategyLanguage_a-decompositionProcess.obj `if test -f 'decompositionProcess.cc'; then $(CYGPATH_W) 'decompositionProcess.cc'; else $(CYGPATH_W) '$(srcdir)/decompositionProcess.cc'; fi`
	mv -f $(DEPDIR)/libstrategyLanguage_a-decompositionProcess.Tpo $(DEPDIR)/libstrategyLanguage_a-decompositionProcess.Po
#	source='decompositionProcess.cc' object='libstrategyLanguage_a-decompositionProcess.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-decompositionProcess.obj `if test -f 'decompositionProcess.cc'; then $(CYGPATH_W) 'decompositionProcess.cc'; else $(CYGPATH_W) '$(srcdir)/decompositionProcess.cc'; fi`

libstrategyLanguage_a-applicationProcess.o: applicationProcess.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-applicationProcess.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-applicationProcess.Tpo -c -o libstrategyLanguage_a-applicationProcess.o `test -f 'applicationProcess.cc' || echo '$(srcdir)/'`applicationProcess.cc
	mv -f $(DEPDIR)/libstrategyLanguage_a-applicationProcess.Tpo $(DEPDIR)/libstrategyLanguage_a-applicationProcess.Po
#	source='applicationProcess.cc' object='libstrategyLanguage_a-applicationProcess.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-applicationProcess.o `test -f 'applicationProcess.cc' || echo '$(srcdir)/'`applicationProcess.cc

libstrategyLanguage_a-applicationProcess.obj: applicationProcess.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-applicationProcess.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-applicationProcess.Tpo -c -o libstrategyLanguage_a-applicationProcess.obj `if test -f 'applicationProcess.cc'; then $(CYGPATH_W) 'applicationProcess.cc'; else $(CYGPATH_W) '$(srcdir)/applicationProcess.cc'; fi`
	mv -f $(DEPDIR)/libstrategyLanguage_a-applicationProcess.Tpo $(DEPDIR)/libstrategyLanguage_a-applicationProcess.Po
#	source='applicationProcess.cc' object='libstrategyLanguage_a-applicationProcess.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-applicationProcess.obj `if test -f 'applicationProcess.cc'; then $(CYGPATH_W) 'applicationProcess.cc'; else $(CYGPATH_W) '$(srcdir)/applicationProcess.cc'; fi`

libstrategyLanguage_a-strategicSearch.o: strategicSearch.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-strategicSearch.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-strategicSearch.Tpo -c -o libstrategyLanguage_a-strategicSearch.o `test -f 'strategicSearch.cc' || echo '$(srcdir)/'`strategicSearch.cc
	mv -f $(DEPDIR)/libstrategyLanguage_a-strategicSearch.Tpo $(DEPDIR)/libstrategyLanguage_a-strategicSearch.Po
#	source='strategicSearch.cc' object='libstrategyLanguage_a-strategicSearch.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-strategicSearch.o `test -f 'strategicSearch.cc' || echo '$(srcdir)/'`strategicSearch.cc

libstrategyLanguage_a-strategicSearch.obj: strategicSearch.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-strategicSearch.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-strategicSearch.Tpo -c -o libstrategyLanguage_a-strategicSearch.obj `if test -f 'strategicSearch.cc'; then $(CYGPATH_W) 'strategicSearch.cc'; else $(CYGPATH_W) '$(srcdir)/strategicSearch.cc'; fi`
	mv -f $(DEPDIR)/libstrategyLanguage_a-strategicSearch.Tpo $(DEPDIR)/libstrategyLanguage_a-strategicSearch.Po
#	source='strategicSearch.cc' object='libstrategyLanguage_a-strategicSearch.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-strategicSearch.obj `if test -f 'strategicSearch.cc'; then $(CYGPATH_W) 'strategicSearch.cc'; else $(CYGPATH_W) '$(srcdir)/strategicSearch.cc'; fi`

libstrategyLanguage_a-sharedRewriteSearchState.o: sharedRewriteSearchState.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-sharedRewriteSearchState.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-sharedRewriteSearchState.Tpo -c -o libstrategyLanguage_a-sharedRewriteSearchState.o `test -f 'sharedRewriteSearchState.cc' || echo '$(srcdir)/'`sharedRewriteSearchState.cc
	mv -f $(DEPDIR)/libstrategyLanguage_a-sharedRewriteSearchState.Tpo $(DEPDIR)/libstrategyLanguage_a-sharedRewriteSearchState.Po
#	source='sharedRewriteSearchState.cc' object='libstrategyLanguage_a-sharedRewriteSearchState.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-sharedRewriteSearchState.o `test -f 'sharedRewriteSearchState.cc' || echo '$(srcdir)/'`sharedRewriteSearchState.cc

libstrategyLanguage_a-sharedRewriteSearchState.obj: sharedRewriteSearchState.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-sharedRewriteSearchState.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-sharedRewriteSearchState.Tpo -c -o libstrategyLanguage_a-sharedRewriteSearchState.obj `if test -f 'sharedRewriteSearchState.cc'; then $(CYGPATH_W) 'sharedRewriteSearchState.cc'; else $(CYGPATH_W) '$(srcdir)/sharedRewriteSearchState.cc'; fi`
	mv -f $(DEPDIR)/libstrategyLanguage_a-sharedRewriteSearchState.Tpo $(DEPDIR)/libstrategyLanguage_a-sharedRewriteSearchState.Po
#	source='sharedRewriteSearchState.cc' object='libstrategyLanguage_a-sharedRewriteSearchState.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-sharedRewriteSearchState.obj `if test -f 'sharedRewriteSearchState.cc'; then $(CYGPATH_W) 'sharedRewriteSearchState.cc'; else $(CYGPATH_W) '$(srcdir)/sharedRewriteSearchState.cc'; fi`

libstrategyLanguage_a-matchProcess.o: matchProcess.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-matchProcess.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-matchProcess.Tpo -c -o libstrategyLanguage_a-matchProcess.o `test -f 'matchProcess.cc' || echo '$(srcdir)/'`matchProcess.cc
	mv -f $(DEPDIR)/libstrategyLanguage_a-matchProcess.Tpo $(DEPDIR)/libstrategyLanguage_a-matchProcess.Po
#	source='matchProcess.cc' object='libstrategyLanguage_a-matchProcess.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-matchProcess.o `test -f 'matchProcess.cc' || echo '$(srcdir)/'`matchProcess.cc

libstrategyLanguage_a-matchProcess.obj: matchProcess.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-matchProcess.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-matchProcess.Tpo -c -o libstrategyLanguage_a-matchProcess.obj `if test -f 'matchProcess.cc'; then $(CYGPATH_W) 'matchProcess.cc'; else $(CYGPATH_W) '$(srcdir)/matchProcess.cc'; fi`
	mv -f $(DEPDIR)/libstrategyLanguage_a-matchProcess.Tpo $(DEPDIR)/libstrategyLanguage_a-matchProcess.Po
#	source='matchProcess.cc' object='libstrategyLanguage_a-matchProcess.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-matchProcess.obj `if test -f 'matchProcess.cc'; then $(CYGPATH_W) 'matchProcess.cc'; else $(CYGPATH_W) '$(srcdir)/matchProcess.cc'; fi`

libstrategyLanguage_a-rewriteTask.o: rewriteTask.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-rewriteTask.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-rewriteTask.Tpo -c -o libstrategyLanguage_a-rewriteTask.o `test -f 'rewriteTask.cc' || echo '$(srcdir)/'`rewriteTask.cc
	mv -f $(DEPDIR)/libstrategyLanguage_a-rewriteTask.Tpo $(DEPDIR)/libstrategyLanguage_a-rewriteTask.Po
#	source='rewriteTask.cc' object='libstrategyLanguage_a-rewriteTask.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-rewriteTask.o `test -f 'rewriteTask.cc' || echo '$(srcdir)/'`rewriteTask.cc

libstrategyLanguage_a-rewriteTask.obj: rewriteTask.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-rewriteTask.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-rewriteTask.Tpo -c -o libstrategyLanguage_a-rewriteTask.obj `if test -f 'rewriteTask.cc'; then $(CYGPATH_W) 'rewriteTask.cc'; else $(CYGPATH_W) '$(srcdir)/rewriteTask.cc'; fi`
	mv -f $(DEPDIR)/libstrategyLanguage_a-rewriteTask.Tpo $(DEPDIR)/libstrategyLanguage_a-rewriteTask.Po
#	source='rewriteTask.cc' object='libstrategyLanguage_a-rewriteTask.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-rewriteTask.obj `if test -f 'rewriteTask.cc'; then $(CYGPATH_W) 'rewriteTask.cc'; else $(CYGPATH_W) '$(srcdir)/rewriteTask.cc'; fi`

libstrategyLanguage_a-strategyStackManager.o: strategyStackManager.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-strategyStackManager.o -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-strategyStackManager.Tpo -c -o libstrategyLanguage_a-strategyStackManager.o `test -f 'strategyStackManager.cc' || echo '$(srcdir)/'`strategyStackManager.cc
	mv -f $(DEPDIR)/libstrategyLanguage_a-strategyStackManager.Tpo $(DEPDIR)/libstrategyLanguage_a-strategyStackManager.Po
#	source='strategyStackManager.cc' object='libstrategyLanguage_a-strategyStackManager.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-strategyStackManager.o `test -f 'strategyStackManager.cc' || echo '$(srcdir)/'`strategyStackManager.cc

libstrategyLanguage_a-strategyStackManager.obj: strategyStackManager.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT libstrategyLanguage_a-strategyStackManager.obj -MD -MP -MF $(DEPDIR)/libstrategyLanguage_a-strategyStackManager.Tpo -c -o libstrategyLanguage_a-strategyStackManager.obj `if test -f 'strategyStackManager.cc'; then $(CYGPATH_W) 'strategyStackManager.cc'; else $(CYGPATH_W) '$(srcdir)/strategyStackManager.cc'; fi`
	mv -f $(DEPDIR)/libstrategyLanguage_a-strategyStackManager.Tpo $(DEPDIR)/libstrategyLanguage_a-strategyStackManager.Po
#	source='strategyStackManager.cc' object='libstrategyLanguage_a-strategyStackManager.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libstrategyLanguage_a_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o libstrategyLanguage_a-strategyStackManager.obj `if test -f 'strategyStackManager.cc'; then $(CYGPATH_W) 'strategyStackManager.cc'; else $(CYGPATH_W) '$(srcdir)/strategyStackManager.cc'; fi`

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LIBRARIES) $(HEADERS)
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-noinstLIBRARIES mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-exec-am:

install-html: install-html-am

install-info: install-info-am

install-man:

install-pdf: install-pdf-am

install-ps: install-ps-am

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-noinstLIBRARIES ctags distclean distclean-compile \
	distclean-generic distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags uninstall \
	uninstall-am

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
