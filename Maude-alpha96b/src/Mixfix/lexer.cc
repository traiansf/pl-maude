
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 207
#define YY_END_OF_BUFFER 208
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1268] =
    {   0,
      204,  204,  204,  204,  204,  204,  204,  204,  204,  204,
      204,  204,  204,  204,    0,    0,    0,    0,  195,  195,
        0,    0,  208,  206,  204,  205,  205,  103,  206,  101,
      103,  103,  103,  101,  102,  102,  103,  206,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,   15,  103,  103,  103,  103,  103,  103,  103,
      163,  206,  161,  161,  161,  163,  161,  161,  163,  206,
      163,  163,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  109,  206,
      105,  109,  109,  107,  106,  105,  109,  206,  109,  107,

      111,  111,  110,  111,  111,  111,  111,  178,  206,  173,
      174,  178,  165,  178,  176,  164,  168,  166,  167,  178,
      206,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  175,  183,  183,  183,  183,  183,
      181,  183,  183,  183,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  183,  204,  180,  206,  205,  189,  190,
      191,  184,  188,  193,  192,  194,  195,  196,  203,  197,
      202,  202,  198,  199,  197,  200,  201,  204,  103,    0,
      103,    0,    0,    0,  103,  103,  102,    0,  103,  103,
      103,  103,  103,  103,  103,   11,  103,  103,  103,  103,

      103,   44,  103,  103,   78,  103,  103,  103,  103,  103,
      103,  103,   65,  103,  103,    5,  103,  103,  103,   14,
      103,   77,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,   39,   75,  103,  103,  103,  103,  103,  103,
      103,  103,   79,  103,  103,  103,  103,  103,  103,  103,
      103,    6,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  163,    0,  162,  163,    0,    0,    0,  163,
      163,  157,  160,  158,    0,  163,  163,  163,  163,  163,
      152,  163,  163,  163,  163,  151,  140,  163,  163,  163,
      163,  139,  163,  138,  163,  163,  163,  163,  149,  163,

      163,  163,  145,  163,  140,  163,  153,  163,  163,  163,
      163,  163,  112,  140,  163,  159,  109,    0,  108,  109,
        0,    0,    0,  109,  109,    0,  104,  106,    0,    5,
      204,  110,    0,    0,    0,    0,    0,  178,    0,  177,
      178,    0,    0,    0,  178,  178,  169,    0,  178,  178,
      178,  178,  178,  178,  178,  178,  171,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  170,  183,
        0,  182,  183,    0,    0,    0,  183,  183,    0,  183,
      183,  183,  179,  183,  183,  179,  183,  183,  183,  179,
      179,  183,  183,  179,  183,  204,  180,    0,    0,    0,

      189,  185,  186,  187,  193,  195,  197,  197,  103,    0,
        2,    2,  103,  103,  103,   70,  103,  103,  103,  103,
      103,   69,  103,  103,  103,  103,  103,  103,  103,  103,
       16,   78,  103,  103,  103,  103,  103,  103,  103,   30,
      103,  103,  103,  103,  103,  103,  103,   77,  103,  103,
        6,   28,  103,  103,  103,   40,  103,   75,  103,  103,
      103,  103,  103,  103,   10,  103,  100,   19,  103,  103,
       22,   79,  103,  103,  103,   37,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,   76,  103,  103,
      103,  103,  103,  103,  103,  163,    0,    2,    2,  163,

      163,  150,  163,  163,  154,  163,  163,  163,  163,  163,
      163,  163,  163,  117,  163,  140,  163,  155,  163,  163,
      163,  163,  163,  163,  133,  132,  163,  146,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  148,  109,
        0,    2,    2,    0,    0,    0,    0,    2,    2,  178,
        0,    2,    2,  178,  178,  178,  178,  178,  178,  178,
      178,  172,  178,  178,  178,  178,  178,  178,  178,  172,
      178,  178,  178,  178,  178,  183,    0,    2,    2,  183,
      183,  183,  179,  179,  183,  183,  183,  183,  179,    0,
        0,    0,    0,    2,    2,    2,    1,    2,    2,  103,

      103,  103,   56,   46,  103,  103,  103,  103,  103,  103,
      103,   53,   27,  103,   20,  103,  103,   93,   23,  103,
      103,   61,  103,   24,  103,  103,  103,  103,    9,   26,
      103,    3,  103,  103,  103,  103,   18,  103,    7,  103,
      103,   96,   13,  103,  103,  103,  103,   15,  103,  103,
      103,  103,  103,   79,  103,  103,   38,   74,   21,   25,
      103,   91,  103,  103,   66,  103,  103,  103,  103,   76,
      103,    8,  103,  103,   62,  103,  103,    0,    0,    2,
        2,    2,    1,    2,    2,  163,  163,  116,  163,  163,
      128,  163,  163,  155,  163,  163,  156,  163,  163,  113,

      163,  163,  163,  118,  163,  163,  119,  163,  163,  120,
        3,  163,  163,  147,  163,  163,  127,  122,  163,  163,
      141,  163,  163,  163,  163,  163,  163,  148,    0,    0,
        2,    2,    2,    1,    2,    2,    0,    0,    1,    0,
        0,    2,    2,    2,    1,    2,    2,  178,  172,  178,
      178,  178,  178,  178,  178,  172,  178,  172,  178,  178,
      178,  178,  172,  172,  178,  178,  178,    0,    0,    2,
        2,    2,    1,    2,    2,  183,  183,  179,  179,  183,
      183,  183,  183,  183,  179,  183,  183,  183,    2,    2,
        1,    1,    1,    1,    1,    2,    2,    2,   90,  103,

       64,  103,   94,  103,   45,   58,  103,  103,  103,  103,
      103,  103,   83,  103,   88,  103,  103,  103,  103,  103,
      103,  103,   59,  103,   81,   97,   33,  103,  103,  103,
      103,  103,  103,   63,   17,   55,  103,  103,   12,  103,
      103,  103,  103,  103,  103,  103,   74,  103,  103,   67,
       54,  103,  103,   41,   36,  103,  103,   73,   92,   48,
      103,  103,    2,    2,    1,    1,    1,    1,    1,    2,
        2,    2,  115,  143,  163,  163,  163,  134,  163,  163,
      163,  163,  163,  163,  163,  163,  163,  163,  114,  129,
      163,  163,  163,  163,  163,  163,  163,  121,  141,  163,

      125,  163,  163,  163,  140,    2,    2,    1,    1,    1,
        1,    1,    2,    2,    2,    2,    2,    1,    1,    1,
        1,    1,    2,    2,    2,  172,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  172,    2,    2,    1,    1,    1,    1,    1,    2,
        2,    2,  179,  183,  183,  183,  183,  183,  183,    1,
        1,    1,    1,    1,    2,    2,   42,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,   85,  103,    4,  103,  103,   97,   60,   72,
       28,  103,  103,   99,   63,  103,  103,  103,  103,   19,

       89,   52,  103,   35,   49,  103,  103,  103,  103,   68,
      103,  103,  103,   34,    1,    1,    1,    1,    1,    2,
        2,  163,  163,  131,  163,  163,    4,  126,  123,  163,
      163,  163,  163,  163,  163,  163,  132,  163,  163,  163,
      163,  163,  163,  163,  163,  163,    1,    1,    1,    1,
        1,    2,    2,    1,    1,    1,    1,    1,    2,    2,
      178,  178,  172,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,    1,    1,    1,    1,    1,    2,    2,
      183,  183,  183,  183,  183,  183,    1,    1,  103,   64,
      103,  103,   47,   82,  103,   51,  103,  103,   20,  103,

      103,   87,  103,  103,   86,   71,   57,  103,  103,   98,
       84,  103,   22,   21,  103,  103,   80,   32,   43,  103,
        1,    1,  163,  163,  163,  163,  163,  135,  163,  163,
      163,  163,  133,  163,  136,  163,  163,  163,  130,  163,
      163,  142,  163,    1,    1,    1,    1,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,    1,    1,
      183,  183,  183,  183,  179,  103,  103,  103,   82,  103,
      103,   27,   50,   23,  103,   24,  103,  103,  100,   25,
      103,   31,  103,  163,  163,  163,  163,  163,  163,  163,
      163,  119,  124,  163,  163,  163,  125,  144,  142,  163,

      178,  178,  178,  178,  178,  178,  178,  178,  183,  183,
      183,  179,  103,   56,   95,  103,   53,   61,   18,  103,
      103,   29,  163,  163,  163,  163,  163,  163,  163,  163,
      163,  137,  178,  178,  178,  178,  178,  178,  178,  183,
      183,  103,  103,  163,  163,  163,  163,  118,  163,  122,
      144,  178,  178,  178,  178,  178,  103,  115,  116,  163,
      127,  178,   54,  163,  178,  131,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,    8,    8,    8,    8,    8,   10,
       11,   12,   13,   14,   15,   16,    8,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    8,   13,
       20,   21,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
       22,   23,   24,    8,   25,   26,   27,   28,   29,   30,

       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   13,   54,   55,    1,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56
    } ;

static yyconst flex_int32_t yy_meta[57] =
    {   0,
        1,    2,    3,    1,    3,    3,    4,    5,    6,    7,
        7,    5,    5,    8,    5,    5,    5,    5,    5,    5,
        5,    8,    9,    8,   10,   10,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    7,    7,    5,   11
    } ;

static yyconst flex_int16_t yy_base[1355] =
    {   0,
        0,    0,   56,    0,  112,    0,  167,  181,  196,    0,
      252,    0,  307,    0,  314,  322,  354,  359,  172,  186,
      368,  424,  661, 8439,  174, 8439, 8439,  309,  317, 8439,
      341, 8439,  361,  371,  373,  375,  379,  392,  385,  411,
      423,  434,  445,  459,  465,  447,  457,  490,  493,  513,
      517,  521,  527,  546,  585,  541,  555,  573,  580,  608,
      587,  321, 8439,  611,  619,  633,  637,  648,  651,  661,
      671,  708,  673,  679,  677,  685,  746,  716,  734,  754,
      768,  772,  786,  792,  806,  711,  748,  819,  827,  324,
     8439,  839,  841,  866,  868,  833,  871,  888,  879, 8439,

     8439,  911, 8439,  925,  941,  631,  625,  941,  366, 8439,
     8439,  943, 8439,  945,  949,  963,  969, 8439, 8439,  967,
      986,  989,  995,  993, 1007, 1028, 1033, 1041, 1055, 1066,
     1079, 1081, 1087, 1036, 8439, 8439, 1092,  372, 1110, 1112,
     1115, 1123, 1132, 1178, 1113, 1149, 1151, 1155, 1181, 1186,
     1189, 1209, 1215, 1217, 1259, 8439, 1273, 1287,    0, 8439,
     8439, 8439,  504,    0, 8439, 8439,    0, 8439, 8439,    0,
     8439, 8439, 8439, 8439,  397, 8439, 8439,  188,  613,  403,
      681, 1259,  470,  415,  778, 1084, 1211, 1286,  800,  853,
     1289,  955,  881, 1004,  899,  780, 1223, 1136, 1278, 1297,

     1310,  913, 1317, 1320, 1089, 1322, 1325, 1332, 1335, 1340,
     1354, 1361, 1363, 1365, 1372, 1383, 1391, 1368, 1393, 1396,
     1398, 1401, 1404, 1416, 1423, 1426, 1429, 1431, 1438, 1436,
     1456, 1458, 1460, 1464, 1467, 1470, 1482, 1489, 1494, 1496,
     1501, 1507, 1516, 1519, 1537, 1540, 1544, 1534, 1542, 1562,
     1570, 1565, 1575, 1577, 1585, 1590, 1596, 1598, 1610, 1617,
     1622, 1619, 1640,  514, 1643, 1645, 1663,  560,  436, 1666,
     1674, 1670, 1672, 1685, 1698, 1698, 1710, 1712, 1716, 1724,
     1745, 1749, 1751, 1753, 1764, 1772, 1775, 1786, 1794, 1797,
     1822, 1799, 1820, 1835, 1841, 1843, 1849, 1854, 1862, 1851,

     1873, 1876, 1894, 1891, 1899, 1902, 1917, 1922, 1925, 1928,
     1936, 1949, 1951, 1954, 1962, 1974, 1976,  569, 1982, 1987,
     2000,  578,  438, 2007, 2011, 2036, 8439, 2040, 2007, 2019,
     2065, 8439, 2079,  606,  594,  585,  571, 2079,  579, 2081,
     2083, 2065,  598,  504, 2101, 2105, 2107, 2114, 2125, 2133,
     2128, 2130, 2136, 2162, 2165, 2170, 2168, 2183, 2191, 2196,
     2204, 2209, 2215, 2229, 2237, 2248, 2260, 2262, 2268, 2273,
      642, 2286, 2288, 2306,  643,  530, 2309, 2317, 2326,  968,
     2329, 2337, 2342, 2348, 2362, 2368, 2373, 2381, 2387, 2392,
     2400, 2414, 2418, 2422, 2426, 2457, 8439, 2471,  567,  546,

        0, 8439, 8439, 8439,    0,    0,    0, 8439, 1704,  661,
     2486, 2540, 1722, 1807, 1896, 1830, 2138, 2201, 2037, 2441,
     2283, 2235, 2298, 2459, 2490, 2497, 2479, 2456, 2504, 2517,
     2508, 2522, 2543, 2546, 2548, 2551, 2561, 2573, 2576, 2579,
     2581, 2591, 2594, 2601, 2605, 2612, 2619, 2624, 2627, 2630,
     2632, 2634, 2638, 2656, 2658, 2662, 2664, 2666, 2671, 2684,
     2689, 2695, 2697, 2699, 2702, 2721, 2723, 2725, 2727, 2729,
     2731, 2736, 2754, 2756, 2761, 2764, 2768, 2779, 2782, 2786,
     2788, 2794, 2797, 2801, 2806, 2820, 2829, 2834, 2838, 2842,
     2848, 2856, 2861, 2863, 2871, 2874,  669, 2917, 2971, 2889,

     2920, 2897, 2928, 2879, 2931, 2974, 2943, 2971, 2982, 3005,
     3011, 3013, 3017, 3032, 3036, 3040, 3044, 3055, 3058, 3070,
     3078, 3081, 3083, 3089, 3101, 3104, 3116, 3122, 3127, 3135,
     3140, 3146, 3158, 3166, 3172, 3180, 3185, 3191, 3203, 3211,
      700, 3248, 3302,  539,  526,  517,  510,  493,  491, 3214,
      717, 3356, 3410, 3225, 3217, 3251, 3266, 3262, 3229, 3289,
     3313, 3324, 3336, 3374, 3328, 3370, 3376, 3378, 3413, 3382,
     3421, 3432, 3434, 3440, 3458, 3461,  722, 3487, 3541, 3490,
     3587, 3464, 3498, 3501, 3512, 3523, 3545, 3559, 3563,  498,
      493,  744,  588,    0,  483, 3600, 3635,  364, 3689, 3093,

     3254, 3380, 2923, 2876, 2925, 3534, 2979, 3567, 2951, 3295,
     3589, 3419, 3467, 3591, 3453, 3596, 3615, 3622, 3625, 3629,
     3647, 3649, 3653, 3657, 3682, 3659, 3693, 3695, 3700, 3703,
     3714, 3721, 3725, 3727, 3732, 3736, 3750, 3754, 3757, 3761,
     3763, 3765, 3772, 3783, 3786, 3791, 3793, 3801, 3805, 3811,
     3816, 3823, 3819, 3826, 3834, 3844, 3849, 3852, 3855, 3857,
     3859, 3863, 3867, 3881, 3870, 3885, 3889, 3891, 3896, 3903,
     3909, 3915, 3918, 3921, 3928, 3930, 3936,  760,  817,  480,
     3962,  455, 3985,  537, 4039, 3958, 3972, 3966, 3996, 3999,
     4007, 4010, 4021, 4043, 4046, 4061, 4064, 4072, 4075, 4090,

     4094, 4098, 4102, 4121, 4123, 4125, 4129, 4148, 4150, 4152,
     4171, 4176, 4179, 4173, 4197, 4199, 4202, 4205, 4223, 4226,
     4234, 4248, 4252, 4237, 4260, 4278, 4280, 4283,  791,  827,
      448, 4310,  442, 4333,  604, 4387,  445,  429,    0,  837,
      918,  421, 4322,  398, 4441,  629, 4495, 4337, 4345, 4358,
     4356, 4364, 4390, 4369, 4394, 4405, 4413, 4444, 4418, 4463,
     4467, 4482, 4506, 4509, 4517, 4521, 4535,  880,  933,  388,
     4563,  362, 4586,  709, 4640, 4543, 1028, 4557, 4568, 4589,
     4597, 4608, 4600, 4611, 4643, 4647, 4651, 4665, 4695, 4704,
        0, 4718, 4708,  332, 4772, 4724,  320, 4751, 4032, 4423,

     4127, 4256, 4096, 4158, 4208, 4313, 4476, 4326, 4549, 4553,
     4675, 4711, 4351, 4449, 4398, 4736, 4503, 4724, 4738, 4775,
     4766, 4620, 4661, 4778, 4784, 4790, 4793, 4796, 4798, 4802,
     4805, 4811, 4808, 4829, 4831, 4833, 4835, 4838, 4844, 4853,
     4856, 4859, 4863, 4871, 4874, 4877, 4885, 4889, 4895, 4900,
     4903, 4907, 4910, 4915, 4922, 4928, 4930, 4933, 4935, 4937,
     4940, 4948, 4976, 4985, 4999, 4989,    0,  313, 5053, 5006,
     5107, 5025, 5030, 5024, 5057, 5060, 5065, 5071, 5079, 5110,
     5118, 5129, 5121, 5132, 5150, 5154, 5158, 5169, 5177, 5181,
     5183, 5195, 5201, 5203, 5209, 5215, 5223, 5237, 5242, 5245,

     5248, 5250, 5269, 5271, 5273, 5299, 5034, 5322, 5333,    0,
      306, 5376, 5305, 5430, 5348, 5359, 5149, 5484, 5387, 5538,
      296, 5592, 5359, 5646, 5402, 5295, 5407, 5410, 5433, 5441,
     5456, 5453, 5464, 5412, 5495, 5498, 5503, 5509, 5541, 5549,
     5560, 5552, 5603, 5618, 5700, 5626, 5754,  289, 5808, 5629,
     5862, 5657, 5564, 5660, 5665, 5687, 5711, 5572, 5722, 5780,
     5742, 5761, 5916, 5790, 5819, 5834, 4993, 5284, 5075, 5466,
     5518, 5353, 5606, 5725, 5779, 5477, 5089, 5748, 5818, 5507,
     5693, 5820, 5680, 5830, 5822, 5843, 5849, 5856, 5868, 5874,
     5870, 5876, 5883, 5888, 5896, 5903, 5922, 5925, 5930, 5934,

     5936, 5940, 5949, 5958, 5963, 5967, 5969, 5976, 5978, 5981,
     5987, 5999, 5991, 6001, 6030, 6039, 6034,    0, 6048, 6058,
     6071, 6067, 6070, 6038, 6073, 6075, 6093, 6096, 6098, 6116,
     6118, 6120, 6122, 6124, 6142, 6145, 6153, 6156, 6171, 6174,
     6176, 6194, 6198, 6200, 6202, 6221, 6232, 6249, 6247,    0,
     6263, 6272, 6281, 6289, 6301, 6296,    0, 6312, 6321, 6330,
     6320, 6332, 6344, 6346, 6352, 6357, 6370, 6381, 6383, 6395,
     6401, 6409, 6415, 6442, 6412, 6442,    0, 6453, 6466, 6476,
     6465, 6476, 6478, 6489, 6491, 6503, 6523, 6519, 6522, 6150,
     6234, 6433, 6317, 6525, 6528, 6355, 6530, 6533, 6535, 6553,

     6556, 6558, 6563, 6565, 6567, 6576, 6586, 6588, 6591, 6594,
     6598, 6600, 6606, 6609, 6618, 6620, 6627, 6630, 6632, 6638,
     6664, 6679, 6668, 6676, 6679, 6681, 6687, 6699, 6710, 6712,
     6724, 6730, 6736, 6742, 6750, 6756, 6761, 6764, 6769, 6784,
     6787, 6795, 6798, 6824, 6815, 6841, 6850, 6840, 6846, 6851,
     6854, 6859, 6872, 6878, 6880, 6884, 6902, 6904, 6915, 6930,
     6927, 6931, 6935, 6949, 6953, 6722, 6955, 6957, 6691, 6959,
     6963, 6967, 6981, 6986, 6990, 6992, 6999, 7001, 7010, 7012,
     7014, 7019, 7022, 7033, 7041, 7047, 7053, 7061, 7066, 7079,
     7084, 7087, 7098, 7102, 7106, 7117, 7121, 7125, 7129, 7143,

     7149, 7151, 7162, 7157, 7176, 7181, 7189, 7195, 7201, 7203,
     7216, 7221, 7076, 7055, 7170, 7213, 7224, 7234, 7236, 7239,
     7242, 7246, 7257, 7260, 7265, 7271, 7284, 7290, 7298, 7310,
     7312, 7323, 7325, 7336, 7344, 7338, 7349, 7362, 7367, 7380,
     7385, 7377, 7292, 7398, 7400, 7411, 7419, 7423, 7425, 7431,
     7443, 7446, 7449, 7457, 7469, 7472, 7477, 7480, 7484, 7495,
     7498, 7503, 7269, 7506, 7509, 7517, 8439, 7549, 7560, 7571,
     7582, 7593, 7600, 7610, 7617, 7627, 7634, 7644, 7651, 7661,
     7668, 7678, 7689, 7700, 7711, 7721, 7727, 7734, 7741, 7748,
     7755, 7765, 7776, 7786, 7797, 7807, 7818, 7829, 7839, 7850,

     7860, 7871, 7882, 7893, 7904, 7915, 7926, 7937, 7948, 7959,
     7970, 7981, 7992, 8003, 8014, 8025, 8036, 8047, 8058, 8069,
     8080, 8091, 8102, 8113, 8124, 8131, 8142, 8153, 8164, 8175,
     8186, 8197, 8208, 8219, 8230, 8241, 8248, 8259, 8270, 8281,
     8292, 8303, 8314, 8321, 8332, 8343, 8354, 8365, 8376, 8383,
     8394, 8405, 8416, 8427
    } ;

static yyconst flex_int16_t yy_def[1355] =
    {   0,
     1267,    1, 1267,    3, 1267,    5, 1268, 1268, 1267,    9,
     1267,   11,   11,   13, 1269, 1269, 1270, 1270, 1271, 1271,
     1272, 1272, 1267, 1267, 1267, 1267, 1267, 1273, 1274, 1267,
     1273, 1267, 1273, 1273, 1273, 1273, 1273, 1267, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1275, 1276, 1267, 1275, 1275, 1275, 1275, 1275, 1275, 1267,
     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1277, 1278,
     1267, 1277, 1277, 1277, 1277, 1277, 1277, 1267, 1277, 1267,

     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1279, 1280, 1267,
     1267, 1279, 1267, 1279, 1279, 1279, 1279, 1267, 1267, 1279,
     1267, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1279, 1267, 1267, 1281, 1282, 1281, 1281,
     1281, 1281, 1267, 1281,  144, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1267, 1267, 1267, 1267, 1283, 1267,
     1267, 1267, 1267, 1284, 1267, 1267, 1285, 1267, 1267, 1286,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1273, 1274,
     1273, 1287, 1274, 1274, 1273, 1273, 1273, 1267, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,

     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1275, 1276, 1275, 1275, 1288, 1276, 1276, 1275,
     1275, 1275, 1275, 1275, 1267, 1275, 1275, 1275, 1275, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275,   77,

     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1277, 1278, 1277, 1277,
     1289, 1278, 1278, 1277, 1277, 1267, 1267, 1277, 1267, 1277,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1279, 1280, 1279,
     1279, 1290, 1280, 1280, 1279, 1279, 1279, 1267, 1279, 1279,
     1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1281,
     1282, 1281, 1281, 1291, 1282, 1282, 1281, 1281, 1267,  144,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1267, 1267, 1267, 1267, 1267,

     1283, 1267, 1267, 1267, 1284, 1285, 1286, 1267, 1273, 1292,
     1293, 1293, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1275, 1294, 1295, 1295, 1275,

     1275, 1275, 1275,   77, 1275, 1275, 1275,   77, 1275, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1277,
     1296, 1297, 1297, 1267, 1267, 1267, 1267, 1298, 1298, 1279,
     1299, 1300, 1300, 1279, 1279, 1279, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1279, 1279, 1281, 1301, 1302, 1302, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1267,
     1267, 1292, 1292, 1298,  412, 1303, 1304,  412, 1305, 1273,

     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1294, 1294,  499,
     1306,  499, 1307,  499, 1308, 1275, 1275, 1275, 1275, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275,

     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275,
     1275, 1275, 1275, 1275, 1275, 1275, 1275, 1275, 1296, 1296,
      543, 1309,  543, 1310,  543, 1311, 1267, 1267, 1312, 1299,
     1299,  553, 1313,  553, 1314,  553, 1315, 1279, 1279, 1279,
     1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279, 1279,
     1279, 1279, 1279, 1279, 1279, 1279, 1279, 1301, 1301,  579,
     1316,  579, 1317,  579, 1318, 1281,  581, 1281, 1281, 1281,
     1281, 1281, 1281, 1281, 1281, 1281, 1281, 1281, 1303, 1303,
     1312, 1304, 1319,  792, 1320, 1298,  412, 1321, 1273, 1273,

     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1306, 1306, 1307, 1322,  865,  865, 1323, 1298,
     1324, 1325, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,

     1326, 1326, 1326, 1326, 1326, 1309, 1309, 1310, 1327,  908,
      908, 1328, 1298, 1329, 1330, 1331, 1331, 1332, 1333, 1332,
      920, 1334, 1298, 1335, 1336, 1337, 1337, 1337, 1337, 1337,
     1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
     1337, 1337, 1338, 1338, 1339, 1340, 1339,  947, 1341, 1298,
     1342, 1343, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1345,
     1345, 1346, 1347, 1348, 1349, 1349, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,

     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1322, 1322, 1346,  865, 1351, 1325,
     1325, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1327, 1327, 1346,  908,
     1352, 1330, 1330, 1333, 1333, 1346,  920, 1353, 1336, 1336,
     1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337,
     1337, 1337, 1337, 1340, 1340, 1346,  947, 1354, 1343, 1343,
     1344, 1344, 1344, 1344, 1344, 1344, 1348, 1348, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,

     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1351, 1351, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1352, 1352, 1353, 1353, 1337, 1337, 1337,
     1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1354, 1354,
     1344, 1344, 1344, 1344, 1344, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1350, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,

     1337, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1344, 1344,
     1344, 1344, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1350, 1350, 1326, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1337, 1337, 1337, 1337, 1337, 1337, 1337, 1344,
     1344, 1350, 1350, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
     1326, 1337, 1337, 1337, 1337, 1337, 1350, 1326, 1326, 1326,
     1326, 1337, 1350, 1326, 1337, 1326,    0, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,

     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267
    } ;

static yyconst flex_int16_t yy_nxt[8496] =
    {   0,
       24,   25,   26,   24,   27,   25,   25,   28,   29,   30,
       30,   31,   28,   32,   33,   34,   35,   36,   28,   28,
       28,   30,   28,   30,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   28,   46,   28,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       28,   28,   32,   32,   28,   28,   24,   25,   26,   24,
       27,   25,   25,   61,   62,   63,   63,   64,   65,   63,
       66,   65,   61,   61,   67,   68,   61,   63,   61,   63,
       69,   70,   71,   61,   72,   73,   74,   75,   76,   61,
       77,   78,   61,   79,   80,   61,   81,   82,   61,   83,

       84,   85,   86,   87,   61,   61,   61,   61,   63,   63,
       88,   61,   24,   25,   26,   24,   27,   25,   25,   89,
       90,   91,   91,   92,   89,   91,   93,   94,   89,   95,
       96,   89,   89,   91,   89,   91,   97,   98,   89,   89,
       89,   89,   89,   89,   89,   89,   99,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,  100,  100,   89,   89,  102,  103,
      104,  105,  102,  102,  168,  178,  168,  168,  106,  178,
      178,  107,  102,  103,  104,  105,  102,  102,  168,  178,
      168,  168,  106,  178,  178,  107,   24,   25,   26,   24,

       27,   25,   25,  108,  109,  110,  111,  112,  108,  113,
      114,  115,  108,  108,  116,  117,  108,  118,  108,  119,
      120,  121,  122,  108,  123,  124,  108,  125,  126,  108,
      127,  108,  108,  128,  129,  108,  130,  131,  108,  132,
      133,  134,  108,  108,  108,  108,  108,  108,  135,  135,
      108,  108,  136,   25,   26,   24,   27,   25,   25,  137,
      138,  136,  136,  139,  137,  136,  140,  141,  137,  137,
      137,  137,  137,  136,  137,  136,  142,  143,  137,  137,
      144,  137,  145,  137,  137,  137,  146,  147,  137,  137,
      148,  137,  149,  150,  137,  151,  152,  137,  153,  154,

      137,  137,  137,  137,  136,  136,  137,  137,  155,  156,
      157,  158,  155,  155, 1076,  160,  161,  180,  161,  160,
      160, 1056,  162,  160,  161,  179,  161,  160,  160,  263,
      162, 1049,  317,  181,  182,  137,  163,  137, 1017,  184,
      595,  137,  137,  269,  163,  137,  323,  137,  137,  180,
      137,  137,  185,  137,  137,  165,  166,  962,  166,  165,
      165,  166,  165,  166,  165,  181,  182,  165,  169,  180,
      171,  169,  172,  169,  338,  186,  169,  173,  174,  180,
      370,  180,  770,  180,  595,  181,  182,  180,  344,  796,
      175,  187,  187,  180,  376,  181,  182,  181,  182,  181,

      182,  181,  181,  181,  188,  181,  408,  408,  770,  181,
      182,  179,  189,  181,  190,  181, 1267,  183,  742,  180,
      176,  177,  191,  169,  169,  184,  171,  169,  172,  169,
      192,  180,  169,  173,  174,  181,  182, 1267,  268, 1267,
      322,  742,  180,  327,  181,  181,  175,  181,  182,  408,
      408,  193,  196,  180,  194,  180,  327,  195,  181,  182,
      197,  198,  731,  199,  201,  180,  200,  180,  731,  181,
      182,  181,  182,  180,  202,  680,  176,  177,  179,  169,
      203,  181,  182,  181,  182,  204,  216,  205,  206,  181,
      182,  217,  184,  213,  207,  214,  208,  209,  180,  210,

      680,  180,  211,  595,  212, 1267,  343,  397,  215,  397,
      402,  739,  403,  739,  181,  182,  218,  181,  182,  221,
      222,  180,  263,  223,  332,  180,  404,  224,  332,  180,
      219, 1267,  375,  225,  220,  180,  269,  181,  182,  226,
      738,  181,  182,  227,  230,  181,  182,  235,  231,  180,
      737,  181,  182,  228,  180,  232,  233,  680,  234,  229,
      591,  236,  870,  180,  237,  181,  182,  238,  263,  239,
      181,  182,  241,  240,  252,  253,  242,  317,  590,  181,
      182,  180,  269,  243,  254,  549,  317,  338,  180, 1267,
      592,  323,  244,  180,  255,  264,  548,  181,  182,  256,

      323,  344,  265,  257,  181,  182,  338,  258,  547,  181,
      182,  266,  267,  259,  260,  245,  180,  546,  246,  264,
      344,  180,  270,  247,  731,  248,  265,  264,  249,  913,
      250,  251,  181,  182,  265,  266,  267,  181,  182,  337,
      261,  264,  336,  266,  267,  264,  262,  271,  265,  742,
      370,  370,  265,  272,  923,  273,  264,  266,  267,  264,
     1267,  266,  267,  265,  376,  376,  265, 1267,  274,  409,
      266,  266,  266,  267,  266,  266,  275,  496, 1267,  264,
     1267,  264,  266,  593,  266,  264,  265,  264,  265,  180,
     1267,  679,  265,  264,  265,  266,  267,  266,  267, 1267,

      265,  266,  267,  266,  267,  181,  188,  284,  540,  266,
      267,  290, 1267,  266,  266,  276,  264,  288,  285,  264,
      289,  286,  730,  265,  264,  550,  265, 1267,  287,  770,
      576,  265,  266,  267,  950,  266,  267, 1267,  277,  741,
      266,  267,  264,  296,  769,  278,  279, 1267,  280,  265,
      281,  282,  409,  283,  264,  314,  264, 1267,  266,  267,
      297,  265,  264,  265,  298, 1267,  593, 1267,  496,  265,
      266,  267,  266,  267,  315,  291,  264,  292,  266,  267,
      264,  299,  679,  265,  300,  293,  180,  265,  180,  411,
      294,  295,  266,  267,  264,  302,  266,  267,  301,  540,

      264,  265,  181,  182,  181,  182, 1267,  265,  180,  303,
      266,  267,  304,  730,  264,  305,  266,  267, 1267,  678,
      306,  265, 1267,  307,  181,  182, 1267,  264, 1267,  729,
      266,  267,  308,  309,  265,  318,  312,  310,  311,  316,
      413,  318,  319,  266,  267,  550,  313,  318,  319,  318,
      324,  320,  321, 1267,  319,  325,  319,  320,  321,  741,
     1267,  180, 1267,  320,  321,  320,  321,  326,  327,  326,
      326,  326,  326, 1267,  318, 1267,  318,  181,  182,  318,
     1267,  319, 1267,  319,  328,  328,  319,  318,  576,  180,
      320,  321,  320,  321,  319,  320,  329,  320,  320, 1267,

      414,  320,  769,  320,  321,  181,  182,  180, 1267,  320,
      418,  320,  331,  332,  333,  333,  331,  331,  330, 1267,
      740,  180,  334,  181,  182,  335,  333,  332,  333,  333,
      333,  333, 1267,  420, 1267,  768,  334,  181,  182,  335,
      320,  320,  333,  332,  333,  333,  333,  333, 1267,  339,
     1267,  339,  334,  339,  345,  335,  340,  339,  340,  346,
      340, 1267, 1267,  180,  340,  341,  342,  341,  342,  341,
      342,  339, 1267,  341,  342,  339, 1267,  339,  340,  181,
      182, 1267,  340, 1267,  340, 1267, 1267,  341,  342,  347,
     1267,  341,  348,  341,  342,  341,  341,  339,  370,  341,

      417,  339, 1267,  339,  340,  370,  370,  341,  340,  341,
      340,  370,  180,  341,  342,  339, 1267,  341,  342,  341,
      342, 1267,  340, 1267, 1267, 1267, 1267,  352,  181,  182,
     1267,  341,  342,  349,  419,  350,  339, 1267,  341,  341,
      351,  339, 1267,  340,  339, 1267, 1267,  353,  340,  339,
      354,  340,  341,  342,  355, 1267,  340,  341,  342,  370,
      341,  342,  356,  339,  357,  341,  342,  359,  370, 1267,
      340,  360,  370,  954,  339,  370,  369, 1267,  358,  341,
      342,  340, 1267, 1267, 1267,  361, 1267,  339, 1267,  339,
      341,  342,  180,  363,  340,  339,  340,  180,  412,  362,

      371, 1267,  340,  341,  342,  341,  342,  372,  181,  182,
     1267,  341,  342,  181,  182,  366,  373,  374,  371,  364,
      371,  377,  365,  371, 1267,  372,  378,  372,  367, 1267,
      372,  371,  368,  432,  373,  374,  373,  374,  372,  373,
      374,  373,  373,  370,  180,  373, 1267,  373,  379, 1267,
      370,  370,  385,  373, 1267,  373,  370,  371, 1267,  371,
      181,  182,  386,  371,  372,  422,  372, 1267, 1267, 1267,
      372, 1267, 1267,  373,  374,  373,  374, 1267,  388,  373,
      374, 1267,  383, 1267,  373,  373,  371, 1267,  387,  371,
     1267, 1267, 1267,  372,  371, 1267,  372,  371, 1267,  389,

     1267,  372,  373,  374,  372,  373,  374, 1267,  380, 1267,
      373,  374, 1267,  373,  374,  381,  382,  371, 1267,  180,
      383,  384,  390,  371,  372,  371,  383,  187,  187,  391,
      372,  180,  372,  373,  374,  181,  182, 1267, 1267,  373,
      374,  373,  374,  395, 1267, 1267, 1267,  181,  182,  392,
     1267, 1267, 1267,  421, 1267,  393, 1267, 1267, 1267,  394,
      396,  397,  398,  398,  396,  396, 1267,  410,  181,  181,
      399, 1267,  181,  400,  398,  397,  398,  398,  398,  398,
      181, 1267,  181, 1267,  399, 1267,  180,  400,  398,  397,
      398,  398,  398,  398, 1267,  181,  181,  180,  399,  181,

     1267,  400,  181,  182, 1267,  180, 1267,  181, 1267,  181,
     1267,  181,  181,  181,  182,  423,  424,  425,  180, 1267,
     1267,  181,  182,  415,  426,  180,  416,  427,  180, 1267,
      180, 1267, 1267,  180,  181,  182, 1267,  428,  181,  181,
      180,  181,  182,  180,  181,  182,  181,  182,  180,  181,
      182,  431,  433,  434,  429,  430,  181,  182,  436,  181,
      182, 1267,  180, 1267,  181,  182, 1267, 1267, 1267,  180,
      435,  180, 1267,  180, 1267,  437,  180, 1267,  181,  182,
      180, 1267, 1267,  438,  439,  181,  182,  181,  182,  181,
      182,  180,  181,  182,  252,  444,  181,  182,  441,  180,

     1267,  180, 1267, 1267,  180, 1267,  180,  181,  182,  180,
      440,  442,  180, 1267, 1267,  181,  182,  181,  182,  445,
      181,  182,  181,  182,  180,  181,  182, 1267,  181,  182,
      443,  180, 1267,  446,  180, 1267, 1267,  180, 1267,  180,
      181,  182,  449,  447,  180,  448,  180,  181,  182, 1267,
      181,  182,  451,  181,  182,  181,  182, 1267, 1267, 1267,
      181,  182,  181,  182,  180,  450,  180, 1267,  180,  452,
     1267,  252,  180, 1267,  454,  180,  455,  453,  180, 1267,
      181,  182,  181,  182,  181,  182, 1267,  456,  181,  182,
      180,  181,  182, 1267,  181,  182, 1267,  180,  457, 1267,

     1267, 1267,  180, 1267,  180, 1267,  181,  182,  458,  180,
      459,  461,  460,  181,  182,  180,  462, 1267,  181,  182,
      181,  182,  463,  465,  180,  181,  182,  180, 1267, 1267,
      466,  181,  182,  464, 1267, 1267,  468, 1267, 1267, 1267,
      181,  182,  180,  181,  182,  180,  467, 1267,  180, 1267,
      180,  469,  180, 1267,  470,  471,  473, 1267,  181,  182,
      472,  181,  182,  474,  181,  182,  181,  182,  181,  182,
      180, 1267,  480,  180,  475, 1267, 1267,  479,  180, 1267,
      477, 1267,  476,  180,  478,  180,  181,  182,  481,  181,
      182, 1267,  482,  180,  181,  182, 1267,  483,  180,  181,

      182,  181,  182,  486,  180, 1267,  180, 1267,  484,  181,
      182, 1267, 1267,  485,  181,  182, 1267, 1267,  180,  487,
      181,  182,  181,  182, 1267,  180, 1267,  180,  490, 1267,
      180, 1267, 1267,  488,  181,  182,  494, 1267, 1267,  489,
      491,  181,  182,  181,  182,  495,  181,  182,  264, 1267,
      492,  264, 1267,  264, 1267,  265, 1267, 1267,  265, 1267,
      265, 1267,  493, 1267,  266,  267, 1267,  266,  267,  266,
      275,  497,  266,  266,  264, 1267,  266,  498,  264, 1267,
      264,  265,  264, 1267,  266,  265,  266,  265,  499,  265,
      266,  267, 1267,  264,  266,  267,  266,  267,  266,  267,

      265, 1267, 1267, 1267, 1267, 1267,  264,  266,  266,  266,
      267,  266,  180,  265, 1267,  266,  266, 1267,  264,  266,
      264,  266,  266,  267,  264,  265, 1267,  265,  181,  182,
      180,  265,  264, 1267,  266,  267,  266,  267,  501,  265,
      266,  267,  500,  502, 1267, 1267,  181,  182,  266,  267,
      266,  266,  281,  264, 1267, 1267, 1267,  264, 1267,  264,
      265,  264,  503,  504,  265,  600,  265, 1267,  265,  266,
      267, 1267,  264,  266,  267,  266,  267,  266,  267,  265,
      264, 1267, 1267,  264, 1267, 1267,  505,  265,  266,  267,
      265,  506, 1267,  508,  264, 1267,  266,  267,  507,  266,

      267,  265,  264, 1267, 1267,  264, 1267,  264, 1267,  265,
      266,  267,  265, 1267,  265,  180, 1267, 1267,  266,  267,
      509,  266,  267,  266,  267, 1267, 1267, 1267,  264,  510,
      264,  181,  182, 1267,  511,  265,  513,  265,  180, 1267,
      514,  601,  512,  264,  266,  267,  266,  267,  516,  264,
      265,  264,  515, 1267,  181,  182,  265,  264,  265,  266,
      267, 1267,  264, 1267,  265,  266,  267,  266,  267,  265,
      264,  517, 1267,  266,  267, 1267,  519,  265,  266,  267,
      263,  264,  263,  518,  264,  521,  266,  267,  265,  522,
      263,  265, 1267, 1267,  520,  523,  524,  266,  267,  264,

      266,  267,  264, 1267,  180,  525,  265,  264,  527,  265,
      264,  526, 1267, 1267,  265,  266,  267,  265,  266,  267,
      181,  182,  602,  266,  267,  264,  266,  267,  529,  530,
      264, 1267,  265,  264,  532, 1267,  264,  265,  528,  531,
      265,  266,  267,  265,  264, 1267,  266,  267, 1267,  266,
      267,  265,  266,  267, 1267,  534, 1267,  264, 1267,  264,
      266,  267,  264,  536,  265,  533,  265, 1267, 1267,  265,
      264,  535, 1267,  266,  267,  266,  267,  265,  266,  267,
     1267, 1267,  264, 1267,  318, 1267,  266,  267,  538,  265,
      318,  319,  537, 1267, 1267,  318, 1267,  319,  266,  267,

      320,  321,  319, 1267, 1267,  539,  320,  321,  541,  320,
      320,  320,  329,  320, 1267,  318,  320,  320,  542,  318,
      320,  320,  319,  320, 1267,  543,  319,  318,  320, 1267,
      320,  320,  321, 1267,  319,  320,  321,  326,  327,  326,
      326,  326,  326,  320,  321,  180, 1267,  544,  318, 1267,
      545, 1267,  320,  320, 1267,  319,  328,  328, 1267,  320,
      320,  181,  182,  605,  320,  321,  331,  332,  333,  333,
      331,  331, 1267,  551,  341,  341,  334, 1267,  341,  335,
      333,  332,  333,  333,  333,  333,  341,  339,  341,  339,
      334,  339, 1267,  335,  340, 1267,  340, 1267,  340, 1267,

     1267, 1267, 1267,  341,  342,  341,  342,  341,  348,  339,
     1267, 1267,  552,  339, 1267,  339,  340,  341,  341,  553,
      340, 1267,  340,  341,  341,  341,  342,  341, 1267,  341,
      342,  341,  342,  339, 1267,  341,  339,  341,  339, 1267,
      340,  339, 1267,  340,  339,  340,  180, 1267,  340,  341,
      342,  340,  341,  342,  341,  342, 1267,  341,  342, 1267,
      341,  342,  181,  182, 1267, 1267,  341,  341,  557,  554,
      339,  555,  556,  339, 1267,  558,  339,  340,  339,  559,
      340,  603, 1267,  340, 1267,  340,  341,  342,  562,  341,
      342,  339,  341,  342,  341,  342, 1267, 1267,  340,  339,

      563, 1267,  560, 1267,  339, 1267,  340,  341,  342,  180,
      561,  340,  339,  564, 1267,  341,  342,  339, 1267,  340,
      341,  342, 1267,  339,  340,  181,  182,  566,  341,  342,
      340, 1267, 1267,  341,  342, 1267,  565,  339, 1267,  341,
      342,  562,  567,  180,  340,  339, 1267, 1267,  568,  569,
      570,  604,  340,  341,  342, 1267,  339, 1267, 1267,  181,
      182,  341,  342,  340, 1267, 1267,  571,  572,  339, 1267,
      339, 1267,  341,  342, 1267,  340,  339,  340, 1267, 1267,
      573,  371, 1267,  340,  341,  342,  341,  342,  372, 1267,
      574,  180,  341,  342,  371, 1267,  371,  373,  374, 1267,

     1267,  372, 1267,  372, 1267,  575,  180,  181,  182,  607,
      373,  374,  373,  379,  577,  373,  373,  371, 1267,  373,
      578, 1267,  181,  182,  372,  371, 1267,  373, 1267,  373,
     1267,  579,  372,  373,  374,  373,  373,  371,  608,  373,
     1267,  373,  374, 1267,  372,  371, 1267,  373, 1267,  373,
      371, 1267,  372,  373,  374,  580,  371,  372,  373,  373,
     1267,  373,  374,  372,  383, 1267,  373,  374, 1267, 1267,
      371, 1267,  373,  374, 1267, 1267,  371,  372,  373,  373,
     1267,  371, 1267,  372, 1267,  383,  373,  374,  372,  371,
     1267,  581,  373,  374, 1267,  371,  372,  373,  374, 1267,

      371,  583,  372, 1267, 1267,  373,  374,  372,  371, 1267,
     1267,  373,  374,  582, 1267,  372,  373,  374, 1267,  584,
     1267,  383,  371, 1267,  373,  374,  371, 1267, 1267,  372,
      371, 1267, 1267,  372,  371, 1267,  383,  372,  373,  374,
      585,  372,  373,  374, 1267,  587,  373,  374, 1267,  180,
      373,  374, 1267, 1267, 1267, 1267,  588,  586,  396,  397,
      398,  398,  396,  396,  180,  181,  182,  180,  399,  589,
     1267,  400,  398,  397,  398,  398,  398,  398,  606, 1267,
      181,  182,  399,  181,  182,  400,  594,  180, 1267,  594,
     1267, 1267, 1267, 1267,  596,  594,  594,  609,  180,  594,

      610, 1267,  616,  181,  182,  180,  597,  594,  615,  594,
      598,  599,  180, 1267,  181,  182,  180, 1267,  611,  612,
     1267,  181,  182, 1267, 1267,  180, 1267, 1267,  181,  182,
      180, 1267,  181,  182,  617,  613,  614, 1267,  594,  594,
      594,  181,  182,  594, 1267, 1267,  181,  182,  596,  594,
      594,  180, 1267,  594,  180, 1267,  180, 1267,  618,  180,
      597,  594, 1267,  594,  598,  599, 1267,  181,  182,  180,
      181,  182,  181,  182, 1267,  181,  182, 1267,  621, 1267,
     1267,  180, 1267,  620,  180,  181,  182,  180, 1267,  180,
      252,  619,  594,  594, 1267, 1267,  622,  181,  182,  180,

      181,  182,  180,  181,  182,  181,  182, 1267, 1267,  180,
     1267,  623, 1267,  180, 1267,  181,  182, 1267,  181,  182,
      180, 1267,  625,  627,  624,  181,  182,  180,  626,  181,
      182,  628,  180, 1267,  629,  180,  181,  182,  180, 1267,
      180, 1267,  180,  181,  182, 1267,  180,  631,  181,  182,
     1267,  181,  182,  630,  181,  182,  181,  182,  181,  182,
     1267,  633,  181,  182,  180, 1267,  180,  632, 1267, 1267,
      180, 1267,  180, 1267,  180,  636, 1267,  635,  634,  180,
      181,  182,  181,  182, 1267,  638,  181,  182,  181,  182,
      181,  182,  180,  639,  637,  181,  182,  180, 1267, 1267,

     1267,  640, 1267,  180, 1267,  180, 1267,  180,  181,  182,
      180, 1267, 1267,  181,  182,  641, 1267,  642,  643,  181,
      182,  181,  182,  181,  182, 1267,  181,  182,  645,  180,
     1267,  180,  647,  180,  644,  180, 1267,  180, 1267,  180,
     1267, 1267,  646, 1267,  180,  181,  182,  181,  182,  181,
      182,  181,  182,  181,  182,  181,  182,  649, 1267,  652,
      181,  182,  180, 1267,  180, 1267,  648, 1267, 1267,  180,
     1267,  650,  180,  651,  653, 1267,  180, 1267,  181,  182,
      181,  182, 1267, 1267,  654,  181,  182,  180,  181,  182,
      180,  656,  181,  182,  180, 1267,  180, 1267, 1267,  655,

     1267, 1267,  180,  181,  182,  180,  181,  182,  252,  180,
      181,  182,  181,  182,  180,  659,  657, 1267,  181,  182,
     1267,  181,  182, 1267, 1267,  181,  182,  658,  180, 1267,
      181,  182, 1267,  661,  660,  662,  665,  180, 1267,  664,
      666,  663,  180, 1267,  181,  182,  180, 1267,  667, 1267,
      180, 1267, 1267,  181,  182, 1267,  180, 1267,  181,  182,
      668, 1267,  181,  182,  180,  671,  181,  182,  669,  180,
     1267,  180,  181,  182, 1267, 1267, 1267, 1267,  670,  180,
      181,  182,  264, 1267,  180,  181,  182,  181,  182,  265,
      672,  673, 1267,  674,  675,  181,  182,  264,  266,  267,

      181,  182,  676, 1267,  265,  264, 1267, 1267,  263, 1267,
      689, 1267,  265,  266,  267, 1267,  677,  594,  263, 1267,
      594,  266,  267,  690,  263,  681,  594,  594,  264,  686,
      594,  180,  682,  180, 1267,  265,  264,  683,  594,  264,
      594,  684,  685,  265,  266,  267,  265,  181,  182,  181,
      182,  264,  266,  267, 1267,  266,  267,  802,  265,  180,
     1267,  803, 1267, 1267,  687, 1267,  688,  266,  267,  594,
      594,  594, 1267, 1267,  594,  181,  182,  807, 1267,  681,
      594,  594,  264, 1267,  594, 1267,  682,  180,  692,  265,
      264,  683,  594, 1267,  594,  684,  685,  265,  266,  267,

      263, 1267,  693,  181,  182, 1267,  266,  267, 1267,  518,
      263,  694,  698,  264, 1267,  695,  696,  691,  697,  264,
      265,  264,  805,  594,  594,  264,  265, 1267,  265,  266,
      267, 1267,  265, 1267, 1267,  266,  267,  266,  267, 1267,
      264,  266,  267,  699,  264, 1267,  702,  265,  264,  700,
      703,  265,  264, 1267, 1267,  265,  266,  267, 1267,  265,
      266,  267,  701,  264,  266,  267,  264, 1267,  266,  267,
      265, 1267, 1267,  265,  704,  705, 1267,  706,  264,  266,
      267, 1267,  266,  267, 1267,  265,  264,  707,  708,  264,
     1267,  264, 1267,  265,  266,  267,  265,  264,  265, 1267,

      709,  180,  266,  267,  265,  266,  267,  266,  267,  264,
     1267, 1267,  264,  266,  267,  713,  265,  181,  182,  265,
     1267,  711, 1267,  710,  264,  266,  267,  712,  266,  267,
      264,  265, 1267, 1267,  715,  264, 1267,  265,  799, 1267,
      266,  267,  265,  264, 1267,  714,  266,  267,  264,  716,
      265,  266,  267, 1267,  264,  265, 1267, 1267, 1267,  266,
      267,  265, 1267,  718,  266,  267,  264, 1267, 1267, 1267,
      266,  267, 1267,  265,  264, 1267, 1267,  717, 1267,  720,
      264,  265,  266,  267, 1267,  719, 1267,  265,  264, 1267,
      266,  267, 1267,  264,  722,  265,  266,  267,  723,  264,

      265, 1267, 1267,  721,  266,  267,  265, 1267,  724,  266,
      267,  264, 1267, 1267, 1267,  266,  267, 1267,  265,  318,
     1267, 1267,  339,  726,  725,  339,  319,  266,  267,  340,
      727, 1267,  340,  339, 1267,  320,  321,  339,  341,  342,
      340,  341,  342, 1267,  340, 1267, 1267,  728,  594,  341,
      342,  594, 1267,  341,  342,  749,  732,  594,  594,  339,
     1267,  594,  180,  733, 1267,  748,  340,  753,  734,  594,
      339,  594,  735,  736,  339,  341,  342,  340,  181,  182,
     1267,  340,  750, 1267, 1267, 1267,  341,  342, 1267, 1267,
      341,  342, 1267, 1267, 1267,  751, 1267,  339,  800, 1267,

      594,  594,  594,  180,  340,  594, 1267,  752, 1267,  562,
      732,  594,  594,  341,  342,  594, 1267,  733, 1267,  181,
      182,  339,  734,  594, 1267,  594,  735,  736,  340,  808,
     1267, 1267,  339, 1267, 1267,  809,  339,  341,  342,  340,
      754, 1267, 1267,  340,  339, 1267,  755, 1267,  341,  342,
     1267,  340,  341,  342,  594,  594,  594, 1267,  759,  594,
      341,  342, 1267, 1267,  743,  594,  594, 1267, 1267,  594,
     1267,  744, 1267, 1267,  756,  757,  745,  594,  339,  594,
      746,  747,  339, 1267,  339,  340,  339, 1267,  180,  340,
      339,  340, 1267,  340,  341,  342, 1267,  340,  341,  342,

      341,  342,  341,  342,  181,  182,  341,  342,  594,  594,
      594, 1267,  762,  594, 1267,  562,  562,  758,  743,  594,
      594,  339,  760,  594,  801,  744, 1267,  180,  340,  339,
      745,  594, 1267,  594,  746,  747,  340,  341,  342,  761,
      339, 1267,  339,  181,  182,  341,  342,  340,  339,  340,
     1267, 1267, 1267,  811, 1267,  340,  341,  342,  341,  342,
      764,  180,  594,  594,  341,  342,  339,  765,  766,  371,
     1267,  763,  371,  340, 1267,  180,  372,  181,  182,  372,
     1267, 1267,  341,  342,  767,  373,  374,  594,  373,  374,
      594,  181,  182, 1267,  782,  771,  594,  594,  371,  814,

      594,  812,  772, 1267, 1267,  372,  371,  773,  594,  371,
      594,  774,  775,  372,  373,  374,  372, 1267, 1267, 1267,
      371, 1267,  373,  374, 1267,  373,  374,  372, 1267, 1267,
     1267,  371, 1267, 1267,  776,  783,  373,  374,  372,  594,
      594,  594,  180, 1267,  594,  383, 1267,  373,  374,  771,
      594,  594, 1267,  371,  594, 1267,  772,  784,  181,  182,
      372,  773,  594, 1267,  594,  774,  775,  371,  785,  373,
      374,  371, 1267,  786,  372,  180, 1267, 1267,  372,  804,
     1267, 1267, 1267,  373,  374, 1267, 1267,  373,  374,  787,
     1267,  181,  182,  594,  594,  371, 1267,  180,  788,  180,

      594,  183,  372,  594,  180, 1267,  183,  383,  595, 1267,
      806,  373,  374,  181,  182,  181,  182, 1267,  777,  810,
      181,  182,  790,  180, 1267,  778, 1267,  779,  815, 1267,
      180,  780,  781,  180,  778,  791,  813,  180,  791,  181,
      182, 1267, 1267,  793,  791,  791,  181,  182,  791,  181,
      182, 1267,  816,  181,  182,  180,  791,  180,  791,  794,
      795,  180, 1267, 1267, 1267,  180, 1267,  180,  817, 1267,
     1267,  181,  182,  181,  182,  818, 1267,  181,  182,  821,
     1267,  181,  182,  181,  182, 1267,  819,  791,  791,  594,
      180, 1267,  594, 1267,  820, 1267, 1267,  798,  598,  598,

      822,  180,  598,  180, 1267,  824,  181,  182,  180, 1267,
      598,  180,  598,  594,  594,  823, 1267,  181,  182,  181,
      182, 1267,  180, 1267,  181,  182, 1267,  181,  182,  180,
     1267, 1267,  826,  180, 1267,  180, 1267,  825,  181,  182,
      180,  598,  598, 1267,  180,  181,  182,  827, 1267,  181,
      182,  181,  182, 1267, 1267, 1267,  181,  182,  180,  828,
      181,  182,  180, 1267,  829,  180, 1267, 1267, 1267,  180,
      831,  180,  830,  180,  181,  182,  832, 1267,  181,  182,
      180,  181,  182, 1267,  833,  181,  182,  181,  182,  181,
      182,  180, 1267,  835,  180, 1267,  181,  182, 1267,  180,

      834,  180, 1267, 1267, 1267, 1267, 1267,  181,  182,  180,
      181,  182, 1267,  180, 1267,  181,  182,  181,  182,  180,
      837,  838,  839, 1267,  180,  181,  182,  180,  836,  181,
      182,  180, 1267, 1267,  180,  181,  182, 1267, 1267,  841,
      181,  182,  180,  181,  182,  840, 1267,  181,  182,  843,
      181,  182,  180,  844,  842, 1267, 1267,  180,  181,  182,
      180, 1267,  845,  180, 1267,  180, 1267,  180,  181,  182,
      472,  180,  846,  181,  182,  180,  181,  182,  180,  181,
      182,  181,  182,  181,  182, 1267, 1267,  181,  182,  180,
     1267,  181,  182,  180,  181,  182,  847,  180, 1267,  180,

      849,  848, 1267,  850,  180,  181,  182,  852, 1267,  181,
      182,  180,  851,  181,  182,  181,  182,  180, 1267,  854,
      181,  182,  856,  180,  853, 1267,  180,  181,  182,  180,
     1267, 1267, 1267,  181,  182, 1267,  180, 1267,  180,  181,
      182,  855,  181,  182,  180,  181,  182, 1267,  859,  857,
     1267,  860,  181,  182,  181,  182,  861, 1267, 1267,  858,
      181,  182,  594,  268,  862,  594,  264, 1267,  268, 1267,
      680, 1267, 1267,  265,  264, 1267, 1267, 1267, 1267, 1267,
      264,  265,  266,  267,  864,  791,  873,  265,  791, 1267,
      266,  267, 1267,  866,  791,  791,  266,  267,  791, 1267,

      867, 1267, 1267, 1267,  264, 1267,  791,  264,  791,  868,
      869,  265,  875, 1267,  265,  264,  874, 1267,  264, 1267,
      266,  267,  265,  266,  267,  265, 1267, 1267, 1267,  264,
      876,  266,  267, 1267,  266,  267,  265,  791,  791,  594,
      180, 1267,  594, 1267,  877,  266,  267,  872,  684,  684,
      878,  264,  684, 1267,  264, 1267,  181,  182,  265,  518,
      684,  265,  684,  594,  594, 1267,  879,  266,  267,  264,
      266,  267,  264, 1267, 1267, 1267,  265, 1267, 1267,  265,
      264,  518, 1267,  264,  518,  266,  267,  265,  266,  267,
      265,  684,  684, 1267,  518, 1267,  266,  267,  264,  266,

      267,  881,  264, 1267,  180,  265,  264, 1267, 1267,  265,
      264,  880, 1267,  265,  266,  267, 1267,  265,  266,  267,
      181,  182,  266,  267,  882,  971,  266,  267,  883,  264,
     1267,  264, 1267,  264, 1267,  180,  265,  264,  265, 1267,
      265, 1267,  884, 1267,  265,  266,  267,  266,  267,  266,
      267,  181,  182,  266,  267,  888,  264,  969,  264, 1267,
      264, 1267,  885,  265, 1267,  265,  180,  265,  886, 1267,
     1267,  887,  266,  267,  266,  267,  266,  267, 1267,  264,
     1267,  264,  181,  182,  264,  889,  265,  264,  265, 1267,
     1267,  265,  972, 1267,  265,  266,  267,  266,  267,  890,

      266,  267,  891,  266,  267,  264, 1267,  264,  892, 1267,
      264, 1267,  265,  264,  265, 1267,  180,  265, 1267, 1267,
      265,  266,  267,  266,  267,  893,  266,  267, 1267,  266,
      267,  264,  181,  182,  264,  896, 1267, 1267,  265,  894,
      895,  265,  264, 1267, 1267,  264, 1267,  266,  267,  265,
      266,  267,  265,  897, 1267, 1267,  264, 1267,  266,  267,
      264,  266,  267,  265,  180, 1267, 1267,  265,  264, 1267,
     1267,  898,  266,  267,  902,  265,  266,  267,  899, 1267,
      181,  182,  900,  970,  266,  267,  264, 1267,  264, 1267,
     1267,  264,  904,  265, 1267,  265, 1267,  901,  265, 1267,

      903, 1267,  266,  267,  266,  267, 1267,  266,  267, 1267,
      594,  322,  905,  594, 1267, 1267,  322, 1267,  731, 1267,
     1267,  180,  594,  343, 1267,  594, 1267, 1267,  343, 1267,
      742, 1267,  907,  791,  180, 1267,  791,  181,  182, 1267,
     1267,  909,  791,  791,  917,  339,  791, 1267,  910, 1267,
      181,  182,  340,  339,  791, 1267,  791,  911,  912,  180,
      340,  341,  342,  974,  339,  926,  339, 1267, 1267,  341,
      342,  340,  339,  340, 1267,  181,  182,  339, 1267,  340,
      341,  342,  341,  342,  340,  791,  791,  594,  341,  342,
      594,  927,  928,  341,  342,  915,  735,  735,  339,  931,

      735,  929,  339, 1267,  562,  340,  180, 1267,  735,  340,
      735,  594,  594,  339,  341,  342,  930, 1267,  341,  342,
      340,  339,  181,  182,  932, 1267,  339, 1267,  340,  341,
      342,  180, 1267,  340, 1267, 1267, 1267,  341,  342,  735,
      735,  791,  341,  342,  791, 1267,  933,  181,  182,  919,
      791,  791,  339,  967,  791, 1267,  920,  180,  934,  340,
     1267, 1267,  791,  968,  791,  921,  922,  562,  341,  342,
      935,  339, 1267,  181,  182,  339, 1267,  979,  340, 1267,
     1267, 1267,  340, 1267,  180, 1267, 1267,  341,  342,  936,
      339,  341,  342,  791,  791,  594,  937,  340,  594, 1267,

      181,  182, 1267,  925,  746,  746,  341,  342,  746, 1267,
      938,  180, 1267, 1267,  339,  973,  746,  339,  746,  594,
      594,  340, 1267, 1267,  340,  339, 1267,  181,  182,  339,
      341,  342,  340,  341,  342, 1267,  340,  981, 1267,  940,
     1267,  341,  342,  339,  939,  341,  342,  746,  746, 1267,
      340,  371, 1267, 1267, 1267,  941, 1267,  180,  372,  341,
      342,  180,  562,  594,  375,  371,  594,  373,  374,  375,
     1267,  770,  372,  181,  182, 1267,  371,  181,  182,  976,
      942,  373,  374,  372, 1267,  944,  791,  953,  975,  791,
     1267, 1267,  373,  374,  946,  791,  791,  371, 1267,  791,

     1267,  947, 1267, 1267,  372,  371,  778,  791,  371,  791,
      948,  949,  372,  373,  374,  372,  371, 1267, 1267,  371,
     1267,  373,  374,  372,  373,  374,  372,  778,  180, 1267,
      778, 1267,  373,  374, 1267,  373,  374, 1267,  791,  791,
      594,  957, 1267,  594,  181,  182,  956,  955,  952,  774,
      774,  371, 1267,  774,  986,  371, 1267, 1267,  372,  371,
     1267,  774,  372,  774,  594,  594,  372,  373,  374,  180,
     1267,  373,  374,  371, 1267,  373,  374, 1267, 1267, 1267,
      372, 1267, 1267,  180,  958,  181,  182,  383, 1267,  373,
      374,  959,  774,  774, 1267,  594,  183,  383,  594,  181,

      182,  183, 1267,  595,  594, 1267,  183,  594,  791,  183,
      183,  791, 1267, 1267,  183, 1267,  792,  790,  791,  180,
      977,  791, 1267, 1267, 1267, 1267,  793,  791,  791, 1267,
      961,  791,  180,  598,  598,  181,  182,  598, 1267,  791,
     1267,  791,  794,  795,  180,  598,  180,  598,  181,  182,
      978,  594,  592,  982,  594, 1267, 1267,  592, 1267,  797,
      181,  182,  181,  182, 1267, 1267,  980,  983, 1267, 1267,
      791,  791,  791,  966,  180,  791,  598,  598, 1267, 1267,
      964,  794,  794,  180, 1267,  794,  180, 1267, 1267, 1267,
      181,  182,  180,  794, 1267,  794,  791,  791,  180,  181,

      182,  180,  181,  182,  180,  984,  180,  987,  181,  182,
      180,  985, 1267,  180,  181,  182,  180,  181,  182,  180,
      181,  182,  181,  182,  794,  794,  181,  182,  990,  181,
      182, 1267,  181,  182,  988,  181,  182,  180, 1267,  180,
     1267,  180, 1267,  180,  992,  989,  180, 1267,  993, 1267,
      991,  994,  180,  181,  182,  181,  182,  181,  182,  181,
      182,  180,  181,  182,  180, 1267,  998,  180,  181,  182,
     1267,  180,  997,  995,  996, 1267, 1267,  181,  182,  180,
      181,  182,  180,  181,  182,  180, 1000,  181,  182, 1001,
     1267, 1267,  999,  180, 1267,  181,  182,  180,  181,  182,

     1002,  181,  182,  180, 1267, 1267, 1267, 1004,  180,  181,
      182,  180, 1267,  181,  182,  180, 1003, 1006,  180,  181,
      182, 1267, 1005,  180,  181,  182, 1267,  181,  182, 1007,
      180,  181,  182, 1267,  181,  182,  180, 1008,  180,  181,
      182,  180, 1010,  180, 1267,  180,  181,  182,  180, 1267,
     1009, 1267,  181,  182,  181,  182,  180,  181,  182,  181,
      182,  181,  182, 1267,  181,  182, 1267, 1011, 1267, 1267,
     1267, 1267,  181,  182, 1012, 1267,  594,  268, 1267,  594,
     1267, 1014,  268, 1013,  680,  594, 1267,  268,  594,  791,
      268,  268,  791, 1267, 1267,  268, 1267,  865,  864,  791,

     1267,  180,  791, 1267, 1267, 1267, 1267,  866,  791,  791,
     1267, 1016,  791, 1267,  867,  684,  684,  181,  182,  684,
      791, 1267,  791,  868,  869,  594,  678,  684,  594,  684,
     1267,  678,  264,  871,  594, 1267,  322,  594,  264,  265,
      322, 1267, 1267, 1267, 1267,  265, 1267, 1021,  266,  267,
     1267,  791,  791,  791,  266,  267,  791, 1267,  684,  684,
     1267, 1019,  868,  868, 1022,  264,  868, 1267,  264, 1267,
     1267, 1267,  265,  264,  868,  265,  868,  791,  791,  264,
      265,  266,  267,  180,  266,  267,  265,  264, 1267,  266,
      267, 1267, 1024, 1267,  265,  266,  267,  180, 1267,  181,

      182, 1267, 1023,  266,  267,  868,  868,  594, 1025, 1267,
      594, 1267,  518,  181,  182,  681,  594,  594,  264, 1090,
      594, 1267,  682, 1097, 1267,  265,  264, 1267,  594,  264,
      594,  684,  685,  265,  266,  267,  265,  264, 1267, 1026,
      264, 1267,  266,  267,  265,  266,  267,  265, 1267,  594,
     1267,  343,  594,  266,  267,  343,  266,  267,  264,  594,
      594, 1267,  264, 1027, 1029,  265,  264, 1267, 1028,  265,
     1267, 1267, 1030,  265,  266,  267, 1267,  264,  266,  267,
     1267, 1267,  266,  267,  265,  264, 1267, 1033, 1032,  264,
     1031,  264,  265,  266,  267, 1267,  265, 1267,  265, 1267,

     1267,  266,  267,  264, 1267,  266,  267,  266,  267,  264,
      265,  264, 1267, 1267, 1034, 1035,  265,  264,  265,  266,
      267, 1036, 1267,  264,  265,  266,  267,  266,  267, 1267,
      265,  264, 1267,  266,  267, 1267, 1267, 1267,  265,  266,
      267, 1267, 1267, 1038, 1040,  264, 1037,  266,  267, 1039,
      264, 1041,  265,  264, 1267, 1267,  264,  265,  264, 1267,
      265,  266,  267,  265, 1267,  265,  266,  267, 1267,  266,
      267, 1042,  266,  267,  266,  267, 1044,  264, 1043,  264,
     1267,  264, 1267, 1267,  265, 1267,  265, 1267,  265, 1267,
     1267, 1267,  180,  266,  267,  266,  267,  266,  267,  594,

      322, 1267,  594,  339, 1046,  322, 1267,  731,  181,  182,
      340, 1267, 1045, 1267,  735,  735, 1267, 1267,  735,  341,
      342,  907,  791, 1267, 1267,  791,  735, 1089,  735, 1061,
      909,  791,  791,  791,  322,  791,  791,  910, 1267,  322,
     1267,  908, 1267,  791, 1267,  791,  911,  912,  594,  729,
     1267,  594, 1267, 1267,  729, 1048,  914,  735,  735,  594,
      343,  180,  594, 1267, 1267,  343, 1267,  742,  746,  746,
     1053, 1267,  746, 1267,  791,  791,  791,  181,  182,  791,
      746,  917,  746, 1267, 1051,  911,  911,  791,  343,  911,
      791, 1267, 1093,  343, 1267,  918, 1267,  911, 1267,  911,

      791,  791,  594,  740, 1267,  594, 1267, 1267,  740, 1055,
      924,  746,  746, 1267, 1267,  339, 1267, 1267,  339, 1267,
      339, 1267,  340, 1267, 1060,  340, 1267,  340,  911,  911,
      594,  341,  342,  594,  341,  342,  341,  342,  732,  594,
      594,  339, 1063,  594, 1267,  733, 1066, 1267,  340,  339,
     1267,  594, 1062,  594,  735,  736,  340,  341,  342, 1267,
     1267,  339, 1267, 1267,  339,  341,  342, 1267,  340, 1267,
     1267,  340,  339, 1267,  180, 1267, 1064,  341,  342,  340,
      341,  342,  594,  594,  791,  180,  562,  791,  341,  342,
      181,  182,  919,  791,  791,  562,  562,  791, 1267,  920,

     1267,  181,  182,  339, 1065,  791,  339,  791,  921,  922,
      340,  339, 1091,  340, 1096,  180, 1267,  339,  340,  341,
      342, 1267,  341,  342,  340, 1267,  180,  341,  342, 1069,
     1068,  181,  182,  341,  342, 1100,  791,  791,  791, 1267,
     1067,  791,  181,  182, 1267, 1267,  919,  791,  791,  339,
     1267,  791, 1267,  920,  562, 1267,  340,  339, 1092,  791,
      339,  791,  921,  922,  340,  341,  342,  340,  339, 1267,
     1267, 1267,  371,  341,  342,  340,  341,  342, 1071,  372,
      371, 1070, 1073, 1267,  341,  342, 1072,  372,  373,  374,
      791,  791,  791, 1267, 1081,  791,  373,  374, 1085, 1267,

     1058,  921,  921,  594,  375,  921,  594, 1267, 1267,  375,
     1267,  770, 1267,  921,  180,  921,  791,  791,  594, 1267,
      375,  594, 1267, 1267,  375,  944,  791,  375, 1267,  791,
      181,  182,  375, 1267,  945,  422, 1267, 1267,  774,  774,
     1267, 1267,  774, 1267,  921,  921,  594, 1267, 1075,  594,
      774, 1267,  774, 1267,  743,  594,  594,  594,  768,  594,
      594,  744, 1267,  768, 1267,  951, 1267,  594,  371,  594,
      746,  747, 1267,  371, 1267,  372, 1267, 1267, 1267, 1080,
      372,  774,  774, 1267,  373,  374, 1267, 1267,  180,  373,
      374, 1267, 1267,  778, 1082,  371, 1267, 1267,  594,  594,

      791,  180,  372,  791,  181,  182, 1267, 1267,  946,  791,
      791,  373,  374,  791, 1267,  947, 1083,  181,  182,  371,
     1267,  791, 1267,  791,  948,  949,  372, 1267, 1267, 1267,
      371, 1267, 1267,  180, 1267,  373,  374,  372, 1101, 1084,
     1267, 1267,  791, 1267,  183,  791,  373,  374,  183,  181,
      182, 1267,  791,  791,  791, 1094,  180,  791, 1267, 1267,
     1267, 1267,  946,  791,  791, 1086, 1267,  791, 1267,  947,
      794,  794,  181,  182,  794,  791, 1267,  791,  948,  949,
      791,  183,  794,  791,  794, 1267,  183,  180,  792, 1267,
      791,  592, 1267,  791, 1098, 1267,  592, 1267,  963, 1267,

     1267, 1267,  961,  181,  182, 1267,  791,  791,  791, 1095,
     1267,  791, 1088,  794,  794, 1267, 1078,  948,  948,  594,
      592,  948,  594, 1267, 1267,  592,  180,  797,  180,  948,
      180,  948,  791,  791,  594, 1267,  592,  594,  180, 1267,
      592,  966,  181,  182,  181,  182,  181,  182, 1099, 1267,
     1102,  180, 1267, 1267,  181,  182, 1267,  180, 1267, 1267,
      948,  948,  594, 1267,  180,  594, 1267,  181,  182, 1103,
      771,  594,  594,  181,  182,  594,  180,  772,  180, 1105,
      181,  182,  180,  594,  180,  594,  774,  775, 1104, 1267,
     1267,  180,  181,  182,  181,  182,  180, 1267,  181,  182,

      181,  182, 1267, 1267,  180, 1267, 1107,  181,  182, 1267,
     1267,  180,  181,  182,  594,  594,  791, 1108, 1106,  791,
      181,  182, 1267, 1267,  793,  791,  791,  181,  182,  791,
      180, 1267, 1267,  180, 1267, 1267, 1109,  791,  180,  791,
      794,  795,  180, 1267,  180, 1267,  181,  182,  180,  181,
      182, 1267, 1110, 1267,  181,  182, 1112,  180,  181,  182,
      181,  182, 1267, 1267,  181,  182,  180, 1267,  791,  791,
     1111,  180, 1267,  181,  182,  180, 1267,  180, 1267, 1113,
     1267, 1267,  181,  182,  180, 1267,  180,  181,  182,  180,
     1267,  181,  182,  181,  182,  180, 1267, 1114, 1267,  180,

      181,  182,  181,  182, 1267,  181,  182,  180, 1267,  180,
     1267,  181,  182, 1267, 1115,  181,  182, 1267, 1267, 1267,
     1267, 1116, 1267,  181,  182,  181,  182, 1267, 1117, 1119,
      791,  268, 1118,  791, 1120, 1267,  268, 1267,  865,  791,
     1267,  268,  791,  868,  868,  268,  264,  868,  791,  678,
     1267,  791, 1016,  265,  678,  868, 1018,  868,  594,  678,
     1267,  594,  266,  267,  678, 1267,  871, 1267, 1267, 1267,
     1122,  594, 1267,  678,  594,  264, 1267,  678,  264, 1267,
     1021,  264,  265,  264, 1125,  265,  868,  868,  265, 1267,
      265,  266,  267, 1123,  266,  267, 1124,  266,  267,  266,

      267,  264, 1267, 1267,  264, 1267,  264, 1267,  265, 1127,
     1267,  265, 1267,  265, 1267, 1267, 1267,  266,  267, 1126,
      266,  267,  266,  267,  264, 1267,  264, 1267,  264, 1267,
      264,  265,  264,  265, 1267,  265, 1267,  265, 1267,  265,
      266,  267,  266,  267,  266,  267,  266,  267,  266,  267,
      264, 1267, 1128,  264, 1132, 1267, 1131,  265,  180, 1267,
      265,  264, 1267, 1129,  264, 1130,  266,  267,  265,  266,
      267,  265, 1133, 1267,  181,  182, 1267,  266,  267,  264,
      266,  267,  264, 1267,  264, 1267,  265, 1267, 1267,  265,
     1134,  265, 1135, 1267, 1267,  266,  267, 1267,  266,  267,

      266,  267,  264, 1267, 1137, 1267,  264, 1267,  264,  265,
      264, 1267, 1267,  265, 1136,  265, 1267,  265,  266,  267,
     1267, 1138,  266,  267,  266,  267,  266,  267, 1267,  264,
     1140, 1139,  791,  322, 1267,  791,  265, 1267,  322, 1267,
      908, 1267,  180, 1267, 1141,  266,  267, 1142, 1267,  791,
     1267,  322,  791, 1267, 1048,  322,  911,  911,  181,  182,
      911, 1143, 1267,  791,  729, 1267,  791, 1267,  911,  729,
      911, 1050,  594,  729, 1267,  594, 1267, 1267,  729, 1167,
      914,  594, 1267,  729,  594, 1145, 1267,  729, 1267,  791,
      343, 1267,  791, 1267, 1053,  343, 1267,  918, 1267,  911,

      911,  791, 1267,  343,  791,  921,  921,  343, 1267,  921,
     1267, 1055,  791,  740, 1267,  791, 1267,  921,  740,  921,
     1057,  594,  740, 1267,  594,  180, 1267,  740,  339,  924,
      594, 1267,  740,  594, 1147,  340,  740, 1267, 1267, 1267,
      339,  181,  182, 1060,  341,  342, 1148,  340,  921,  921,
     1267, 1267,  339, 1267,  339, 1267,  341,  342, 1149,  340,
      339,  340, 1267,  180, 1267,  339, 1267,  340,  341,  342,
      341,  342,  340, 1267, 1267, 1267,  341,  342,  339,  181,
      182,  341,  342, 1267, 1267,  340, 1267, 1267, 1267,  339,
     1150,  339, 1151, 1267,  341,  342,  340, 1152,  340, 1267,

     1154, 1267, 1153,  339, 1267,  341,  342,  341,  342,  339,
      340,  562,  791, 1267,  375,  791,  340,  339,  375,  341,
      342, 1267, 1267,  339,  340,  341,  342, 1267, 1155, 1267,
      340, 1157, 1267,  341,  342, 1267, 1267, 1267, 1156,  341,
      342,  180,  791,  375, 1267,  791,  562, 1158,  375, 1267,
      945,  948,  948,  791,  768,  948,  791,  181,  182,  768,
     1267, 1077, 1267,  948, 1075,  948,  594,  768, 1267,  594,
     1267, 1267,  768,  371,  951, 1160,  594, 1267,  768,  594,
      372, 1168,  768, 1267,  371, 1267,  371, 1267, 1080,  373,
      374,  372, 1267,  372,  948,  948, 1267,  371, 1267,  371,

      373,  374,  373,  374,  372, 1267,  372, 1267, 1267,  383,
     1161,  371, 1162,  373,  374,  373,  374, 1267,  372,  791,
     1267,  592,  791,  791,  592,  592,  791,  373,  374,  592,
      180,  963, 1267,  180, 1163, 1164,  180, 1267,  180, 1267,
     1267,  180, 1267,  180, 1267, 1088,  181,  182, 1165,  181,
      182, 1267,  181,  182,  181,  182, 1166,  181,  182,  181,
      182,  180, 1267, 1172,  180, 1267,  180, 1170, 1169, 1267,
     1171,  180,  967,  180, 1267,  180, 1267,  181,  182, 1267,
      181,  182,  181,  182,  180, 1267, 1174,  181,  182,  181,
      182,  181,  182, 1175,  180, 1176,  180, 1267, 1173,  180,

      181,  182,  180, 1267, 1267, 1267,  180, 1267,  180, 1267,
      181,  182,  181,  182,  180,  181,  182,  180,  181,  182,
     1267, 1178,  181,  182,  181,  182,  180, 1267,  180, 1267,
      181,  182, 1267,  181,  182,  180, 1267, 1179,  180, 1177,
      180, 1267,  181,  182,  181,  182,  180, 1267, 1180, 1267,
     1267,  181,  182, 1267,  181,  182,  181,  182, 1267, 1267,
     1267, 1267,  181,  182,  791,  678, 1181,  791, 1267, 1267,
      678, 1267, 1018, 1267, 1182, 1267,  264, 1267, 1183,  791,
     1267,  678,  791,  265,  264,  678, 1122,  264, 1267,  264,
     1267,  265,  266,  267,  265,  264,  265, 1267, 1267,  180,

      266,  267,  265,  266,  267,  266,  267,  264, 1267, 1187,
     1267,  266,  267, 1184,  265,  181,  182, 1267,  264, 1267,
      264, 1185, 1186,  266,  267,  265, 1188,  265, 1267, 1267,
      180, 1267,  264, 1267,  266,  267,  266,  267,  264,  265,
     1189, 1267, 1267, 1267,  264,  265,  181,  182,  266,  267,
      264,  265, 1213, 1267,  266,  267, 1267,  265,  264, 1192,
      266,  267, 1190, 1191,  264,  265,  266,  267, 1193,  264,
     1267,  265,  264, 1267,  266,  267,  265,  264, 1267,  265,
      266,  267, 1267, 1267,  265,  266,  267, 1267,  266,  267,
     1267, 1267,  264,  266,  267,  264, 1267, 1194, 1196,  265,

     1195, 1267,  265,  264, 1267, 1267,  264, 1267,  266,  267,
      265,  266,  267,  265, 1267,  791, 1267,  729,  791,  266,
      267,  729,  266,  267,  791,  729, 1267,  791, 1267, 1267,
      729, 1198, 1050, 1267, 1197, 1267, 1267, 1267, 1200, 1199,
     1267,  791,  740, 1267,  791, 1267, 1145,  740,  339, 1057,
      791, 1267,  740,  791,  339,  340,  740, 1267, 1267,  339,
     1267,  340,  339, 1147,  341,  342,  340,  339, 1267,  340,
      341,  342, 1267, 1267,  340,  341,  342, 1267,  341,  342,
      339, 1267, 1204,  341,  342, 1201,  339,  340,  339, 1205,
     1267, 1202,  339,  340, 1203,  340,  341,  342, 1267,  340,

     1267, 1267,  341,  342,  341,  342,  562,  562,  341,  342,
      339, 1267,  339, 1267, 1267,  791,  768,  340,  791,  340,
     1267,  768, 1206, 1077, 1267, 1207,  341,  342,  341,  342,
      791, 1267,  768,  791, 1267,  371,  768, 1160, 1267,  371,
     1267, 1208,  372,  371, 1267, 1267,  372, 1267, 1267, 1267,
      372,  373,  374, 1267,  562,  373,  374,  371, 1267,  373,
      374,  371, 1267,  180,  372,  180, 1209,  180,  372, 1211,
     1210,  180, 1267,  373,  374,  180, 1267,  373,  374,  181,
      182,  181,  182,  181,  182, 1214, 1267,  181,  182,  180,
     1267,  181,  182, 1212,  180, 1267, 1215,  383,  180, 1267,

      180, 1267, 1217, 1267, 1216,  181,  182,  180, 1267,  180,
      181,  182, 1267, 1267,  181,  182,  181,  182,  180, 1218,
      180, 1267,  180,  181,  182,  181,  182,  180, 1267, 1219,
      180, 1267, 1267, 1267,  181,  182,  181,  182,  181,  182,
     1267,  264, 1267,  181,  182, 1220,  181,  182,  265,  264,
     1267, 1267, 1267, 1267, 1267,  264,  265,  266,  267, 1221,
     1267,  264,  265,  180, 1267,  266,  267, 1223,  265,  264,
     1222,  266,  267, 1225,  264, 1224,  265,  266,  267,  181,
      182,  265, 1267, 1267,  180,  266,  267,  264, 1267, 1267,
      266,  267,  264,  905,  265,  264, 1267,  514, 1226,  265,

      181,  182,  265,  266,  267, 1227,  264, 1267,  266,  267,
      264,  266,  267,  265,  264, 1267,  905,  265, 1267, 1267,
      967,  265,  266,  267, 1267,  264,  266,  267, 1267,  264,
      266,  267,  265,  264, 1229, 1228,  265,  264, 1267, 1267,
      265,  266,  267, 1267,  265,  266,  267, 1267, 1267,  266,
      267,  264, 1267,  266,  267, 1231, 1230,  339,  265,  339,
     1267, 1267, 1267, 1267,  340,  339,  340,  266,  267, 1267,
      339, 1267,  340,  341,  342,  341,  342,  340,  180, 1232,
     1267,  341,  342, 1233,  339, 1234,  341,  342, 1235,  339,
     1267,  340, 1267, 1267,  181,  182,  340,  339, 1267,  562,

      341,  342, 1236,  339,  340,  341,  342, 1267, 1267,  371,
      340,  371, 1267,  341,  342, 1237,  372, 1267,  372,  341,
      342,  180, 1238, 1239,  371,  373,  374,  373,  374,  371,
     1267,  372,  180,  383, 1267,  383,  372,  181,  182, 1267,
      373,  374,  180, 1267,  180,  373,  374,  180,  181,  182,
      180, 1241, 1267, 1267,  180, 1240, 1267,  825,  181,  182,
      181,  182, 1267,  181,  182,  264,  181,  182,  264, 1242,
      181,  182,  265,  264, 1267,  265, 1243,  180, 1267,  264,
      265,  266,  267, 1267,  266,  267,  265, 1267, 1267,  266,
      267, 1267,  264,  181,  182,  266,  267, 1267,  264,  265,

      180, 1267, 1267, 1267, 1244,  265,  264, 1245,  266,  267,
     1246, 1247, 1267,  265,  266,  267,  181,  182,  264, 1267,
      264, 1267,  266,  267, 1249,  265, 1267,  265, 1250, 1248,
     1267,  264, 1257,  339,  266,  267,  266,  267,  265, 1267,
      340, 1267,  905, 1267,  339, 1267,  339,  266,  267,  341,
      342,  340,  339,  340, 1267, 1267, 1251,  339, 1267,  340,
      341,  342,  341,  342,  340, 1267, 1267, 1267,  341,  342,
      339, 1267, 1252,  341,  342,  339, 1267,  340, 1255, 1267,
     1267, 1267,  340, 1253, 1267,  180,  341,  342,  371, 1254,
     1267,  341,  342,  371,  562,  372, 1256,  562, 1267, 1267,

      372,  181,  182, 1267,  373,  374,  264, 1267,  264,  373,
      374, 1267,  383,  265, 1267,  265, 1267, 1267, 1267,  264,
     1267,  995,  266,  267,  266,  267,  265,  264, 1258,  383,
     1259,  264, 1267,  264,  265,  266,  267, 1267,  265,  264,
      265, 1267, 1267,  266,  267, 1260,  265,  266,  267,  266,
      267,  264, 1267, 1261,  339,  266,  267,  339,  265, 1267,
     1267,  340,  691, 1267,  340,  339, 1267,  266,  267, 1267,
      341,  342,  340,  341,  342, 1267,  562,  339, 1267,  562,
      339,  341,  342, 1267,  340,  180, 1267,  340,  264, 1267,
     1267, 1262,  264,  341,  342,  265,  341,  342, 1267,  265,

      562,  181,  182,  264,  266,  267,  264, 1267,  266,  267,
      265,  339,  562,  265,  264, 1267, 1263,  339,  340,  266,
      267,  265,  266,  267,  340,  264, 1267,  341,  342, 1267,
      266,  267,  265,  341,  342, 1264, 1267, 1267, 1267, 1267,
     1267,  266,  267, 1265, 1267, 1266, 1267, 1267,  562,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  170,  170,  170,  170,  170,  170,  170,

      170,  170,  170,  170,  179,  179, 1267, 1267,  179,  179,
      179,  183, 1267,  183,  183,  183,  183,  183,  183,  183,
      183,  263,  263, 1267, 1267,  263,  263,  263,  268, 1267,
      268,  268,  268,  268,  268,  268,  268,  268,  317,  317,
     1267, 1267,  317,  317,  317,  322, 1267,  322,  322,  322,
      322,  322,  322,  322,  322,  338,  338, 1267, 1267,  338,
      338,  338,  343, 1267,  343,  343,  343,  343,  343,  343,
      343,  343,  370,  370, 1267, 1267,  370,  370,  370,  375,
     1267,  375,  375,  375,  375,  375,  375,  375,  375,  401,
     1267, 1267, 1267,  401, 1267,  401,  401, 1267,  401,  401,

      405, 1267, 1267,  405,  405, 1267,  405,  405,  405,  405,
      405,  406,  406, 1267,  406,  406,  406,  406,  406,  406,
      406,  406,  407, 1267,  407,  407, 1267, 1267,  407, 1267,
      407,  409,  409,  409,  409,  409, 1267,  409,  496,  496,
      496,  496,  496, 1267,  496,  540,  540,  540,  540,  540,
     1267,  540,  550,  550,  550,  550,  550, 1267,  550,  576,
      576,  576,  576,  576, 1267,  576,  592, 1267,  592,  592,
      592,  592,  592,  592,  592,  592,  595, 1267, 1267, 1267,
      595,  595,  595,  595,  595,  595,  595,  678, 1267,  678,
      678,  678,  678,  678,  678,  678,  678,  680, 1267, 1267,

     1267,  680,  680,  680,  680,  680,  680,  680,  729, 1267,
      729,  729,  729,  729,  729,  729,  729,  729,  731, 1267,
     1267, 1267,  731,  731,  731,  731,  731,  731,  731,  594,
     1267, 1267, 1267,  594,  594,  594,  594,  594,  594,  594,
      740, 1267,  740,  740,  740,  740,  740,  740,  740,  740,
      742, 1267, 1267, 1267,  742,  742,  742,  742,  742,  742,
      742,  768, 1267,  768,  768,  768,  768,  768,  768,  768,
      768,  770, 1267, 1267, 1267,  770,  770,  770,  770,  770,
      770,  770,  789,  789, 1267,  789,  789,  789,  789,  789,
      789,  789,  789,  792, 1267, 1267, 1267,  792,  792,  792,

      792,  792,  792,  792,  797, 1267, 1267, 1267,  797,  797,
      797,  797,  797,  797,  797,  863,  863, 1267,  863,  863,
      863,  863,  863,  863,  863,  863,  865, 1267, 1267, 1267,
      865,  865,  865,  865,  865,  865,  865,  871, 1267, 1267,
     1267,  871,  871,  871,  871,  871,  871,  871,  906,  906,
     1267,  906,  906,  906,  906,  906,  906,  906,  906,  908,
     1267, 1267, 1267,  908,  908,  908,  908,  908,  908,  908,
      914, 1267, 1267, 1267,  914,  914,  914,  914,  914,  914,
      914,  791, 1267, 1267, 1267,  791,  791,  791,  791,  791,
      791,  791,  916,  916, 1267,  916,  916,  916,  916,  916,

      916,  916,  916,  918, 1267, 1267, 1267,  918,  918,  918,
      918,  918,  918,  918,  924, 1267, 1267, 1267,  924,  924,
      924,  924,  924,  924,  924,  943,  943, 1267,  943,  943,
      943,  943,  943,  943,  943,  943,  945, 1267, 1267, 1267,
      945,  945,  945,  945,  945,  945,  945,  951, 1267, 1267,
     1267,  951,  951,  951,  951,  951,  951,  951,  960,  960,
     1267,  960,  960,  960,  960,  960,  960,  960,  960,  963,
     1267, 1267, 1267,  963,  963,  963,  963,  963,  963,  963,
      965,  965, 1267,  965,  965,  965,  965,  965,  965,  965,
      965, 1015, 1015, 1267, 1015, 1015, 1015, 1015, 1015, 1015,

     1015, 1015, 1018, 1267, 1267, 1267, 1018, 1018, 1018, 1018,
     1018, 1018, 1018,  680, 1267, 1267, 1267,  680,  680,  680,
      680,  680,  680,  680, 1020, 1020, 1267, 1020, 1020, 1020,
     1020, 1020, 1020, 1020, 1020,  263,  263, 1267, 1267,  263,
      263,  263, 1047, 1047, 1267, 1047, 1047, 1047, 1047, 1047,
     1047, 1047, 1047, 1050, 1267, 1267, 1267, 1050, 1050, 1050,
     1050, 1050, 1050, 1050,  731, 1267, 1267, 1267,  731,  731,
      731,  731,  731,  731,  731, 1052, 1052, 1267, 1052, 1052,
     1052, 1052, 1052, 1052, 1052, 1052,  916,  916, 1267,  916,
      916,  916,  916,  916,  916,  916,  916,  918, 1267, 1267,

     1267,  918,  918,  918,  918,  918,  918,  918, 1054, 1054,
     1267, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1057,
     1267, 1267, 1267, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
      742, 1267, 1267, 1267,  742,  742,  742,  742,  742,  742,
      742, 1059, 1059, 1267, 1059, 1059, 1059, 1059, 1059, 1059,
     1059, 1059,  338,  338, 1267, 1267,  338,  338,  338,  943,
      943, 1267,  943,  943,  943,  943,  943,  943,  943,  943,
      945, 1267, 1267, 1267,  945,  945,  945,  945,  945,  945,
      945, 1074, 1074, 1267, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1077, 1267, 1267, 1267, 1077, 1077, 1077, 1077,

     1077, 1077, 1077,  770, 1267, 1267, 1267,  770,  770,  770,
      770,  770,  770,  770, 1079, 1079, 1267, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079,  370,  370, 1267, 1267,  370,
      370,  370,  960,  960, 1267,  960,  960,  960,  960,  960,
      960,  960,  960,  791, 1267, 1267, 1267,  791,  791,  791,
      791,  791,  791,  791,  792, 1267, 1267, 1267,  792,  792,
      792,  792,  792,  792,  792, 1087, 1087, 1267, 1087, 1087,
     1087, 1087, 1087, 1087, 1087, 1087,  965,  965, 1267,  965,
      965,  965,  965,  965,  965,  965,  965,  179,  179, 1267,
     1267,  179,  179,  179, 1121, 1121, 1267, 1121, 1121, 1121,

     1121, 1121, 1121, 1121, 1121, 1144, 1144, 1267, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144, 1146, 1146, 1267, 1146,
     1146, 1146, 1146, 1146, 1146, 1146, 1146, 1159, 1159, 1267,
     1159, 1159, 1159, 1159, 1159, 1159, 1159, 1159,   23, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267

    } ;

static yyconst flex_int16_t yy_chk[8496] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    7,    7,
        7,    7,    7,    7,   19,   25,   19,   19,    7,   25,
       25,    7,    8,    8,    8,    8,    8,    8,   20,  178,
       20,   20,    8,  178,  178,    8,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   13,   13,
       13,   13,   13,   13,  948,   15,   15,   28,   15,   15,
       15,  921,   15,   16,   16,   29,   16,   16,   16,   62,
       16,  911,   90,   28,   28,   13,   15,   13,  868,   29,
      797,   13,   13,   62,   16,   13,   90,   13,   13,   31,
       13,   13,   31,   13,   13,   17,   17,  794,   17,   17,
       18,   18,   17,   18,   18,   31,   31,   18,   21,   33,
       21,   21,   21,   21,  109,   33,   21,   21,   21,   34,
      138,   35,  772,   36,  598,   33,   33,   37,  109,  598,
       21,   36,   36,   39,  138,   34,   34,   35,   35,   36,

       36,   38,   38,   37,   37,   38,  175,  175,  770,   39,
       39,  180,   39,   38,   39,   38,  184,  184,  744,   40,
       21,   21,   39,   21,   22,  180,   22,   22,   22,   22,
       39,   41,   22,   22,   22,   40,   40,  269,  269,  323,
      323,  742,   42,  738,   38,   38,   22,   41,   41,  175,
      175,   40,   41,   43,   40,   46,  737,   40,   42,   42,
       41,   41,  733,   41,   42,   47,   41,   44,  731,   43,
       43,   46,   46,   45,   42,  682,   22,   22,  183,   22,
       42,   47,   47,   44,   44,   43,   46,   43,   43,   45,
       45,   47,  183,   45,   43,   45,   44,   44,   48,   44,

      680,   49,   44,  595,   44,  344,  344,  591,   45,  590,
      163,  549,  163,  548,   48,   48,   48,   49,   49,   49,
       49,   50,  264,   49,  547,   51,  163,   49,  546,   52,
       48,  376,  376,   49,   48,   53,  264,   50,   50,   50,
      545,   51,   51,   50,   51,   52,   52,   52,   51,   56,
      544,   53,   53,   50,   54,   51,   51,  684,   51,   50,
      400,   52,  684,   57,   52,   56,   56,   52,  268,   52,
       54,   54,   54,   53,   56,   56,   54,  318,  399,   57,
       57,   58,  268,   54,   56,  337,  322,  339,   59,  593,
      593,  318,   54,   55,   57,   61,  336,   58,   58,   58,

      322,  339,   61,   58,   59,   59,  343,   58,  335,   55,
       55,   61,   61,   59,   59,   55,   60,  334,   55,   64,
      343,  179,   64,   55,  735,   55,   64,   65,   55,  735,
       55,   55,   60,   60,   65,   64,   64,  179,  179,  107,
       60,   66,  106,   65,   65,   67,   60,   66,   66,  746,
      371,  375,   67,   66,  746,   67,   68,   66,   66,   69,
       23,   67,   67,   68,  371,  375,   69,    0,   68,  410,
       70,   70,   68,   68,   70,   69,   69,  497,    0,   71,
        0,   73,   70,  410,   70,   75,   71,   74,   73,  181,
        0,  497,   75,   76,   74,   71,   71,   73,   73,    0,

       76,   75,   75,   74,   74,  181,  181,   73,  541,   76,
       76,   76,    0,   70,   70,   71,   72,   75,   74,   86,
       75,   74,  541,   72,   78,  551,   86,    0,   74,  774,
      577,   78,   72,   72,  774,   86,   86,    0,   72,  551,
       78,   78,   79,   78,  577,   72,   72,    0,   72,   79,
       72,   72,  592,   72,   77,   86,   87,    0,   79,   79,
       79,   77,   80,   87,   79,    0,  592,    0,  678,   80,
       77,   77,   87,   87,   87,   77,   81,   77,   80,   80,
       82,   80,  678,   81,   80,   77,  185,   82,  196,  185,
       77,   77,   81,   81,   83,   81,   82,   82,   80,  729,

       84,   83,  185,  185,  196,  196,    0,   84,  189,   81,
       83,   83,   82,  729,   85,   82,   84,   84,  679,  679,
       83,   85,    0,   83,  189,  189,    0,   88,  730,  730,
       85,   85,   84,   84,   88,   89,   85,   84,   84,   88,
      189,   96,   89,   88,   88,  740,   85,   92,   96,   93,
       92,   89,   89,    0,   92,   93,   93,   96,   96,  740,
        0,  190,    0,   92,   92,   93,   93,   94,   94,   94,
       94,   94,   94,    0,   94,    0,   95,  190,  190,   97,
        0,   94,    0,   95,   95,   95,   97,   99,  768,  193,
       94,   94,   95,   95,   99,   97,   97,   98,   98,    0,

      190,   98,  768,   99,   99,  193,  193,  195,    0,   98,
      193,   98,  102,  102,  102,  102,  102,  102,   99,  741,
      741,  202,  102,  195,  195,  102,  104,  104,  104,  104,
      104,  104,    0,  195,  769,  769,  104,  202,  202,  104,
       98,   98,  105,  105,  105,  105,  105,  105,    0,  108,
        0,  112,  105,  114,  112,  105,  108,  115,  112,  114,
      114,    0,    0,  192,  115,  108,  108,  112,  112,  114,
      114,  116,    0,  115,  115,  120,    0,  117,  116,  192,
      192,    0,  120,    0,  117,    0,    0,  116,  116,  117,
        0,  120,  120,  117,  117,  121,  121,  122,  380,  121,

      192,  124,    0,  123,  122,  380,  380,  121,  124,  121,
      123,  380,  194,  122,  122,  125,    0,  124,  124,  123,
      123,    0,  125,    0,    0,    0,    0,  124,  194,  194,
        0,  125,  125,  122,  194,  123,  126,    0,  121,  121,
      123,  127,    0,  126,  134,    0,    0,  125,  127,  128,
      125,  134,  126,  126,  126,    0,  128,  127,  127,  777,
      134,  134,  127,  129,  127,  128,  128,  128,  777,    0,
      129,  128,  777,  777,  130,  777,  134,    0,  127,  129,
      129,  130,    0,    0,    0,  129,    0,  131,    0,  132,
      130,  130,  186,  130,  131,  133,  132,  205,  186,  129,

      137,    0,  133,  131,  131,  132,  132,  137,  186,  186,
        0,  133,  133,  205,  205,  132,  137,  137,  139,  131,
      140,  139,  131,  141,    0,  139,  140,  140,  133,    0,
      141,  142,  133,  205,  139,  139,  140,  140,  142,  141,
      141,  143,  143,  145,  198,  143,    0,  142,  142,    0,
      145,  145,  145,  143,    0,  143,  145,  146,    0,  147,
      198,  198,  145,  148,  146,  198,  147,    0,    0,    0,
      148,    0,    0,  146,  146,  147,  147,    0,  147,  148,
      148,    0,  148,    0,  143,  143,  144,    0,  146,  149,
        0,    0,    0,  144,  150,    0,  149,  151,    0,  148,

        0,  150,  144,  144,  151,  149,  149,    0,  144,    0,
      150,  150,    0,  151,  151,  144,  144,  152,    0,  187,
      144,  144,  149,  153,  152,  154,  151,  187,  187,  150,
      153,  197,  154,  152,  152,  187,  187,    0,    0,  153,
      153,  154,  154,  154,    0,    0,    0,  197,  197,  152,
        0,    0,    0,  197,    0,  152,    0,    0,    0,  153,
      155,  155,  155,  155,  155,  155,    0,  182,  182,  182,
      155,    0,  182,  155,  157,  157,  157,  157,  157,  157,
      182,    0,  182,    0,  157,    0,  199,  157,  158,  158,
      158,  158,  158,  158,    0,  188,  188,  191,  158,  188,

        0,  158,  199,  199,    0,  200,    0,  188,    0,  188,
        0,  182,  182,  191,  191,  199,  199,  199,  201,    0,
        0,  200,  200,  191,  199,  203,  191,  200,  204,    0,
      206,    0,    0,  207,  201,  201,    0,  201,  188,  188,
      208,  203,  203,  209,  204,  204,  206,  206,  210,  207,
      207,  204,  206,  207,  201,  203,  208,  208,  208,  209,
      209,    0,  211,    0,  210,  210,    0,    0,    0,  212,
      207,  213,    0,  214,    0,  209,  218,    0,  211,  211,
      215,    0,    0,  210,  211,  212,  212,  213,  213,  214,
      214,  216,  218,  218,  212,  218,  215,  215,  215,  217,

        0,  219,    0,    0,  220,    0,  221,  216,  216,  222,
      214,  216,  223,    0,    0,  217,  217,  219,  219,  219,
      220,  220,  221,  221,  224,  222,  222,    0,  223,  223,
      217,  225,    0,  219,  226,    0,    0,  227,    0,  228,
      224,  224,  223,  221,  230,  222,  229,  225,  225,    0,
      226,  226,  225,  227,  227,  228,  228,    0,    0,    0,
      230,  230,  229,  229,  231,  224,  232,    0,  233,  226,
        0,  230,  234,    0,  228,  235,  229,  227,  236,    0,
      231,  231,  232,  232,  233,  233,    0,  231,  234,  234,
      237,  235,  235,    0,  236,  236,    0,  238,  232,    0,

        0,    0,  239,    0,  240,    0,  237,  237,  234,  241,
      235,  236,  235,  238,  238,  242,  237,    0,  239,  239,
      240,  240,  237,  239,  243,  241,  241,  244,    0,    0,
      240,  242,  242,  238,    0,    0,  242,    0,    0,    0,
      243,  243,  248,  244,  244,  245,  241,    0,  246,    0,
      249,  242,  247,    0,  242,  242,  244,    0,  248,  248,
      243,  245,  245,  245,  246,  246,  249,  249,  247,  247,
      250,    0,  249,  252,  245,    0,    0,  248,  251,    0,
      246,    0,  245,  253,  247,  254,  250,  250,  250,  252,
      252,    0,  250,  255,  251,  251,    0,  251,  256,  253,

      253,  254,  254,  254,  257,    0,  258,    0,  251,  255,
      255,    0,    0,  253,  256,  256,    0,    0,  259,  255,
      257,  257,  258,  258,    0,  260,    0,  262,  258,    0,
      261,    0,    0,  256,  259,  259,  261,    0,    0,  257,
      259,  260,  260,  262,  262,  262,  261,  261,  263,    0,
      259,  265,    0,  266,    0,  263,    0,    0,  265,    0,
      266,    0,  260,    0,  263,  263,    0,  265,  265,  266,
      266,  267,  267,  267,  270,    0,  267,  270,  272,    0,
      273,  270,  271,    0,  267,  272,  267,  273,  271,  271,
      270,  270,    0,  274,  272,  272,  273,  273,  271,  271,

      274,    0,    0,    0,    0,    0,  276,  275,  275,  274,
      274,  275,  409,  276,    0,  267,  267,    0,  277,  275,
      278,  275,  276,  276,  279,  277,    0,  278,  409,  409,
      413,  279,  280,    0,  277,  277,  278,  278,  278,  280,
      279,  279,  276,  279,    0,    0,  413,  413,  280,  280,
      275,  275,  277,  281,    0,    0,    0,  282,    0,  283,
      281,  284,  280,  280,  282,  413,  283,    0,  284,  281,
      281,    0,  285,  282,  282,  283,  283,  284,  284,  285,
      286,    0,    0,  287,    0,    0,  282,  286,  285,  285,
      287,  283,    0,  285,  288,    0,  286,  286,  284,  287,

      287,  288,  289,    0,    0,  290,    0,  292,    0,  289,
      288,  288,  290,    0,  292,  414,    0,    0,  289,  289,
      287,  290,  290,  292,  292,    0,    0,    0,  293,  288,
      291,  414,  414,    0,  289,  293,  291,  291,  416,    0,
      291,  414,  290,  294,  293,  293,  291,  291,  293,  295,
      294,  296,  291,    0,  416,  416,  295,  297,  296,  294,
      294,    0,  298,    0,  297,  295,  295,  296,  296,  298,
      299,  295,    0,  297,  297,    0,  297,  299,  298,  298,
      300,  301,  300,  296,  302,  298,  299,  299,  301,  300,
      300,  302,    0,    0,  297,  300,  300,  301,  301,  304,

      302,  302,  303,    0,  415,  301,  304,  305,  303,  303,
      306,  302,    0,    0,  305,  304,  304,  306,  303,  303,
      415,  415,  415,  305,  305,  307,  306,  306,  304,  305,
      308,    0,  307,  309,  306,    0,  310,  308,  303,  305,
      309,  307,  307,  310,  311,    0,  308,  308,    0,  309,
      309,  311,  310,  310,    0,  309,    0,  312,    0,  313,
      311,  311,  314,  311,  312,  308,  313,    0,    0,  314,
      315,  310,    0,  312,  312,  313,  313,  315,  314,  314,
        0,    0,  316,    0,  317,    0,  315,  315,  314,  316,
      319,  317,  312,    0,    0,  320,    0,  319,  316,  316,

      317,  317,  320,    0,    0,  315,  319,  319,  321,  321,
      321,  320,  320,  321,    0,  324,  329,  329,  324,  325,
      329,  321,  324,  321,    0,  325,  325,  330,  329,    0,
      329,  324,  324,    0,  330,  325,  325,  326,  326,  326,
      326,  326,  326,  330,  330,  419,    0,  326,  328,    0,
      326,    0,  321,  321,    0,  328,  328,  328,    0,  329,
      329,  419,  419,  419,  328,  328,  331,  331,  331,  331,
      331,  331,    0,  342,  342,  342,  331,    0,  342,  331,
      333,  333,  333,  333,  333,  333,  342,  338,  342,  340,
      333,  341,    0,  333,  338,    0,  340,    0,  341,    0,

        0,    0,    0,  338,  338,  340,  340,  341,  341,  345,
        0,    0,  345,  346,    0,  347,  345,  342,  342,  346,
      346,    0,  347,  348,  348,  345,  345,  348,    0,  346,
      346,  347,  347,  349,    0,  348,  351,  348,  352,    0,
      349,  350,    0,  351,  353,  352,  417,    0,  350,  349,
      349,  353,  351,  351,  352,  352,    0,  350,  350,    0,
      353,  353,  417,  417,    0,    0,  348,  348,  351,  349,
      354,  350,  350,  355,    0,  352,  357,  354,  356,  353,
      355,  417,    0,  357,    0,  356,  354,  354,  356,  355,
      355,  358,  357,  357,  356,  356,    0,    0,  358,  359,

      356,    0,  354,    0,  360,    0,  359,  358,  358,  418,
      355,  360,  361,  358,    0,  359,  359,  362,    0,  361,
      360,  360,    0,  363,  362,  418,  418,  360,  361,  361,
      363,    0,    0,  362,  362,    0,  359,  364,    0,  363,
      363,  362,  361,  422,  364,  365,    0,    0,  361,  361,
      363,  418,  365,  364,  364,    0,  366,    0,    0,  422,
      422,  365,  365,  366,    0,    0,  364,  365,  367,    0,
      368,    0,  366,  366,    0,  367,  369,  368,    0,    0,
      366,  370,    0,  369,  367,  367,  368,  368,  370,    0,
      367,  421,  369,  369,  372,    0,  373,  370,  370,    0,

        0,  372,    0,  373,    0,  368,  423,  421,  421,  421,
      372,  372,  373,  373,  374,  374,  374,  377,    0,  374,
      377,    0,  423,  423,  377,  378,    0,  374,    0,  374,
        0,  378,  378,  377,  377,  379,  379,  381,  423,  379,
        0,  378,  378,    0,  381,  382,    0,  379,    0,  379,
      383,    0,  382,  381,  381,  381,  384,  383,  374,  374,
        0,  382,  382,  384,  382,    0,  383,  383,    0,    0,
      385,    0,  384,  384,    0,    0,  386,  385,  379,  379,
        0,  387,    0,  386,    0,  384,  385,  385,  387,  388,
        0,  385,  386,  386,    0,  389,  388,  387,  387,    0,

      390,  387,  389,    0,    0,  388,  388,  390,  391,    0,
        0,  389,  389,  386,    0,  391,  390,  390,    0,  389,
        0,  388,  392,    0,  391,  391,  393,    0,    0,  392,
      394,    0,    0,  393,  395,    0,  390,  394,  392,  392,
      391,  395,  393,  393,    0,  393,  394,  394,    0,  420,
      395,  395,    0,    0,    0,    0,  394,  392,  396,  396,
      396,  396,  396,  396,  428,  420,  420,  424,  396,  395,
        0,  396,  398,  398,  398,  398,  398,  398,  420,    0,
      428,  428,  398,  424,  424,  398,  411,  427,    0,  411,
        0,    0,    0,    0,  411,  411,  411,  424,  425,  411,

      424,    0,  428,  427,  427,  426,  411,  411,  427,  411,
      411,  411,  429,    0,  425,  425,  431,    0,  425,  425,
        0,  426,  426,    0,    0,  430,    0,    0,  429,  429,
      432,    0,  431,  431,  429,  425,  426,    0,  411,  411,
      412,  430,  430,  412,    0,    0,  432,  432,  412,  412,
      412,  433,    0,  412,  434,    0,  435,    0,  430,  436,
      412,  412,    0,  412,  412,  412,    0,  433,  433,  437,
      434,  434,  435,  435,    0,  436,  436,    0,  435,    0,
        0,  438,    0,  434,  439,  437,  437,  440,    0,  441,
      437,  433,  412,  412,    0,    0,  436,  438,  438,  442,

      439,  439,  443,  440,  440,  441,  441,    0,    0,  444,
        0,  438,    0,  445,    0,  442,  442,    0,  443,  443,
      446,    0,  441,  443,  439,  444,  444,  447,  442,  445,
      445,  444,  448,    0,  445,  449,  446,  446,  450,    0,
      451,    0,  452,  447,  447,    0,  453,  447,  448,  448,
        0,  449,  449,  446,  450,  450,  451,  451,  452,  452,
        0,  450,  453,  453,  454,    0,  455,  449,    0,    0,
      456,    0,  457,    0,  458,  453,    0,  452,  451,  459,
      454,  454,  455,  455,    0,  455,  456,  456,  457,  457,
      458,  458,  460,  457,  454,  459,  459,  461,    0,    0,

        0,  459,    0,  462,    0,  463,    0,  464,  460,  460,
      465,    0,    0,  461,  461,  459,    0,  460,  461,  462,
      462,  463,  463,  464,  464,    0,  465,  465,  463,  466,
        0,  467,  464,  468,  462,  469,    0,  470,    0,  471,
        0,    0,  463,    0,  472,  466,  466,  467,  467,  468,
      468,  469,  469,  470,  470,  471,  471,  467,    0,  470,
      472,  472,  473,    0,  474,    0,  466,    0,    0,  475,
        0,  468,  476,  469,  471,    0,  477,    0,  473,  473,
      474,  474,    0,    0,  473,  475,  475,  478,  476,  476,
      479,  475,  477,  477,  480,    0,  481,    0,    0,  474,

        0,    0,  482,  478,  478,  483,  479,  479,  478,  484,
      480,  480,  481,  481,  485,  480,  477,    0,  482,  482,
        0,  483,  483,    0,    0,  484,  484,  479,  486,    0,
      485,  485,    0,  481,  480,  482,  485,  487,    0,  484,
      485,  483,  488,    0,  486,  486,  489,    0,  486,    0,
      490,    0,    0,  487,  487,    0,  491,    0,  488,  488,
      487,    0,  489,  489,  492,  489,  490,  490,  488,  493,
        0,  494,  491,  491,    0,    0,    0,    0,  488,  495,
      492,  492,  496,    0,  604,  493,  493,  494,  494,  496,
      490,  491,    0,  492,  493,  495,  495,  500,  496,  496,

      604,  604,  494,    0,  500,  502,    0,    0,  504,    0,
      504,    0,  502,  500,  500,    0,  495,  498,  504,    0,
      498,  502,  502,  504,  504,  498,  498,  498,  501,  500,
      498,  603,  498,  605,    0,  501,  503,  498,  498,  505,
      498,  498,  498,  503,  501,  501,  505,  603,  603,  605,
      605,  507,  503,  503,    0,  505,  505,  603,  507,  609,
        0,  605,    0,    0,  501,    0,  503,  507,  507,  498,
      498,  499,    0,    0,  499,  609,  609,  609,    0,  499,
      499,  499,  506,    0,  499,    0,  499,  607,  507,  506,
      509,  499,  499,    0,  499,  499,  499,  509,  506,  506,

      508,    0,  508,  607,  607,    0,  509,  509,    0,  508,
      508,  508,  509,  510,    0,  508,  508,  506,  508,  511,
      510,  512,  607,  499,  499,  513,  511,    0,  512,  510,
      510,    0,  513,    0,    0,  511,  511,  512,  512,    0,
      514,  513,  513,  510,  515,    0,  512,  514,  516,  511,
      513,  515,  517,    0,    0,  516,  514,  514,    0,  517,
      515,  515,  511,  518,  516,  516,  519,    0,  517,  517,
      518,    0,    0,  519,  515,  515,    0,  516,  520,  518,
      518,    0,  519,  519,    0,  520,  521,  517,  519,  522,
        0,  523,    0,  521,  520,  520,  522,  524,  523,    0,

      520,  600,  521,  521,  524,  522,  522,  523,  523,  525,
        0,    0,  526,  524,  524,  524,  525,  600,  600,  526,
        0,  522,    0,  521,  527,  525,  525,  523,  526,  526,
      528,  527,    0,    0,  526,  529,    0,  528,  600,    0,
      527,  527,  529,  530,    0,  525,  528,  528,  531,  527,
      530,  529,  529,    0,  532,  531,    0,    0,    0,  530,
      530,  532,    0,  530,  531,  531,  533,    0,    0,    0,
      532,  532,    0,  533,  534,    0,    0,  529,    0,  532,
      535,  534,  533,  533,    0,  531,    0,  535,  536,    0,
      534,  534,    0,  537,  534,  536,  535,  535,  535,  538,

      537,    0,    0,  533,  536,  536,  538,    0,  536,  537,
      537,  539,    0,    0,    0,  538,  538,    0,  539,  540,
        0,    0,  550,  537,  536,  555,  540,  539,  539,  550,
      538,    0,  555,  554,    0,  540,  540,  559,  550,  550,
      554,  555,  555,    0,  559,    0,    0,  539,  542,  554,
      554,  542,    0,  559,  559,  555,  542,  542,  542,  556,
        0,  542,  601,  542,    0,  554,  556,  559,  542,  542,
      558,  542,  542,  542,  557,  556,  556,  558,  601,  601,
        0,  557,  556,    0,    0,    0,  558,  558,    0,    0,
      557,  557,    0,    0,    0,  556,    0,  560,  601,    0,

      542,  542,  543,  610,  560,  543,    0,  558,    0,  557,
      543,  543,  543,  560,  560,  543,    0,  543,    0,  610,
      610,  561,  543,  543,    0,  543,  543,  543,  561,  610,
        0,    0,  562,    0,    0,  610,  565,  561,  561,  562,
      560,    0,    0,  565,  563,    0,  561,    0,  562,  562,
        0,  563,  565,  565,  543,  543,  552,    0,  565,  552,
      563,  563,    0,    0,  552,  552,  552,    0,    0,  552,
        0,  552,    0,    0,  563,  563,  552,  552,  566,  552,
      552,  552,  564,    0,  567,  566,  568,    0,  602,  564,
      570,  567,    0,  568,  566,  566,    0,  570,  564,  564,

      567,  567,  568,  568,  602,  602,  570,  570,  552,  552,
      553,    0,  570,  553,    0,  566,  567,  564,  553,  553,
      553,  569,  568,  553,  602,  553,    0,  612,  569,  571,
      553,  553,    0,  553,  553,  553,  571,  569,  569,  569,
      572,    0,  573,  612,  612,  571,  571,  572,  574,  573,
        0,    0,    0,  612,    0,  574,  572,  572,  573,  573,
      572,  615,  553,  553,  574,  574,  575,  573,  574,  576,
        0,  571,  582,  575,    0,  613,  576,  615,  615,  582,
        0,    0,  575,  575,  575,  576,  576,  578,  582,  582,
      578,  613,  613,    0,  582,  578,  578,  578,  580,  615,

      578,  613,  578,    0,    0,  580,  583,  578,  578,  584,
      578,  578,  578,  583,  580,  580,  584,    0,    0,    0,
      585,    0,  583,  583,    0,  584,  584,  585,    0,    0,
        0,  586,    0,    0,  580,  583,  585,  585,  586,  578,
      578,  579,  606,    0,  579,  584,    0,  586,  586,  579,
      579,  579,    0,  587,  579,    0,  579,  585,  606,  606,
      587,  579,  579,    0,  579,  579,  579,  588,  586,  587,
      587,  589,    0,  587,  588,  608,    0,    0,  589,  606,
        0,    0,    0,  588,  588,    0,    0,  589,  589,  587,
        0,  608,  608,  579,  579,  581,    0,  611,  588,  614,

      596,  596,  581,  596,  616,    0,  596,  589,  596,    0,
      608,  581,  581,  611,  611,  614,  614,    0,  581,  611,
      616,  616,  596,  617,    0,  581,    0,  581,  616,    0,
      618,  581,  581,  619,  581,  597,  614,  620,  597,  617,
      617,    0,    0,  597,  597,  597,  618,  618,  597,  619,
      619,    0,  617,  620,  620,  621,  597,  622,  597,  597,
      597,  623,    0,    0,    0,  624,    0,  626,  619,    0,
        0,  621,  621,  622,  622,  620,    0,  623,  623,  623,
        0,  624,  624,  626,  626,    0,  621,  597,  597,  599,
      625,    0,  599,    0,  622,    0,    0,  599,  599,  599,

      624,  627,  599,  628,    0,  626,  625,  625,  629,    0,
      599,  630,  599,  599,  599,  625,    0,  627,  627,  628,
      628,    0,  631,    0,  629,  629,    0,  630,  630,  632,
        0,    0,  628,  633,    0,  634,    0,  627,  631,  631,
      635,  599,  599,    0,  636,  632,  632,  631,    0,  633,
      633,  634,  634,    0,    0,    0,  635,  635,  637,  633,
      636,  636,  638,    0,  634,  639,    0,    0,    0,  640,
      636,  641,  635,  642,  637,  637,  637,    0,  638,  638,
      643,  639,  639,    0,  638,  640,  640,  641,  641,  642,
      642,  644,    0,  641,  645,    0,  643,  643,    0,  646,

      640,  647,    0,    0,    0,    0,    0,  644,  644,  648,
      645,  645,    0,  649,    0,  646,  646,  647,  647,  650,
      645,  646,  647,    0,  651,  648,  648,  653,  644,  649,
      649,  652,    0,    0,  654,  650,  650,    0,    0,  650,
      651,  651,  655,  653,  653,  649,    0,  652,  652,  652,
      654,  654,  656,  653,  651,    0,    0,  657,  655,  655,
      658,    0,  655,  659,    0,  660,    0,  661,  656,  656,
      654,  662,  656,  657,  657,  663,  658,  658,  665,  659,
      659,  660,  660,  661,  661,    0,    0,  662,  662,  664,
        0,  663,  663,  666,  665,  665,  658,  667,    0,  668,

      660,  659,    0,  661,  669,  664,  664,  664,    0,  666,
      666,  670,  663,  667,  667,  668,  668,  671,    0,  667,
      669,  669,  669,  672,  666,    0,  673,  670,  670,  674,
        0,    0,    0,  671,  671,    0,  675,    0,  676,  672,
      672,  668,  673,  673,  677,  674,  674,    0,  673,  671,
        0,  674,  675,  675,  676,  676,  676,    0,    0,  672,
      677,  677,  681,  681,  677,  681,  686,    0,  681,    0,
      681,    0,    0,  686,  688,    0,    0,    0,    0,    0,
      687,  688,  686,  686,  681,  683,  686,  687,  683,    0,
      688,  688,    0,  683,  683,  683,  687,  687,  683,    0,

      683,    0,    0,    0,  689,    0,  683,  690,  683,  683,
      683,  689,  688,    0,  690,  691,  687,    0,  692,    0,
      689,  689,  691,  690,  690,  692,    0,    0,    0,  693,
      689,  691,  691,    0,  692,  692,  693,  683,  683,  685,
      799,    0,  685,    0,  690,  693,  693,  685,  685,  685,
      692,  694,  685,    0,  695,    0,  799,  799,  694,  693,
      685,  695,  685,  685,  685,    0,  693,  694,  694,  696,
      695,  695,  697,    0,    0,    0,  696,    0,    0,  697,
      698,  694,    0,  699,  695,  696,  696,  698,  697,  697,
      699,  685,  685,    0,  696,    0,  698,  698,  700,  699,

      699,  699,  701,    0,  803,  700,  702,    0,    0,  701,
      703,  698,    0,  702,  700,  700,    0,  703,  701,  701,
      803,  803,  702,  702,  701,  803,  703,  703,  702,  704,
        0,  705,    0,  706,    0,  801,  704,  707,  705,    0,
      706,    0,  703,    0,  707,  704,  704,  705,  705,  706,
      706,  801,  801,  707,  707,  707,  708,  801,  709,    0,
      710,    0,  704,  708,    0,  709,  804,  710,  705,    0,
        0,  706,  708,  708,  709,  709,  710,  710,    0,  711,
        0,  714,  804,  804,  712,  708,  711,  713,  714,    0,
        0,  712,  804,    0,  713,  711,  711,  714,  714,  709,

      712,  712,  712,  713,  713,  715,    0,  716,  713,    0,
      717,    0,  715,  718,  716,    0,  805,  717,    0,    0,
      718,  715,  715,  716,  716,  715,  717,  717,    0,  718,
      718,  719,  805,  805,  720,  718,    0,    0,  719,  716,
      717,  720,  721,    0,    0,  724,    0,  719,  719,  721,
      720,  720,  724,  719,    0,    0,  722,    0,  721,  721,
      723,  724,  724,  722,  802,    0,    0,  723,  725,    0,
        0,  720,  722,  722,  724,  725,  723,  723,  721,    0,
      802,  802,  722,  802,  725,  725,  726,    0,  727,    0,
        0,  728,  726,  726,    0,  727,    0,  723,  728,    0,

      725,    0,  726,  726,  727,  727,    0,  728,  728,    0,
      732,  732,  727,  732,    0,    0,  732,    0,  732,    0,
        0,  806,  743,  743,    0,  743,    0,    0,  743,    0,
      743,    0,  732,  734,  808,    0,  734,  806,  806,    0,
        0,  734,  734,  734,  743,  748,  734,    0,  734,    0,
      808,  808,  748,  749,  734,    0,  734,  734,  734,  813,
      749,  748,  748,  808,  751,  748,  750,    0,    0,  749,
      749,  751,  752,  750,    0,  813,  813,  754,    0,  752,
      751,  751,  750,  750,  754,  734,  734,  736,  752,  752,
      736,  749,  750,  754,  754,  736,  736,  736,  753,  754,

      736,  751,  755,    0,  752,  753,  815,    0,  736,  755,
      736,  736,  736,  756,  753,  753,  753,    0,  755,  755,
      756,  757,  815,  815,  755,    0,  759,    0,  757,  756,
      756,  800,    0,  759,    0,    0,    0,  757,  757,  736,
      736,  745,  759,  759,  745,    0,  756,  800,  800,  745,
      745,  745,  758,  800,  745,    0,  745,  814,  757,  758,
        0,    0,  745,  800,  745,  745,  745,  759,  758,  758,
      758,  760,    0,  814,  814,  761,    0,  814,  760,    0,
        0,    0,  761,    0,  807,    0,    0,  760,  760,  760,
      762,  761,  761,  745,  745,  747,  761,  762,  747,    0,

      807,  807,    0,  747,  747,  747,  762,  762,  747,    0,
      762,  817,    0,    0,  763,  807,  747,  764,  747,  747,
      747,  763,    0,    0,  764,  765,    0,  817,  817,  766,
      763,  763,  765,  764,  764,    0,  766,  817,    0,  764,
        0,  765,  765,  767,  763,  766,  766,  747,  747,    0,
      767,  776,    0,    0,    0,  766,    0,  809,  776,  767,
      767,  810,  765,  771,  771,  778,  771,  776,  776,  771,
        0,  771,  778,  809,  809,    0,  779,  810,  810,  810,
      767,  778,  778,  779,    0,  771,  773,  776,  809,  773,
        0,    0,  779,  779,  773,  773,  773,  780,    0,  773,

        0,  773,    0,    0,  780,  781,  779,  773,  783,  773,
      773,  773,  781,  780,  780,  783,  782,    0,    0,  784,
        0,  781,  781,  782,  783,  783,  784,  780,  822,    0,
      781,    0,  782,  782,    0,  784,  784,    0,  773,  773,
      775,  784,    0,  775,  822,  822,  783,  782,  775,  775,
      775,  785,    0,  775,  822,  786,    0,    0,  785,  787,
        0,  775,  786,  775,  775,  775,  787,  785,  785,  823,
        0,  786,  786,  788,    0,  787,  787,    0,    0,    0,
      788,    0,    0,  811,  786,  823,  823,  785,    0,  788,
      788,  787,  775,  775,    0,  789,  789,  788,  789,  811,

      811,  789,    0,  789,  790,  790,  790,  790,  793,  793,
      790,  793,    0,    0,  793,    0,  793,  789,  792,  812,
      811,  792,    0,    0,    0,    0,  792,  792,  792,    0,
      793,  792,  818,  796,  796,  812,  812,  796,    0,  792,
        0,  792,  792,  792,  816,  796,  819,  796,  818,  818,
      812,  798,  798,  818,  798,    0,    0,  798,    0,  798,
      816,  816,  819,  819,    0,    0,  816,  819,    0,    0,
      792,  792,  795,  798,  821,  795,  796,  796,    0,    0,
      795,  795,  795,  820,    0,  795,  824,    0,    0,    0,
      821,  821,  825,  795,    0,  795,  795,  795,  826,  820,

      820,  827,  824,  824,  828,  820,  829,  824,  825,  825,
      830,  821,    0,  831,  826,  826,  833,  827,  827,  832,
      828,  828,  829,  829,  795,  795,  830,  830,  829,  831,
      831,    0,  833,  833,  826,  832,  832,  834,    0,  835,
        0,  836,    0,  837,  831,  828,  838,    0,  832,    0,
      830,  833,  839,  834,  834,  835,  835,  836,  836,  837,
      837,  840,  838,  838,  841,    0,  838,  842,  839,  839,
        0,  843,  837,  834,  834,    0,    0,  840,  840,  844,
      841,  841,  845,  842,  842,  846,  841,  843,  843,  842,
        0,    0,  840,  847,    0,  844,  844,  848,  845,  845,

      843,  846,  846,  849,    0,    0,    0,  845,  850,  847,
      847,  851,    0,  848,  848,  852,  844,  848,  853,  849,
      849,    0,  846,  854,  850,  850,    0,  851,  851,  849,
      855,  852,  852,    0,  853,  853,  856,  851,  857,  854,
      854,  858,  853,  859,    0,  860,  855,  855,  861,    0,
      852,    0,  856,  856,  857,  857,  862,  858,  858,  859,
      859,  860,  860,    0,  861,  861,    0,  856,    0,    0,
        0,    0,  862,  862,  857,    0,  863,  863,    0,  863,
        0,  862,  863,  861,  863,  864,  864,  864,  864,  866,
      866,  864,  866,    0,    0,  866,    0,  866,  863,  865,

        0,  967,  865,    0,    0,    0,    0,  865,  865,  865,
        0,  866,  865,    0,  865,  870,  870,  967,  967,  870,
      865,    0,  865,  865,  865,  872,  872,  870,  872,  870,
        0,  872,  874,  872,  907,  907,  907,  907,  873,  874,
      907,    0,    0,    0,    0,  873,    0,  872,  874,  874,
        0,  865,  865,  869,  873,  873,  869,    0,  870,  870,
        0,  869,  869,  869,  873,  875,  869,    0,  876,    0,
        0,    0,  875,  877,  869,  876,  869,  869,  869,  878,
      877,  875,  875,  969,  876,  876,  878,  879,    0,  877,
      877,    0,  876,    0,  879,  878,  878,  977,    0,  969,

      969,    0,  875,  879,  879,  869,  869,  871,  877,    0,
      871,    0,  879,  977,  977,  871,  871,  871,  880,  969,
      871,    0,  871,  977,    0,  880,  881,    0,  871,  883,
      871,  871,  871,  881,  880,  880,  883,  882,    0,  880,
      884,    0,  881,  881,  882,  883,  883,  884,    0,  917,
      917,  917,  917,  882,  882,  917,  884,  884,  885,  871,
      871,    0,  886,  881,  883,  885,  887,    0,  882,  886,
        0,    0,  884,  887,  885,  885,    0,  888,  886,  886,
        0,    0,  887,  887,  888,  889,    0,  887,  886,  890,
      885,  891,  889,  888,  888,    0,  890,    0,  891,    0,

        0,  889,  889,  892,    0,  890,  890,  891,  891,  893,
      892,  894,    0,    0,  888,  891,  893,  895,  894,  892,
      892,  892,    0,  896,  895,  893,  893,  894,  894,    0,
      896,  897,    0,  895,  895,    0,    0,    0,  897,  896,
      896,    0,    0,  894,  896,  898,  893,  897,  897,  895,
      899,  897,  898,  900,    0,    0,  901,  899,  902,    0,
      900,  898,  898,  901,    0,  902,  899,  899,    0,  900,
      900,  900,  901,  901,  902,  902,  902,  903,  901,  904,
        0,  905,    0,    0,  903,    0,  904,    0,  905,    0,
        0,    0,  968,  903,  903,  904,  904,  905,  905,  906,

      906,    0,  906,  926,  904,  906,    0,  906,  968,  968,
      926,    0,  903,    0,  913,  913,    0,    0,  913,  926,
      926,  906,  908,    0,    0,  908,  913,  968,  913,  926,
      908,  908,  908,  909,  909,  908,  909,  908,    0,  909,
        0,  909,    0,  908,    0,  908,  908,  908,  915,  915,
        0,  915,    0,    0,  915,  909,  915,  913,  913,  916,
      916,  972,  916,    0,    0,  916,    0,  916,  923,  923,
      915,    0,  923,    0,  908,  908,  912,  972,  972,  912,
      923,  916,  923,    0,  912,  912,  912,  919,  919,  912,
      919,    0,  972,  919,    0,  919,    0,  912,    0,  912,

      912,  912,  925,  925,    0,  925,    0,    0,  925,  919,
      925,  923,  923,    0,    0,  927,    0,    0,  928,    0,
      934,    0,  927,    0,  925,  928,    0,  934,  912,  912,
      914,  927,  927,  914,  928,  928,  934,  934,  914,  914,
      914,  929,  928,  914,    0,  914,  934,    0,  929,  930,
        0,  914,  927,  914,  914,  914,  930,  929,  929,    0,
        0,  932,    0,    0,  931,  930,  930,    0,  932,    0,
        0,  931,  933,    0,  970,    0,  929,  932,  932,  933,
      931,  931,  914,  914,  918,  976,  930,  918,  933,  933,
      970,  970,  918,  918,  918,  931,  932,  918,    0,  918,

        0,  976,  976,  935,  933,  918,  936,  918,  918,  918,
      935,  937,  970,  936,  976,  980,    0,  938,  937,  935,
      935,    0,  936,  936,  938,    0,  971,  937,  937,  937,
      936,  980,  980,  938,  938,  980,  918,  918,  920,    0,
      935,  920,  971,  971,    0,    0,  920,  920,  920,  939,
        0,  920,    0,  920,  938,    0,  939,  940,  971,  920,
      942,  920,  920,  920,  940,  939,  939,  942,  941,    0,
        0,    0,  953,  940,  940,  941,  942,  942,  940,  953,
      958,  939,  942,    0,  941,  941,  941,  958,  953,  953,
      920,  920,  922,    0,  953,  922,  958,  958,  958,    0,

      922,  922,  922,  943,  943,  922,  943,    0,    0,  943,
        0,  943,    0,  922,  973,  922,  922,  922,  944,  944,
      944,  944,    0,    0,  944,  943,  946,  946,    0,  946,
      973,  973,  946,    0,  946,  973,    0,    0,  950,  950,
        0,    0,  950,    0,  922,  922,  924,    0,  946,  924,
      950,    0,  950,    0,  924,  924,  924,  952,  952,  924,
      952,  924,    0,  952,    0,  952,    0,  924,  954,  924,
      924,  924,    0,  955,    0,  954,    0,    0,    0,  952,
      955,  950,  950,    0,  954,  954,    0,    0,  983,  955,
      955,    0,    0,  954,  955,  956,    0,    0,  924,  924,

      945,  981,  956,  945,  983,  983,    0,    0,  945,  945,
      945,  956,  956,  945,    0,  945,  956,  981,  981,  957,
        0,  945,    0,  945,  945,  945,  957,    0,    0,    0,
      959,    0,    0,  974,    0,  957,  957,  959,  981,  957,
        0,    0,  961,  961,  961,  961,  959,  959,  961,  974,
      974,    0,  945,  945,  947,  974,  978,  947,    0,    0,
        0,    0,  947,  947,  947,  959,    0,  947,    0,  947,
      962,  962,  978,  978,  962,  947,    0,  947,  947,  947,
      960,  960,  962,  960,  962,    0,  960,  975,  960,    0,
      964,  964,    0,  964,  978,    0,  964,    0,  964,    0,

        0,    0,  960,  975,  975,    0,  947,  947,  949,  975,
        0,  949,  964,  962,  962,    0,  949,  949,  949,  965,
      965,  949,  965,    0,    0,  965,  979,  965,  982,  949,
      985,  949,  949,  949,  966,  966,  966,  966,  984,    0,
      966,  965,  979,  979,  982,  982,  985,  985,  979,    0,
      982,  986,    0,    0,  984,  984,    0,  987,    0,    0,
      949,  949,  951,    0,  988,  951,    0,  986,  986,  984,
      951,  951,  951,  987,  987,  951,  989,  951,  991,  987,
      988,  988,  990,  951,  992,  951,  951,  951,  986,    0,
        0,  993,  989,  989,  991,  991,  994,    0,  990,  990,

      992,  992,    0,    0,  995,    0,  992,  993,  993,    0,
        0,  996,  994,  994,  951,  951,  963,  993,  990,  963,
      995,  995,    0,    0,  963,  963,  963,  996,  996,  963,
      997,    0,    0,  998,    0,    0,  996,  963,  999,  963,
      963,  963, 1000,    0, 1001,    0,  997,  997, 1002,  998,
      998,    0,  997,    0,  999,  999,  999, 1003, 1000, 1000,
     1001, 1001,    0,    0, 1002, 1002, 1004,    0,  963,  963,
      998, 1005,    0, 1003, 1003, 1006,    0, 1007,    0, 1003,
        0,    0, 1004, 1004, 1008,    0, 1009, 1005, 1005, 1010,
        0, 1006, 1006, 1007, 1007, 1011,    0, 1006,    0, 1013,

     1008, 1008, 1009, 1009,    0, 1010, 1010, 1012,    0, 1014,
        0, 1011, 1011,    0, 1007, 1013, 1013,    0,    0,    0,
        0, 1008,    0, 1012, 1012, 1014, 1014,    0, 1009, 1012,
     1015, 1015, 1011, 1015, 1013,    0, 1015,    0, 1015, 1016,
     1016, 1016, 1016, 1017, 1017, 1016, 1024, 1017, 1019, 1019,
        0, 1019, 1015, 1024, 1019, 1017, 1019, 1017, 1020, 1020,
        0, 1020, 1024, 1024, 1020,    0, 1020,    0,    0,    0,
     1019, 1021, 1021, 1021, 1021, 1022,    0, 1021, 1023,    0,
     1020, 1025, 1022, 1026, 1024, 1023, 1017, 1017, 1025,    0,
     1026, 1022, 1022, 1022, 1023, 1023, 1023, 1025, 1025, 1026,

     1026, 1027,    0,    0, 1028,    0, 1029,    0, 1027, 1026,
        0, 1028,    0, 1029,    0,    0,    0, 1027, 1027, 1025,
     1028, 1028, 1029, 1029, 1030,    0, 1031,    0, 1032,    0,
     1033, 1030, 1034, 1031,    0, 1032,    0, 1033,    0, 1034,
     1030, 1030, 1031, 1031, 1032, 1032, 1033, 1033, 1034, 1034,
     1035,    0, 1030, 1036, 1034,    0, 1033, 1035, 1090,    0,
     1036, 1037,    0, 1031, 1038, 1032, 1035, 1035, 1037, 1036,
     1036, 1038, 1035,    0, 1090, 1090,    0, 1037, 1037, 1039,
     1038, 1038, 1040,    0, 1041,    0, 1039,    0,    0, 1040,
     1036, 1041, 1038,    0,    0, 1039, 1039,    0, 1040, 1040,

     1041, 1041, 1042,    0, 1040,    0, 1043,    0, 1044, 1042,
     1045,    0,    0, 1043, 1039, 1044,    0, 1045, 1042, 1042,
        0, 1041, 1043, 1043, 1044, 1044, 1045, 1045,    0, 1046,
     1043, 1042, 1047, 1047,    0, 1047, 1046,    0, 1047,    0,
     1047,    0, 1091,    0, 1044, 1046, 1046, 1045,    0, 1048,
     1048, 1048, 1048,    0, 1047, 1048, 1049, 1049, 1091, 1091,
     1049, 1046,    0, 1051, 1051,    0, 1051,    0, 1049, 1051,
     1049, 1051, 1052, 1052,    0, 1052,    0,    0, 1052, 1091,
     1052, 1053, 1053, 1053, 1053, 1051,    0, 1053,    0, 1054,
     1054,    0, 1054,    0, 1052, 1054,    0, 1054,    0, 1049,

     1049, 1055, 1055, 1055, 1055, 1056, 1056, 1055,    0, 1056,
        0, 1054, 1058, 1058,    0, 1058,    0, 1056, 1058, 1056,
     1058, 1059, 1059,    0, 1059, 1093,    0, 1059, 1061, 1059,
     1060, 1060, 1060, 1060, 1058, 1061, 1060,    0,    0,    0,
     1062, 1093, 1093, 1059, 1061, 1061, 1061, 1062, 1056, 1056,
        0,    0, 1063,    0, 1064,    0, 1062, 1062, 1062, 1063,
     1065, 1064,    0, 1096,    0, 1066,    0, 1065, 1063, 1063,
     1064, 1064, 1066,    0,    0,    0, 1065, 1065, 1067, 1096,
     1096, 1066, 1066,    0,    0, 1067,    0,    0,    0, 1068,
     1063, 1069, 1064,    0, 1067, 1067, 1068, 1065, 1069,    0,

     1067,    0, 1066, 1070,    0, 1068, 1068, 1069, 1069, 1071,
     1070, 1068, 1075, 1075, 1075, 1075, 1071, 1072, 1075, 1070,
     1070,    0,    0, 1073, 1072, 1071, 1071,    0, 1069,    0,
     1073, 1071,    0, 1072, 1072,    0,    0,    0, 1070, 1073,
     1073, 1092, 1074, 1074,    0, 1074, 1072, 1073, 1074,    0,
     1074, 1076, 1076, 1078, 1078, 1076, 1078, 1092, 1092, 1078,
        0, 1078,    0, 1076, 1074, 1076, 1079, 1079,    0, 1079,
        0,    0, 1079, 1081, 1079, 1078, 1080, 1080, 1080, 1080,
     1081, 1092, 1080,    0, 1082,    0, 1083,    0, 1079, 1081,
     1081, 1082,    0, 1083, 1076, 1076,    0, 1084,    0, 1085,

     1082, 1082, 1083, 1083, 1084,    0, 1085,    0,    0, 1081,
     1082, 1086, 1083, 1084, 1084, 1085, 1085,    0, 1086, 1088,
     1088, 1088, 1088, 1087, 1087, 1088, 1087, 1086, 1086, 1087,
     1089, 1087,    0, 1094, 1084, 1085, 1095,    0, 1097,    0,
        0, 1098,    0, 1099,    0, 1087, 1089, 1089, 1086, 1094,
     1094,    0, 1095, 1095, 1097, 1097, 1089, 1098, 1098, 1099,
     1099, 1100,    0, 1098, 1101,    0, 1102, 1095, 1094,    0,
     1097, 1103, 1089, 1104,    0, 1105,    0, 1100, 1100,    0,
     1101, 1101, 1102, 1102, 1106,    0, 1101, 1103, 1103, 1104,
     1104, 1105, 1105, 1103, 1107, 1104, 1108,    0, 1100, 1109,

     1106, 1106, 1110,    0,    0,    0, 1111,    0, 1112,    0,
     1107, 1107, 1108, 1108, 1113, 1109, 1109, 1114, 1110, 1110,
        0, 1109, 1111, 1111, 1112, 1112, 1115,    0, 1116,    0,
     1113, 1113,    0, 1114, 1114, 1117,    0, 1112, 1118, 1108,
     1119,    0, 1115, 1115, 1116, 1116, 1120,    0, 1115,    0,
        0, 1117, 1117,    0, 1118, 1118, 1119, 1119,    0,    0,
        0,    0, 1120, 1120, 1121, 1121, 1116, 1121,    0,    0,
     1121,    0, 1121,    0, 1118,    0, 1123,    0, 1120, 1122,
     1122, 1122, 1122, 1123, 1124, 1122, 1121, 1125,    0, 1126,
        0, 1124, 1123, 1123, 1125, 1127, 1126,    0,    0, 1169,

     1124, 1124, 1127, 1125, 1125, 1126, 1126, 1128,    0, 1126,
        0, 1127, 1127, 1123, 1128, 1169, 1169,    0, 1129,    0,
     1130, 1124, 1125, 1128, 1128, 1129, 1127, 1130,    0,    0,
     1166,    0, 1131,    0, 1129, 1129, 1130, 1130, 1132, 1131,
     1129,    0,    0,    0, 1133, 1132, 1166, 1166, 1131, 1131,
     1134, 1133, 1166,    0, 1132, 1132,    0, 1134, 1135, 1132,
     1133, 1133, 1130, 1131, 1136, 1135, 1134, 1134, 1134, 1137,
        0, 1136, 1138,    0, 1135, 1135, 1137, 1139,    0, 1138,
     1136, 1136,    0,    0, 1139, 1137, 1137,    0, 1138, 1138,
        0,    0, 1140, 1139, 1139, 1141,    0, 1136, 1138, 1140,

     1137,    0, 1141, 1142,    0,    0, 1143,    0, 1140, 1140,
     1142, 1141, 1141, 1143,    0, 1145, 1145, 1145, 1145, 1142,
     1142, 1145, 1143, 1143, 1144, 1144,    0, 1144,    0,    0,
     1144, 1141, 1144,    0, 1140,    0,    0,    0, 1143, 1142,
        0, 1146, 1146,    0, 1146,    0, 1144, 1146, 1148, 1146,
     1147, 1147, 1147, 1147, 1149, 1148, 1147,    0,    0, 1150,
        0, 1149, 1151, 1146, 1148, 1148, 1150, 1152,    0, 1151,
     1149, 1149,    0,    0, 1152, 1150, 1150,    0, 1151, 1151,
     1153,    0, 1151, 1152, 1152, 1148, 1154, 1153, 1155, 1152,
        0, 1149, 1156, 1154, 1150, 1155, 1153, 1153,    0, 1156,

        0,    0, 1154, 1154, 1155, 1155, 1155, 1154, 1156, 1156,
     1157,    0, 1158,    0,    0, 1159, 1159, 1157, 1159, 1158,
        0, 1159, 1153, 1159,    0, 1156, 1157, 1157, 1158, 1158,
     1160, 1160, 1160, 1160,    0, 1161, 1160, 1159,    0, 1162,
        0, 1157, 1161, 1163,    0,    0, 1162,    0,    0,    0,
     1163, 1161, 1161,    0, 1158, 1162, 1162, 1164,    0, 1163,
     1163, 1165,    0, 1167, 1164, 1168, 1161, 1170, 1165, 1163,
     1162, 1171,    0, 1164, 1164, 1172,    0, 1165, 1165, 1167,
     1167, 1168, 1168, 1170, 1170, 1167,    0, 1171, 1171, 1173,
        0, 1172, 1172, 1164, 1174,    0, 1168, 1165, 1175,    0,

     1176,    0, 1171,    0, 1170, 1173, 1173, 1177,    0, 1178,
     1174, 1174,    0,    0, 1175, 1175, 1176, 1176, 1179, 1175,
     1180,    0, 1181, 1177, 1177, 1178, 1178, 1182,    0, 1177,
     1183,    0,    0,    0, 1179, 1179, 1180, 1180, 1181, 1181,
        0, 1184,    0, 1182, 1182, 1178, 1183, 1183, 1184, 1185,
        0,    0,    0,    0,    0, 1186, 1185, 1184, 1184, 1181,
        0, 1187, 1186, 1214,    0, 1185, 1185, 1184, 1187, 1188,
     1183, 1186, 1186, 1186, 1189, 1185, 1188, 1187, 1187, 1214,
     1214, 1189,    0,    0, 1213, 1188, 1188, 1190,    0,    0,
     1189, 1189, 1191, 1188, 1190, 1192,    0, 1190, 1187, 1191,

     1213, 1213, 1192, 1190, 1190, 1189, 1193,    0, 1191, 1191,
     1194, 1192, 1192, 1193, 1195,    0, 1191, 1194,    0,    0,
     1213, 1195, 1193, 1193,    0, 1196, 1194, 1194,    0, 1197,
     1195, 1195, 1196, 1198, 1195, 1194, 1197, 1199,    0,    0,
     1198, 1196, 1196,    0, 1199, 1197, 1197,    0,    0, 1198,
     1198, 1200,    0, 1199, 1199, 1198, 1196, 1201, 1200, 1202,
        0,    0,    0,    0, 1201, 1204, 1202, 1200, 1200,    0,
     1203,    0, 1204, 1201, 1201, 1202, 1202, 1203, 1215, 1200,
        0, 1204, 1204, 1201, 1205, 1202, 1203, 1203, 1203, 1206,
        0, 1205,    0,    0, 1215, 1215, 1206, 1207,    0, 1206,

     1205, 1205, 1204, 1208, 1207, 1206, 1206,    0,    0, 1209,
     1208, 1210,    0, 1207, 1207, 1205, 1209,    0, 1210, 1208,
     1208, 1216, 1207, 1208, 1211, 1209, 1209, 1210, 1210, 1212,
        0, 1211, 1217, 1209,    0, 1210, 1212, 1216, 1216,    0,
     1211, 1211, 1218,    0, 1219, 1212, 1212, 1220, 1217, 1217,
     1221, 1212,    0,    0, 1222, 1211,    0, 1216, 1218, 1218,
     1219, 1219,    0, 1220, 1220, 1223, 1221, 1221, 1224, 1220,
     1222, 1222, 1223, 1225,    0, 1224, 1221, 1263,    0, 1226,
     1225, 1223, 1223,    0, 1224, 1224, 1226,    0,    0, 1225,
     1225,    0, 1227, 1263, 1263, 1226, 1226,    0, 1228, 1227,

     1243,    0,    0,    0, 1223, 1228, 1229, 1224, 1227, 1227,
     1225, 1226,    0, 1229, 1228, 1228, 1243, 1243, 1230,    0,
     1231,    0, 1229, 1229, 1228, 1230,    0, 1231, 1229, 1227,
        0, 1232, 1243, 1233, 1230, 1230, 1231, 1231, 1232,    0,
     1233,    0, 1230,    0, 1234,    0, 1236, 1232, 1232, 1233,
     1233, 1234, 1235, 1236,    0,    0, 1231, 1237,    0, 1235,
     1234, 1234, 1236, 1236, 1237,    0,    0,    0, 1235, 1235,
     1238,    0, 1233, 1237, 1237, 1239,    0, 1238, 1236,    0,
        0,    0, 1239, 1234,    0, 1242, 1238, 1238, 1240, 1235,
        0, 1239, 1239, 1241, 1237, 1240, 1238, 1239,    0,    0,

     1241, 1242, 1242,    0, 1240, 1240, 1244,    0, 1245, 1241,
     1241,    0, 1240, 1244,    0, 1245,    0,    0,    0, 1246,
        0, 1242, 1244, 1244, 1245, 1245, 1246, 1247, 1244, 1241,
     1245, 1248,    0, 1249, 1247, 1246, 1246,    0, 1248, 1250,
     1249,    0,    0, 1247, 1247, 1246, 1250, 1248, 1248, 1249,
     1249, 1251,    0, 1249, 1252, 1250, 1250, 1253, 1251,    0,
        0, 1252, 1247,    0, 1253, 1254,    0, 1251, 1251,    0,
     1252, 1252, 1254, 1253, 1253,    0, 1252, 1255,    0, 1253,
     1256, 1254, 1254,    0, 1255, 1257,    0, 1256, 1258,    0,
        0, 1254, 1259, 1255, 1255, 1258, 1256, 1256,    0, 1259,

     1256, 1257, 1257, 1260, 1258, 1258, 1261,    0, 1259, 1259,
     1260, 1262, 1255, 1261, 1264,    0, 1257, 1265, 1262, 1260,
     1260, 1264, 1261, 1261, 1265, 1266,    0, 1262, 1262,    0,
     1264, 1264, 1266, 1265, 1265, 1260,    0,    0,    0,    0,
        0, 1266, 1266, 1262,    0, 1264,    0,    0, 1265, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269, 1269,
     1269, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,
     1271, 1271, 1271, 1272, 1272, 1272, 1272, 1272, 1272, 1272,

     1272, 1272, 1272, 1272, 1273, 1273,    0,    0, 1273, 1273,
     1273, 1274,    0, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1275, 1275,    0,    0, 1275, 1275, 1275, 1276,    0,
     1276, 1276, 1276, 1276, 1276, 1276, 1276, 1276, 1277, 1277,
        0,    0, 1277, 1277, 1277, 1278,    0, 1278, 1278, 1278,
     1278, 1278, 1278, 1278, 1278, 1279, 1279,    0,    0, 1279,
     1279, 1279, 1280,    0, 1280, 1280, 1280, 1280, 1280, 1280,
     1280, 1280, 1281, 1281,    0,    0, 1281, 1281, 1281, 1282,
        0, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1283,
        0,    0,    0, 1283,    0, 1283, 1283,    0, 1283, 1283,

     1284,    0,    0, 1284, 1284,    0, 1284, 1284, 1284, 1284,
     1284, 1285, 1285,    0, 1285, 1285, 1285, 1285, 1285, 1285,
     1285, 1285, 1286,    0, 1286, 1286,    0,    0, 1286,    0,
     1286, 1287, 1287, 1287, 1287, 1287,    0, 1287, 1288, 1288,
     1288, 1288, 1288,    0, 1288, 1289, 1289, 1289, 1289, 1289,
        0, 1289, 1290, 1290, 1290, 1290, 1290,    0, 1290, 1291,
     1291, 1291, 1291, 1291,    0, 1291, 1292,    0, 1292, 1292,
     1292, 1292, 1292, 1292, 1292, 1292, 1293,    0,    0,    0,
     1293, 1293, 1293, 1293, 1293, 1293, 1293, 1294,    0, 1294,
     1294, 1294, 1294, 1294, 1294, 1294, 1294, 1295,    0,    0,

        0, 1295, 1295, 1295, 1295, 1295, 1295, 1295, 1296,    0,
     1296, 1296, 1296, 1296, 1296, 1296, 1296, 1296, 1297,    0,
        0,    0, 1297, 1297, 1297, 1297, 1297, 1297, 1297, 1298,
        0,    0,    0, 1298, 1298, 1298, 1298, 1298, 1298, 1298,
     1299,    0, 1299, 1299, 1299, 1299, 1299, 1299, 1299, 1299,
     1300,    0,    0,    0, 1300, 1300, 1300, 1300, 1300, 1300,
     1300, 1301,    0, 1301, 1301, 1301, 1301, 1301, 1301, 1301,
     1301, 1302,    0,    0,    0, 1302, 1302, 1302, 1302, 1302,
     1302, 1302, 1303, 1303,    0, 1303, 1303, 1303, 1303, 1303,
     1303, 1303, 1303, 1304,    0,    0,    0, 1304, 1304, 1304,

     1304, 1304, 1304, 1304, 1305,    0,    0,    0, 1305, 1305,
     1305, 1305, 1305, 1305, 1305, 1306, 1306,    0, 1306, 1306,
     1306, 1306, 1306, 1306, 1306, 1306, 1307,    0,    0,    0,
     1307, 1307, 1307, 1307, 1307, 1307, 1307, 1308,    0,    0,
        0, 1308, 1308, 1308, 1308, 1308, 1308, 1308, 1309, 1309,
        0, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1309, 1310,
        0,    0,    0, 1310, 1310, 1310, 1310, 1310, 1310, 1310,
     1311,    0,    0,    0, 1311, 1311, 1311, 1311, 1311, 1311,
     1311, 1312,    0,    0,    0, 1312, 1312, 1312, 1312, 1312,
     1312, 1312, 1313, 1313,    0, 1313, 1313, 1313, 1313, 1313,

     1313, 1313, 1313, 1314,    0,    0,    0, 1314, 1314, 1314,
     1314, 1314, 1314, 1314, 1315,    0,    0,    0, 1315, 1315,
     1315, 1315, 1315, 1315, 1315, 1316, 1316,    0, 1316, 1316,
     1316, 1316, 1316, 1316, 1316, 1316, 1317,    0,    0,    0,
     1317, 1317, 1317, 1317, 1317, 1317, 1317, 1318,    0,    0,
        0, 1318, 1318, 1318, 1318, 1318, 1318, 1318, 1319, 1319,
        0, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1320,
        0,    0,    0, 1320, 1320, 1320, 1320, 1320, 1320, 1320,
     1321, 1321,    0, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1322, 1322,    0, 1322, 1322, 1322, 1322, 1322, 1322,

     1322, 1322, 1323,    0,    0,    0, 1323, 1323, 1323, 1323,
     1323, 1323, 1323, 1324,    0,    0,    0, 1324, 1324, 1324,
     1324, 1324, 1324, 1324, 1325, 1325,    0, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1326, 1326,    0,    0, 1326,
     1326, 1326, 1327, 1327,    0, 1327, 1327, 1327, 1327, 1327,
     1327, 1327, 1327, 1328,    0,    0,    0, 1328, 1328, 1328,
     1328, 1328, 1328, 1328, 1329,    0,    0,    0, 1329, 1329,
     1329, 1329, 1329, 1329, 1329, 1330, 1330,    0, 1330, 1330,
     1330, 1330, 1330, 1330, 1330, 1330, 1331, 1331,    0, 1331,
     1331, 1331, 1331, 1331, 1331, 1331, 1331, 1332,    0,    0,

        0, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1333, 1333,
        0, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1333, 1334,
        0,    0,    0, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
     1335,    0,    0,    0, 1335, 1335, 1335, 1335, 1335, 1335,
     1335, 1336, 1336,    0, 1336, 1336, 1336, 1336, 1336, 1336,
     1336, 1336, 1337, 1337,    0,    0, 1337, 1337, 1337, 1338,
     1338,    0, 1338, 1338, 1338, 1338, 1338, 1338, 1338, 1338,
     1339,    0,    0,    0, 1339, 1339, 1339, 1339, 1339, 1339,
     1339, 1340, 1340,    0, 1340, 1340, 1340, 1340, 1340, 1340,
     1340, 1340, 1341,    0,    0,    0, 1341, 1341, 1341, 1341,

     1341, 1341, 1341, 1342,    0,    0,    0, 1342, 1342, 1342,
     1342, 1342, 1342, 1342, 1343, 1343,    0, 1343, 1343, 1343,
     1343, 1343, 1343, 1343, 1343, 1344, 1344,    0,    0, 1344,
     1344, 1344, 1345, 1345,    0, 1345, 1345, 1345, 1345, 1345,
     1345, 1345, 1345, 1346,    0,    0,    0, 1346, 1346, 1346,
     1346, 1346, 1346, 1346, 1347,    0,    0,    0, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1348, 1348,    0, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1349, 1349,    0, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1350, 1350,    0,
        0, 1350, 1350, 1350, 1351, 1351,    0, 1351, 1351, 1351,

     1351, 1351, 1351, 1351, 1351, 1352, 1352,    0, 1352, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1353, 1353,    0, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1354, 1354,    0,
     1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267, 1267,
     1267, 1267, 1267, 1267, 1267

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../../../src/Mixfix/lexer.ll"
/*

    This file is part of the Maude 2 interpreter.

    Copyright 1997-2010 SRI International, Menlo Park, CA 94025, USA.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

*/
/*
//	Lexical analyser
*/
#line 27 "../../../src/Mixfix/lexer.ll"
//      utility stuff
#include "macros.hh"
#include "vector.hh"

//	forward declarations
#include "interface.hh"
#include "core.hh"
#include "higher.hh"
#include "strategyLanguage.hh"
#include "mixfix.hh"

//	core class definitions
#include "lineNumber.hh"

//	front end class definitions
#include "token.hh"
#include "fileTable.hh"
#include "directoryManager.hh"
//#include "preModule.hh"
#include "lexerAux.hh"
#include "global.hh"
#include "userLevelRewritingContext.hh"
#include "interpreter.hh"

//	bison generated token file
#include "surface.h"

#define YY_DECL int yylex(YYSTYPE* lvalp)

void getInput(char* buf, yy_size_t& result, yy_size_t max_size);
//
//	result might be an int or a yy_size_t depending on flex version, so we use a temporary.
//
#define YY_INPUT(buf, result, max_size) \
  { yy_size_t safeResult; getInput(buf, safeResult, max_size); result = safeResult; }

#define RETURN(token) \
  { lvalp->yyToken.tokenize(yytext, lineNumber); return (token); }

#define RETURN_FIX_UP(token) \
  { lvalp->yyToken.fixUp(yytext, lineNumber); return (token); }

#define SAVE(token) \
  { savedToken.tokenize(yytext, lineNumber); savedReturn = token; }

#define SAVE_FIX_UP(token) \
  { savedToken.fixUp(yytext, lineNumber); savedReturn = token; }

#define RETURN_SAVED(token) \
  { lvalp->yyToken = savedToken; return (token); }

#define STORE \
  { Token t; t.tokenize(yytext, lineNumber); lexerBubble.append(t); /*DebugAdvisory("Stored " << t);*/ }
#define STORE_FIX_UP \
  { Token t; t.fixUp(yytext, lineNumber); lexerBubble.append(t); /*DebugAdvisory("Stored fixUp " << t);*/ }

#define EXIT(token) \
  { yy_pop_state(); RETURN(token) }

Token savedToken;
int savedReturn;
int braceCount;
int parenCount;
int terminationSet;
string accumulator;
string fileName;

//int terminationCondition;
int minLength;
extern Vector<Token> lexerBubble;










#line 2873 "<stdout>"

#define INITIAL 0
#define ID_MODE 1
#define CMD_MODE 2
#define SEEN_DOT 3
#define BUBBLE_MODE 4
#define END_STATEMENT_MODE 5
#define END_COMMAND_MODE 6
#define FILE_NAME_MODE 7
#define FILE_NAME_QUOTE_MODE 8
#define STRING_MODE 9
#define LATEX_MODE 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 119 "../../../src/Mixfix/lexer.ll"

	if (UserLevelRewritingContext::interrupted())
	  yyterminate();

#line 3085 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1268 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8439 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 123 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  eatComment(false);
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 127 "../../../src/Mixfix/lexer.ll"
{
					  yyless(3);
					  eatComment(true);
					}
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 133 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MEMO)
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 134 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FORMAT)
	YY_BREAK


case 5:
YY_RULE_SETUP
#line 138 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IN)
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 142 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MOD)  // need to know which one we saw
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 143 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OMOD)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 144 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VIEW);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 145 "../../../src/Mixfix/lexer.ll"
return KW_LOAD;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 146 "../../../src/Mixfix/lexer.ll"
return KW_PWD;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 147 "../../../src/Mixfix/lexer.ll"
return KW_CD;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 148 "../../../src/Mixfix/lexer.ll"
return KW_PUSHD;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 149 "../../../src/Mixfix/lexer.ll"
return KW_POPD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 150 "../../../src/Mixfix/lexer.ll"
return KW_LS;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 151 "../../../src/Mixfix/lexer.ll"
return KW_QUIT;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 152 "../../../src/Mixfix/lexer.ll"
return KW_EOF;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 153 "../../../src/Mixfix/lexer.ll"
return KW_PARSE;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 154 "../../../src/Mixfix/lexer.ll"
return KW_NORMALIZE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 155 "../../../src/Mixfix/lexer.ll"
return KW_REDUCE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 156 "../../../src/Mixfix/lexer.ll"
return KW_CREDUCE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 157 "../../../src/Mixfix/lexer.ll"
return KW_SREDUCE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 158 "../../../src/Mixfix/lexer.ll"
return KW_REWRITE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 159 "../../../src/Mixfix/lexer.ll"
return KW_EREWRITE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 160 "../../../src/Mixfix/lexer.ll"
return KW_FREWRITE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 161 "../../../src/Mixfix/lexer.ll"
return KW_SREWRITE;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 162 "../../../src/Mixfix/lexer.ll"
return KW_LOOP;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 163 "../../../src/Mixfix/lexer.ll"
return KW_CONTINUE;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 164 "../../../src/Mixfix/lexer.ll"
return KW_NARROW;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 165 "../../../src/Mixfix/lexer.ll"
return KW_XG_NARROW;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 166 "../../../src/Mixfix/lexer.ll"
return KW_GET;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 167 "../../../src/Mixfix/lexer.ll"
return KW_VARIANTS;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 168 "../../../src/Mixfix/lexer.ll"
return KW_VARIANT;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 169 "../../../src/Mixfix/lexer.ll"
return KW_MATCH;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 170 "../../../src/Mixfix/lexer.ll"
return KW_XMATCH;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 171 "../../../src/Mixfix/lexer.ll"
return KW_SEARCH;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 172 "../../../src/Mixfix/lexer.ll"
return KW_UNIFY;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 173 "../../../src/Mixfix/lexer.ll"
return KW_SET;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 174 "../../../src/Mixfix/lexer.ll"
return KW_SHOW;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 175 "../../../src/Mixfix/lexer.ll"
return KW_ON;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 176 "../../../src/Mixfix/lexer.ll"
return KW_OFF;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 177 "../../../src/Mixfix/lexer.ll"
return KW_TRACE;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 178 "../../../src/Mixfix/lexer.ll"
return KW_ADVISE;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 179 "../../../src/Mixfix/lexer.ll"
return KW_VERBOSE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 180 "../../../src/Mixfix/lexer.ll"
return KW_DO;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 181 "../../../src/Mixfix/lexer.ll"
return KW_CLEAR;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 182 "../../../src/Mixfix/lexer.ll"
return KW_BODY;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 183 "../../../src/Mixfix/lexer.ll"
return KW_BUILTIN;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 184 "../../../src/Mixfix/lexer.ll"
return KW_WHOLE;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 185 "../../../src/Mixfix/lexer.ll"
return KW_SELECT;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 186 "../../../src/Mixfix/lexer.ll"
return KW_DESELECT;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 187 "../../../src/Mixfix/lexer.ll"
return KW_CONCEAL;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 188 "../../../src/Mixfix/lexer.ll"
return KW_REVEAL;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 189 "../../../src/Mixfix/lexer.ll"
return KW_CONDITION;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 190 "../../../src/Mixfix/lexer.ll"
return KW_SUBSTITUTION;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 191 "../../../src/Mixfix/lexer.ll"
return KW_PRINT;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 192 "../../../src/Mixfix/lexer.ll"
return KW_ATTRIBUTE;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 193 "../../../src/Mixfix/lexer.ll"
return KW_NEWLINE;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 194 "../../../src/Mixfix/lexer.ll"
return KW_COLOR;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 195 "../../../src/Mixfix/lexer.ll"
return KW_GRAPH;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 196 "../../../src/Mixfix/lexer.ll"
return KW_MIXFIX;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 197 "../../../src/Mixfix/lexer.ll"
return KW_FLAT;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 198 "../../../src/Mixfix/lexer.ll"
return KW_WITH;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 199 "../../../src/Mixfix/lexer.ll"
return KW_PARENS;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 200 "../../../src/Mixfix/lexer.ll"
return KW_ALIASES;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 201 "../../../src/Mixfix/lexer.ll"
return KW_GC;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 202 "../../../src/Mixfix/lexer.ll"
return KW_TIME;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 203 "../../../src/Mixfix/lexer.ll"
return KW_STATS;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 204 "../../../src/Mixfix/lexer.ll"
return KW_TIMING;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 205 "../../../src/Mixfix/lexer.ll"
return KW_CMD;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 206 "../../../src/Mixfix/lexer.ll"
return KW_ALL;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 207 "../../../src/Mixfix/lexer.ll"
return KW_MODULES;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 208 "../../../src/Mixfix/lexer.ll"
return KW_MODULE;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 209 "../../../src/Mixfix/lexer.ll"
return KW_VIEWS;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 210 "../../../src/Mixfix/lexer.ll"
return KW_SORTS;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 211 "../../../src/Mixfix/lexer.ll"
return KW_OPS2;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 212 "../../../src/Mixfix/lexer.ll"
return KW_VARS;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 213 "../../../src/Mixfix/lexer.ll"
return KW_MBS;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 214 "../../../src/Mixfix/lexer.ll"
return KW_EQS;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 215 "../../../src/Mixfix/lexer.ll"
return KW_RLS;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 216 "../../../src/Mixfix/lexer.ll"
return KW_SUMMARY;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 217 "../../../src/Mixfix/lexer.ll"
return KW_KINDS;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 218 "../../../src/Mixfix/lexer.ll"
return KW_COMPILE;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 219 "../../../src/Mixfix/lexer.ll"
return KW_COUNT;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 220 "../../../src/Mixfix/lexer.ll"
return KW_PROTECT;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 221 "../../../src/Mixfix/lexer.ll"
return KW_EXTEND;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 222 "../../../src/Mixfix/lexer.ll"
return KW_INCLUDE;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 223 "../../../src/Mixfix/lexer.ll"
return KW_EXCLUDE;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 224 "../../../src/Mixfix/lexer.ll"
return KW_DEBUG;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 225 "../../../src/Mixfix/lexer.ll"
return KW_RESUME;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 226 "../../../src/Mixfix/lexer.ll"
return KW_ABORT;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 227 "../../../src/Mixfix/lexer.ll"
return KW_STEP;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 228 "../../../src/Mixfix/lexer.ll"
return KW_WHERE;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 229 "../../../src/Mixfix/lexer.ll"
return KW_DUMP;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 230 "../../../src/Mixfix/lexer.ll"
return KW_BREAK;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 231 "../../../src/Mixfix/lexer.ll"
return KW_BREAKDOWN;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 232 "../../../src/Mixfix/lexer.ll"
return KW_PATH;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 233 "../../../src/Mixfix/lexer.ll"
return KW_LABEL;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 234 "../../../src/Mixfix/lexer.ll"
return KW_PROFILE;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 235 "../../../src/Mixfix/lexer.ll"
return KW_NUMBER;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 236 "../../../src/Mixfix/lexer.ll"
return KW_RAT;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 237 "../../../src/Mixfix/lexer.ll"
return *yytext;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 238 "../../../src/Mixfix/lexer.ll"
{
					  bool dummy;
					  lvalp->yyInt64 = stringToInt64(yytext, dummy, 10);
					  return SIMPLE_NUMBER;
					}
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 243 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped unexpected token: " <<
					    QUOTE(yytext));
					}
	YY_BREAK

/*
  *	In command mode we only recognize special tokens
  *	"in" "(" ")" "[" "]" ":" "." "," and non-negative numbers.
  *	Everything else is an identifier. Furthermore "." is only recognized
  *	at the end of a line or before a comment (ignoring white space).
  */

case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 257 "../../../src/Mixfix/lexer.ll"
{
                                          yyless(1);
                                          RETURN('.')
                                        }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 261 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 262 "../../../src/Mixfix/lexer.ll"
RETURN(NUMERIC_ID)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 263 "../../../src/Mixfix/lexer.ll"
RETURN(IDENTIFIER)
	YY_BREAK
case 108:
/* rule 108 can match eol */
YY_RULE_SETUP
#line 264 "../../../src/Mixfix/lexer.ll"
{
					  SAVE_FIX_UP(ENDS_IN_DOT)
					  BEGIN(SEEN_DOT);
					}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 268 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(IDENTIFIER)
	YY_BREAK


case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 272 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  BEGIN(CMD_MODE);
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 277 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  BEGIN(CMD_MODE);
					  RETURN_SAVED(IDENTIFIER)
					}
	YY_BREAK

/*
  *	Id mode is used for scanning modules; a whole bunch of special tokens
  *	are recognized.
  */

case 112:
YY_RULE_SETUP
#line 289 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TO)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 290 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROM)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 291 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LABEL)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 292 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ASSOC)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 293 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COMM)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 294 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 295 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IDEM)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 296 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ITER)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 297 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LEFT)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 298 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RIGHT)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 299 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PREC)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 300 "../../../src/Mixfix/lexer.ll"
RETURN(KW_GATHER)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 301 "../../../src/Mixfix/lexer.ll"
RETURN(KW_METADATA)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 302 "../../../src/Mixfix/lexer.ll"
RETURN(KW_STRAT)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 303 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROZEN)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 304 "../../../src/Mixfix/lexer.ll"
RETURN(KW_POLY)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 305 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CTOR)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 306 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LATEX)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 307 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SPECIAL)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 308 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CONFIG)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 309 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OBJ)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 310 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSG)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 311 "../../../src/Mixfix/lexer.ll"
RETURN(KW_DITTO)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 312 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID_HOOK)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 313 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP_HOOK)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 314 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TERM_HOOK)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 315 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IS)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 316 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IF)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 317 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IMPORT)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 318 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SORT)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 319 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBSORT)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 320 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CLASS)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 321 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBCLASS)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 322 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 323 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OPS)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 324 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSGS)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 325 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VAR)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 326 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MB)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 327 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CMB)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 328 "../../../src/Mixfix/lexer.ll"
RETURN(KW_EQ)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 329 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CEQ)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 330 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RL)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 331 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CRL)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 332 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDM)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 333 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDV)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 334 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 335 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW2)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 336 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PARTIAL)
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 337 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COLON2)
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 338 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 339 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(ENDS_IN_DOT)
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 340 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(IDENTIFIER)
	YY_BREAK

/*
  *	Bubble mode squirrels tokens away in lexerBubble until some termination criteria is met.
  */

case 164:
YY_RULE_SETUP
#line 347 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_COLON) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 353 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_COMMA) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 359 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_LEFT_BRACKET) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 365 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_RIGHT_BRACKET) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 371 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_EQUALS) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 377 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_ARROW2) && lexerBubble.length() >= minLength)
					    EXIT(KW_ARROW2)
					  else
					    STORE
					}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 383 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_TO) && lexerBubble.length() >= minLength)
					    EXIT(KW_TO)
					  else
					    STORE
					}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 389 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_IF) && lexerBubble.length() >= minLength)
					    EXIT(KW_IF)
					  else
					    STORE
					}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 395 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_OP_ATTRIBUTE) && lexerBubble.length() >= minLength)
					    {
					      yyless(0);  // need to re-lex it to get the correct return value
					      yy_pop_state();
					    }
					  else
					    STORE
					}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 404 "../../../src/Mixfix/lexer.ll"
{
					  ++parenCount;
					  STORE
					}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 408 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0)
					    {
					      if ((terminationSet & BAR_RIGHT_PAREN) && lexerBubble.length() >= minLength)
					        EXIT(*yytext)
					      IssueWarning(LineNumber(lineNumber) << ": mismatched parentheses.");
					    }
					  else
					    --parenCount;
					  STORE
					}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 419 "../../../src/Mixfix/lexer.ll"
STORE
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 420 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 &&
					      lexerBubble.length() >= minLength &&
					      (terminationSet & (END_STATEMENT | END_COMMAND)))
					    {
					      SAVE(*yytext)
					      BEGIN((terminationSet & END_STATEMENT) ? END_STATEMENT_MODE : END_COMMAND_MODE);
					    }
					  else
					    STORE
					}
	YY_BREAK
case 177:
/* rule 177 can match eol */
YY_RULE_SETUP
#line 431 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 &&
					      lexerBubble.length() + 1 >= minLength  &&
					      (terminationSet & (END_STATEMENT | END_COMMAND)))
					    {
					      SAVE_FIX_UP(ENDS_IN_DOT)
					      BEGIN((terminationSet & END_STATEMENT) ? END_STATEMENT_MODE : END_COMMAND_MODE);
					    }
					  else
					    STORE_FIX_UP
					}
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 442 "../../../src/Mixfix/lexer.ll"
STORE_FIX_UP
	YY_BREAK

/*
  *	We have saved something that looks like a statement terminating period. We now lex the next
  *	token to see if it ends a module or starts a new statement, and if so push the lexed token back
  *	on to the input stream to be re-lexed in a new mode.
  */

case 179:
YY_RULE_SETUP
#line 451 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // BUG - need to deal with white space and comments after the .
					  yy_pop_state();
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK


case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 459 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  yy_pop_state();
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK


case 181:
YY_RULE_SETUP
#line 467 "../../../src/Mixfix/lexer.ll"
{
					  lexerBubble.append(savedToken);
					  SAVE(*yytext);
					}
	YY_BREAK
case 182:
/* rule 182 can match eol */
YY_RULE_SETUP
#line 471 "../../../src/Mixfix/lexer.ll"
{
					  lexerBubble.append(savedToken);
					  SAVE_FIX_UP(ENDS_IN_DOT)
					}
	YY_BREAK
case 183:
/* rule 183 can match eol */
YY_RULE_SETUP
#line 475 "../../../src/Mixfix/lexer.ll"
{
	     				  //
					  //	We need {maudeId} here so that an identifier such
					  //	as .foo doesn't get split by the first rule.
					  //
					  lexerBubble.append(savedToken);
					  yyless(0);
					  BEGIN(BUBBLE_MODE);
					}
	YY_BREAK


case 184:
YY_RULE_SETUP
#line 487 "../../../src/Mixfix/lexer.ll"
{
					  if (accumulator.empty())
					    BEGIN(FILE_NAME_QUOTE_MODE);
					  else
					    accumulator += '"';
					}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 493 "../../../src/Mixfix/lexer.ll"
accumulator += ' ';
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 494 "../../../src/Mixfix/lexer.ll"
accumulator += '"';
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 495 "../../../src/Mixfix/lexer.ll"
accumulator += '\\';
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 496 "../../../src/Mixfix/lexer.ll"
accumulator += '\\';
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 497 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 498 "../../../src/Mixfix/lexer.ll"
{
					  if (!accumulator.empty())
					    {
					      yy_pop_state();
					      lvalp->yyString = accumulator.c_str();
					      eatComment(false);
					      return FILE_NAME_STRING;
					    }
					}
	YY_BREAK
case 191:
/* rule 191 can match eol */
YY_RULE_SETUP
#line 507 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  yy_pop_state();
					  lvalp->yyString = accumulator.c_str();
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 192:
YY_RULE_SETUP
#line 516 "../../../src/Mixfix/lexer.ll"
{
					   yy_pop_state();
					   lvalp->yyString = accumulator.c_str();
					   eatComment(false);
					   return FILE_NAME_STRING;
					}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 522 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 194:
/* rule 194 can match eol */
YY_RULE_SETUP
#line 523 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  yy_pop_state();
					  lvalp->yyString = accumulator.c_str();
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 195:
YY_RULE_SETUP
#line 532 "../../../src/Mixfix/lexer.ll"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 537 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // so that line numbers will be correct
					  yy_pop_state();
					  lvalp->yyString = "";			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK


case 197:
YY_RULE_SETUP
#line 546 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 547 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    ++parenCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 552 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    {
					      --parenCount;
					      if (parenCount == 0)
					        {
						  yyless(0);
						  yy_pop_state();
						  lvalp->yyString = accumulator.c_str();
						  return LATEX_STRING;
						}
					    }
					  accumulator += yytext;
					}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 566 "../../../src/Mixfix/lexer.ll"
{
					  ++braceCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 570 "../../../src/Mixfix/lexer.ll"
{
					  --braceCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 574 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  accumulator += yytext;
					}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 578 "../../../src/Mixfix/lexer.ll"
yy_pop_state();  // mindless recovery
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ID_MODE):
case YY_STATE_EOF(CMD_MODE):
case YY_STATE_EOF(SEEN_DOT):
case YY_STATE_EOF(BUBBLE_MODE):
case YY_STATE_EOF(END_STATEMENT_MODE):
case YY_STATE_EOF(END_COMMAND_MODE):
case YY_STATE_EOF(FILE_NAME_MODE):
case YY_STATE_EOF(FILE_NAME_QUOTE_MODE):
case YY_STATE_EOF(STRING_MODE):
case YY_STATE_EOF(LATEX_MODE):
#line 581 "../../../src/Mixfix/lexer.ll"
{
					  if (UserLevelRewritingContext::interrupted() ||
					      !handleEof())
					    yyterminate();
					}
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 587 "../../../src/Mixfix/lexer.ll"
;
	YY_BREAK
case 205:
/* rule 205 can match eol */
YY_RULE_SETUP
#line 588 "../../../src/Mixfix/lexer.ll"
++lineNumber;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 589 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped: " << QUOTE(yytext));
					}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 594 "../../../src/Mixfix/lexer.ll"
ECHO;
	YY_BREAK
#line 4481 "<stdout>"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1268 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1268 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1267);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 594 "../../../src/Mixfix/lexer.ll"



#include "lexerAux.cc"

